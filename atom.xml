<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zer0e&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://re0.top/"/>
  <updated>2024-07-18T11:56:12.789Z</updated>
  <id>https://re0.top/</id>
  
  <author>
    <name>Zer0e</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2024面试复盘5</title>
    <link href="https://re0.top/2024/07/17/2024-07-17-replay/"/>
    <id>https://re0.top/2024/07/17/2024-07-17-replay/</id>
    <published>2024-07-17T07:00:00.000Z</published>
    <updated>2024-07-18T11:56:12.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当我想好好复盘一下的时候总是通知我面试。怪不得说找工作是一件很辛苦的事情，既要找机会，又要面试，又要复盘，又要改简历，中途还得穿插学习，有点顶不住，忙里偷闲复盘一下。</p><h1 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h1><p>两个面试放在一起讲了。一个都在问项目另一个八股文比较多。</p><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p>深挖项目，无言。</p><ol><li>任务分片怎么做？</li><li>优化点？</li></ol><h2 id="java和python多线程什么差别？"><a href="#java和python多线程什么差别？" class="headerlink" title="java和python多线程什么差别？"></a>java和python多线程什么差别？</h2><p>原回答：python一般使用threading.Thread直接创建线程，java里一般采用线程池管理线程。python的多线程无法利用到多核优势。</p><p>网上看别人的回答：1.python不是真正的多线程。(GIL的问题)2.Java中，每个线程都有自己的堆栈空间，线程之间的堆栈空间是独立的。Python中，所有线程共享相同的内存空间，因此需要特别小心避免数据竞争和死锁。</p><h2 id="工作最大的挑战是什么？"><a href="#工作最大的挑战是什么？" class="headerlink" title="工作最大的挑战是什么？"></a>工作最大的挑战是什么？</h2><p>项目管理和统筹。</p><h2 id="最近有看什么书"><a href="#最近有看什么书" class="headerlink" title="最近有看什么书"></a>最近有看什么书</h2><p>复盘+。当然也没看多少，时间根本不够。</p><h2 id="多线程编程时，如何确保数据安全"><a href="#多线程编程时，如何确保数据安全" class="headerlink" title="多线程编程时，如何确保数据安全"></a>多线程编程时，如何确保数据安全</h2><p>加锁是比较实用的操作。</p><h2 id="常用的锁？"><a href="#常用的锁？" class="headerlink" title="常用的锁？"></a>常用的锁？</h2><p>java里就是synchronized还有lock，其他的有分布式锁。</p><h2 id="synchronized关键字和java里的可重入锁有什么区别"><a href="#synchronized关键字和java里的可重入锁有什么区别" class="headerlink" title="synchronized关键字和java里的可重入锁有什么区别"></a>synchronized关键字和java里的可重入锁有什么区别</h2><p>这里面试官应该是想说synchronized和ReentrantLock。因为synchronized也是可重入的。</p><ol><li>两者都是可重入锁。</li><li>ReentrantLock可以支持公平和非公平。</li><li>ReentrantLock提供了一种能够中断等待锁的线程的机制，通过 <code>lock.lockInterruptibly()</code> 来实现这个机制。也就是说正在等待的线程可以选择放弃等待，改为处理其他事情。</li><li><strong>可实现选择性通知（锁可以绑定多个条件）</strong>: <code>synchronized</code>关键字与<code>wait()</code>和<code>notify()</code>/<code>notifyAll()</code>方法相结合可以实现等待/通知机制。<code>ReentrantLock</code>类当然也可以实现，但是需要借助于<code>Condition</code>接口与<code>newCondition()</code>方法。</li></ol><h2 id="synchronized关键字加在普通方法和静态方法有什么区别"><a href="#synchronized关键字加在普通方法和静态方法有什么区别" class="headerlink" title="synchronized关键字加在普通方法和静态方法有什么区别"></a>synchronized关键字加在普通方法和静态方法有什么区别</h2><ul><li><strong>修饰实例方法</strong> （锁当前对象实例）</li><li><strong>修饰静态方法</strong> （锁当前类）</li><li><strong>修饰代码块</strong> （锁指定对象/类）</li></ul><h2 id="线程池的几个常用参数"><a href="#线程池的几个常用参数" class="headerlink" title="线程池的几个常用参数"></a>线程池的几个常用参数</h2><p><code>ThreadPoolExecutor</code> 3 个最重要的参数：</p><ul><li><code>corePoolSize</code> : 任务队列未达到队列容量时，最大可以同时运行的线程数量。</li><li><code>maximumPoolSize</code> : 任务队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。</li><li><code>workQueue</code>: 新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。</li></ul><p><code>ThreadPoolExecutor</code>其他常见参数 :</p><ul><li><code>keepAliveTime</code>:线程池中的线程数量大于 <code>corePoolSize</code> 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 <code>keepAliveTime</code>才会被回收销毁。</li><li><code>unit</code> : <code>keepAliveTime</code> 参数的时间单位。</li><li><code>threadFactory</code> :executor 创建新线程的时候会用到。</li><li><code>handler</code> :拒绝策略（后面会单独详细介绍一下）。</li></ul><h2 id="常见拒绝策略策略"><a href="#常见拒绝策略策略" class="headerlink" title="常见拒绝策略策略"></a>常见拒绝策略策略</h2><p><code>ThreadPoolExecutor.AbortPolicy</code>：抛出 <code>RejectedExecutionException</code>来拒绝新任务的处理。</p><p><code>ThreadPoolExecutor.CallerRunsPolicy</code>：调用执行自己的线程运行任务，也就是直接在调用<code>execute</code>方法的线程中运行(<code>run</code>)被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。因此这种策略会降低对于新任务提交速度，影响程序的整体性能。如果你的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话，你可以选择这个策略。</p><p><code>ThreadPoolExecutor.DiscardPolicy</code>：不处理新任务，直接丢弃掉。</p><p><code>ThreadPoolExecutor.DiscardOldestPolicy</code>：此策略将丢弃最早的未处理的任务请求。</p><h2 id="多线程导致死锁的原因"><a href="#多线程导致死锁的原因" class="headerlink" title="多线程导致死锁的原因"></a>多线程导致死锁的原因</h2><ul><li><p>互斥条件：该资源任意一个时刻只由一个线程占用。</p></li><li><p>请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放。</p></li><li><p>不剥夺条件:线程已获得的资源在未使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。</p></li><li><p>循环等待条件:若干线程之间形成一种头尾相接的循环等待资源关系。</p></li></ul><h2 id="死锁的检测和避免"><a href="#死锁的检测和避免" class="headerlink" title="死锁的检测和避免"></a>死锁的检测和避免</h2><p>使用<code>jmap</code>、<code>jstack</code>等命令查看 JVM 线程栈和堆内存的情况。如果有死锁，<code>jstack</code> 的输出中通常会有 <code>Found one Java-level deadlock:</code>的字样，后面会跟着死锁相关的线程信息。另外，实际项目中还可以搭配使用<code>top</code>、<code>df</code>、<code>free</code>等命令查看操作系统的基本情况，出现死锁可能会导致 CPU、内存等资源消耗过高。</p><p><strong>如何预防死锁？</strong> 破坏死锁的产生的必要条件即可：</p><ol><li><strong>破坏请求与保持条件</strong>：一次性申请所有的资源。</li><li><strong>破坏不剥夺条件</strong>：占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源。</li><li><strong>破坏循环等待条件</strong>：靠按序申请资源来预防。按某一顺序申请资源，释放资源则反序释放。破坏循环等待条件。</li></ol><p>避免死锁就是在资源分配时，借助于算法（比如银行家算法）对资源分配进行计算评估，使其进入安全状态。</p><h2 id="有一个任务需要等待几个子任务执行完成，需要怎么实现"><a href="#有一个任务需要等待几个子任务执行完成，需要怎么实现" class="headerlink" title="有一个任务需要等待几个子任务执行完成，需要怎么实现"></a>有一个任务需要等待几个子任务执行完成，需要怎么实现</h2><p>Semaphore，CountDownLatch， CyclicBarrier。</p><p>假设有四个子任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(-<span class="number">4</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 处理逻辑</span></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        semaphore.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">semaphore.acquire();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 处理逻辑</span></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">countDownLatch.await();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> CyclicBarrier cb = <span class="keyword">new</span> CyclicBarrier(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 处理逻辑</span></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        cb.await();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">cb.await();</span><br></pre></td></tr></table></figure><h2 id="sql查询慢怎么排查？加了索引还是比较慢怎么排查"><a href="#sql查询慢怎么排查？加了索引还是比较慢怎么排查" class="headerlink" title="sql查询慢怎么排查？加了索引还是比较慢怎么排查"></a>sql查询慢怎么排查？加了索引还是比较慢怎么排查</h2><p>使用explain检查sql。</p><p>优化手段：</p><ol><li>避免使用select * ，原因是会消耗更多CPU，增加带宽，无法使用mysql优化器覆盖索引的优化。</li><li>分页优化。使用子查询或内连接，使用子查询的id作为主查询的条件。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `score`, `name` <span class="keyword">FROM</span> `cus_order`</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">&gt;=</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> `cus_order` LIMIT <span class="number">1000000</span>, <span class="number">1</span>)</span><br><span class="line">LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>尽量避免多表做 join</strong></li><li><strong>建议不要使用外键与级联</strong></li><li><strong>选择合适的字段类型</strong>。某些字符串可以转换成数字类型存储比如可以将 IP 地址转换成整型数据；对于非负型的数据 (如自增 ID,整型 IP，年龄) 来说,要优先使用无符号整型来存储；小数值类型（比如年龄、状态表示如 0/1）优先使用 TINYINT 类型；对于日期类型来说， 一定不要用字符串存储日期。可以考虑 DATETIME、TIMESTAMP 和 数值型时间戳；金额字段用 decimal，避免精度丢失；尽量使用自增 id 作为主键；不建议使用 NULL 作为列默认值；</li></ol><h2 id="索引失效的场景"><a href="#索引失效的场景" class="headerlink" title="索引失效的场景"></a>索引失效的场景</h2><ul><li>SELECT * 不会直接导致索引失效（如果不走索引大概率是因为 where 查询范围过大导致的），但它可能会带来一些其他的性能问题比如造成网络传输和数据处理的浪费、无法使用索引覆盖;</li><li>创建了组合索引，但查询条件未准守最左匹配原则;</li><li>在索引列上进行计算、函数、类型转换等操作;</li><li>以 % 开头的 LIKE 查询比如 LIKE ‘%abc’;;</li><li>查询条件中使用 OR，且 OR 的前后条件中有一个列没有索引，涉及的索引都不会被使用到;</li><li>IN 的取值范围较大时会导致索引失效，走全表扫描(NOT IN 和 IN 的失效场景相同);<br>发生<a href="https://javaguide.cn/database/mysql/index-invalidation-caused-by-implicit-conversion.html">隐式转换</a>;</li></ul><h2 id="未满足最左匹配为什么会索引失效"><a href="#未满足最左匹配为什么会索引失效" class="headerlink" title="未满足最左匹配为什么会索引失效"></a>未满足最左匹配为什么会索引失效</h2><p>在 InnoDB 中联合索引只有先确定了前一个（左侧的值）后，才能确定下一个值。</p><h2 id="innoDb索引结构？b-树有什么优点？"><a href="#innoDb索引结构？b-树有什么优点？" class="headerlink" title="innoDb索引结构？b+树有什么优点？"></a>innoDb索引结构？b+树有什么优点？</h2><p>innodb使用B+树。</p><ol><li>由于B+树在内部节点上不包含数据信息，因此在<strong>内存页中能够存放更多的key</strong>。 数据存放的更加紧密，具有更好的空间局部性。因此访问叶子节点上关联的数据也具有更好的缓存命中率。</li><li>B+树的叶子结点都是相链的，因此对整棵树的便利只需要一次线性遍历叶子结点即可。而且由于数据顺序排列并且相连，所以便于<strong>区间查找和搜索</strong>。而B树则需要进行每一层的递归遍历。相邻的元素可能在内存中不相邻，所以缓存命中性没有B+树好。</li></ol><h2 id="代码里如何管理事务的？事务没生效的场景？"><a href="#代码里如何管理事务的？事务没生效的场景？" class="headerlink" title="代码里如何管理事务的？事务没生效的场景？"></a>代码里如何管理事务的？事务没生效的场景？</h2><p>声明式事务，@Transactional。当然也可以用代码手动开启一个事务，称作编程式事务。</p><p>失效场景：</p><ol><li>没有被spring代理。如将注解标注在接口方法上，被final、static关键字修饰的类或方法，类方法内部调用</li><li>框架不支持。非public修饰的方法，spring底层直接限制事务管理；多线程，一个事务是建立在一个数据库连接上的；数据库本身不支持事务，比如myisam</li><li>错误使用@Transactional。错误的传播机制；rollbackFor设置错误，默认情况下事务仅回滚运行时异常和Error；内部异常被catch</li></ol><h2 id="分布式事务有用过吗？"><a href="#分布式事务有用过吗？" class="headerlink" title="分布式事务有用过吗？"></a>分布式事务有用过吗？</h2><p><strong>CAP 理论和 BASE 理论</strong>。<strong>CAP</strong> 也就是 <strong>Consistency（一致性）</strong>、<strong>Availability（可用性）</strong>、<strong>Partition Tolerance（分区容错性）</strong> 这三个单词首字母组合。</p><p>CAP 定理（CAP theorem）指出对于一个分布式系统来说，当设计读写操作时，只能能同时满足以下三点中的两个：</p><ul><li><strong>一致性（Consistence）</strong> : 所有节点访问同一份最新的数据副本</li><li><strong>可用性（Availability）</strong>: 非故障的节点在合理的时间内返回合理的响应（不是错误或者超时的响应）。</li><li><strong>分区容错性（Partition tolerance）</strong> : 分布式系统出现网络分区的时候，仍然能够对外提供服务。</li></ul><p>CAP 理论中分区容错性 P 是一定要满足的，在此基础上，只能满足可用性 A 或者一致性 C。</p><p><strong>为啥无同时保证 CA 呢？</strong></p><p>举个例子：若系统出现“分区”，系统中的某个节点在进行写操作。为了保证 C， 必须要禁止其他节点的读写操作，这就和 A 发生冲突了。如果为了保证 A，其他节点的读写操作正常的话，那就和 C 发生冲突了。</p><p><strong>选择的关键在于当前的业务场景，没有定论，比如对于需要确保强一致性的场景如银行一般会选择保证 CP 。</strong></p><p><strong>BASE</strong> 是 <strong>Basically Available（基本可用）</strong> 、<strong>Soft-state（软状态）</strong> 和 <strong>Eventually Consistent（最终一致性）</strong> 三个短语的缩写。BASE 理论是对 CAP 中一致性 C 和可用性 A 权衡的结果，其来源于对大规模互联网系统分布式实践的总结，是基于 CAP 定理逐步演化而来的，它大大降低了我们对系统的要求。</p><p><strong>BASE 理论本质上是对 CAP 的延伸和补充，更具体地说，是对 CAP 中 AP 方案的一个补充。</strong></p><p>分布式一致性的 3 种级别：</p><ol><li><strong>强一致性</strong> ：系统写入了什么，读出来的就是什么。</li><li><strong>弱一致性</strong> ：不一定可以读取到最新写入的值，也不保证多少时间之后读取到的数据是最新的，只是会尽量保证某个时刻达到数据一致的状态。</li><li><strong>最终一致性</strong> ：弱一致性的升级版。，系统会保证在一定时间内达到数据一致的状态，</li></ol><p><strong>业界比较推崇是最终一致性级别，但是某些对数据一致要求十分严格的场景比如银行转账还是要保证强一致性。</strong></p><p>分布式事务的解决方案有很多，比如：2PC、3PC、TCC、本地消息表、MQ 事务（Kafka 和 RocketMQ 都提供了事务相关功能） 、Saga 等等。</p><p>2PC 将事务的提交过程分为 2 个阶段：准备阶段 和 提交阶段 。</p><p>准备阶段的核心是“询问”事务参与者执行本地数据库事务操作是否成功。</p><ol><li>事务协调者/管理者（后文简称 TM） 向所有涉及到的 事务参与者（后文简称 RM） 发送消息询问：“你是否可以执行事务操作呢？”，并等待其答复。</li><li>RM 接收到消息之后，开始执行本地数据库事务预操作比如写 redo log/undo log 日志，此时并不会提交事务 。</li><li>RM 如果执行本地数据库事务操作成功，那就回复“Yes”表示我已就绪，否则就回复“No”表示我未就绪。</li></ol><p>提交阶段的核心是“询问”事务参与者提交本地事务是否成功。</p><p>当所有事务参与者都是“就绪”状态的话：</p><ol><li>TM 向所有参与者发送消息：“你们可以提交事务啦！”（Commit 消息）</li><li>RM 接收到 Commit 消息 后执行 提交本地数据库事务 操作，执行完成之后 释放整个事务期间所占用的资源。</li><li>RM 回复：“事务已经提交” （ACK 消息）。</li><li>TM 收到所有 事务参与者 的 ACK 消息 之后，整个分布式事务过程正式结束。</li></ol><p>当任一事务参与者是“未就绪”状态的话：</p><ol><li>TM 向所有参与者发送消息：“你们可以执行回滚操作了！”（Rollback 消息）。</li><li>RM 接收到 Rollback 消息 后执行 本地数据库事务回滚 执行完成之后 释放整个事务期间所占用的资源。</li><li>RM 回复：“事务已经回滚” （ACK 消息）。</li><li>TM 收到所有 RM 的 ACK 消息 之后，中断事务。</li></ol><p>2PC 的优点：</p><ul><li>实现起来非常简单，各大主流数据库比如 MySQL、Oracle 都有自己实现。</li><li>针对的是数据强一致性。不过，仍然可能存在数据不一致的情况。</li></ul><p>2PC 存在的问题：</p><ul><li>同步阻塞 ：事务参与者会在正式提交事务之前会一直占用相关的资源。比如用户小明转账给小红，那其他事务也要操作用户小明或小红的话，就会阻塞。</li><li>数据不一致 ：由于网络问题或者TM宕机都有可能会造成数据不一致的情况。比如在第2阶段（提交阶段），部分网络出现问题导致部分参与者收不到 Commit/Rollback 消息的话，就会导致数据不一致。</li><li>单点问题 ： TM在其中也是一个很重要的角色，如果TM在准备(Prepare)阶段完成之后挂掉的话，事务参与者就会一直卡在提交(Commit)阶段。</li></ul><p>3PC 是人们在 2PC 的基础上做了一些优化得到的。3PC 把 2PC 中的 准备阶段(Prepare) 做了进一步细化，分为 2 个阶段：</p><ul><li>准备阶段(CanCommit)</li><li>预提交阶段(PreCommit)</li></ul><p>准备阶段 RM 不会执行事务操作，TM 只是向 RM 发送 准备请求 ，顺便询问一些信息比如事务参与者能否执行本地数据库事务操作。RM 回复“Yes”、“No”或者直接超时未回复。</p><p>如果准备阶段所有的 RM 回复 “Yes”的话，TM 就会向所有的 RM 发送 PreCommit 消息（预提交请求） ，RM 收到消息之后会执行本地数据库事务预操作比如写 redo log/undo log 日志。</p><p>如果准备阶段有任一 RM 回复“NO” 或者直接超时未回复的话，TM 就会给所有 RM 发送 Abort 消息（中断请求） ，RM 收到消息后直接中断事务。这样其实对 RM 来说损失并不大，因为本质上 RM 到现在还并没有实际做什么事情。</p><p>如果 RM 成功的执行了事务预操作，就返回 “YES”。否则，返回“No”（最后的反悔机会）。</p><p>预提交阶段 TM 与 RM 都引入了超时机制，如果 参与者 没有收到 TM 的 PreCommit 消息，或者 TM 没有收到参与者返回的预执行结果状态，那么在超过等待时间后，事务就会中断，这就避免了事务的阻塞。</p><p>3PC 还同时在事务管理者和事务参与者中引入了 超时机制 ，如果在一定时间内没有收到事务参与者的消息就默认失败，进而避免事务参与者一直阻塞占用资源。2PC 中只有事务管理者才拥有超时机制，当事务参与者长时间无法与事务协调者通讯的情况下（比如协调者挂掉了），就会导致无法释放资源阻塞的问题。</p><p>不过，3PC 并没有完美解决 2PC 的阻塞问题，引入了一些新问题比如性能糟糕，而且，依然存在数据不一致性问题。因此，3PC 的实际应用并不是很广泛，多数应用会选择通过复制状态机解决 2PC 的阻塞问题。</p><p><strong>TCC（补偿事务）</strong></p><ol><li>Try（尝试）阶段 : 尝试执行。完成业务检查，并预留好必需的业务资源。</li><li>Confirm（确认）阶段 ：确认执行。当所有事务参与者的 Try 阶段执行成功就会执行 Confirm ，Confirm 阶段会处理 Try 阶段预留的业务资源。否则，就会执行 Cancel 。</li><li>Cancel（取消）阶段 ：取消执行，释放 Try 阶段预留的业务资源。</li></ol><p>TCC 模式不需要依赖于底层数据资源的事务支持，但是需要我们手动实现更多的代码，属于 侵入业务代码 的一种分布式解决方案。</p><ul><li>2PC/3PC 依靠数据库或者存储资源层面的事务，TCC 主要通过修改业务代码来实现。</li><li>2PC/3PC 属于业务代码无侵入的，TCC 对业务代码有侵入。</li><li>2PC/3PC 追求的是强一致性，在两阶段提交的整个过程中，一直会持有数据库的锁。TCC 追求的是最终一致性，不会一直持有各个业务资源的锁。</li></ul><p><strong>MQ 事务</strong></p><p>RocketMQ 、 Kafka、Pulsar 、QMQ 都提供了事务相关的功能。事务允许事件流应用将消费，处理，生产消息整个过程定义为一个原子操作。</p><ol><li>MQ 发送方（比如物流服务）在消息队列上开启一个事务，然后发送一个“半消息”给 MQ Server/Broker。事务提交之前，半消息对于 MQ 订阅方/消费者（比如第三方通知服务）不可见</li><li>“半消息”发送成功的话，MQ 发送方就开始执行本地事务。</li><li>MQ 发送方的本地事务执行成功的话，“半消息”变成正常消息，可以正常被消费。MQ 发送方的本地事务执行失败的话，会直接回滚。</li></ol><p>MQ 的事务消息使用的是两阶段提交（2PC）</p><h2 id="好的Java代码应该具备什么？"><a href="#好的Java代码应该具备什么？" class="headerlink" title="好的Java代码应该具备什么？"></a>好的Java代码应该具备什么？</h2><p>开放题，最关键的应该是代码可读。</p><h2 id="面向对象编程的五个基本原则"><a href="#面向对象编程的五个基本原则" class="headerlink" title="面向对象编程的五个基本原则"></a>面向对象编程的五个基本原则</h2><p><strong>单一功能、开闭原则、里氏替换、接口隔离</strong>以及<strong>依赖反转</strong></p><p>啊这，完全没印象了。</p><h2 id="常用的设计模式？"><a href="#常用的设计模式？" class="headerlink" title="常用的设计模式？"></a>常用的设计模式？</h2><p>4年前写的一系列文章。需要再好好看看。</p><h2 id="策略模式跟模板模式的区别"><a href="#策略模式跟模板模式的区别" class="headerlink" title="策略模式跟模板模式的区别"></a>策略模式跟模板模式的区别</h2><p><a href="https://re0.top/2020/08/27/strategy_pattern/">策略模式</a><br><a href="https://re0.top/2020/09/08/template_method_pattern/">模板方法模式</a></p><p><code>模板模式一般只针对一套算法</code>，注重对同一个算法的不同细节进行抽象提供不同的实现。而<code>策略模式注重多套算法多套实现</code>，在算法中间不应该有交集，因此算法和算法只间一般不会有冗余代码！</p><p>策略模式关注多种算法，模板模式关注一种算法。策略模式不同策略之间代码很少冗余。</p><h2 id="redis的场景？分布式锁的场景？为什么采用redis做分布式锁？"><a href="#redis的场景？分布式锁的场景？为什么采用redis做分布式锁？" class="headerlink" title="redis的场景？分布式锁的场景？为什么采用redis做分布式锁？"></a>redis的场景？分布式锁的场景？为什么采用redis做分布式锁？</h2><p>之前复盘过。<strong>redis具有高效性、原子性操作、过期时间设置、Lua脚本支持以及高可用性和容错性等特性，使其成为一种可靠的分布式锁解决方案</strong></p><h2 id="不使用redis做分布式锁可以用哪些替代？"><a href="#不使用redis做分布式锁可以用哪些替代？" class="headerlink" title="不使用redis做分布式锁可以用哪些替代？"></a>不使用redis做分布式锁可以用哪些替代？</h2><p>用数据库的悲观锁。之前看xxl的原理时有涉及到。</p><h2 id="用数据库如何做分布式锁？锁名称的产生逻辑？"><a href="#用数据库如何做分布式锁？锁名称的产生逻辑？" class="headerlink" title="用数据库如何做分布式锁？锁名称的产生逻辑？"></a>用数据库如何做分布式锁？锁名称的产生逻辑？</h2><p>select for update + 唯一索引。</p><p>锁名称应满足唯一性，如订单号。</p><h2 id="kafka和rabbitmq有什么区别"><a href="#kafka和rabbitmq有什么区别" class="headerlink" title="kafka和rabbitmq有什么区别"></a>kafka和rabbitmq有什么区别</h2><p>前两篇复盘过。其实差别不是很大。</p><h2 id="kafka的结构？"><a href="#kafka的结构？" class="headerlink" title="kafka的结构？"></a>kafka的结构？</h2><p><strong>Producer:</strong> 特指消息的生产者<br>**Consumer :**特指消息的消费者<br>**Consumer Group :**消费者组，可以并行消费Topic中partition的消息<br><strong>Broker：</strong>缓存代理，Kafa 集群中的一台或多台服务器统称为 broker。<br><strong>Topic：</strong>特指 Kafka 处理的消息源（feeds of messages）的不同分类。<br><strong>Partition：</strong>Topic 物理上的分组，一个 topic 可以分为多个 partition，每个 partition 是一个有序的队列。partition 中的每条消息都会被分配一个有序的 id（offset）<br><strong>Message：</strong>消息，是通信的基本单位，每个 producer 可以向一个 topic（主题）发布一些消息<br><strong>Producers(是个动词)：</strong>消息和数据生产者，向 Kafka 的一个 topic 发布消息的过程叫做 producers<br><strong>Consumers(是个动词)：</strong>消息和数据消费者，订阅 topics 并处理其发布的消息的过程叫做 consumers</p><p>Kafka通过Zookeeper存储集群的meta等信息。</p><p>一个Topic可以认为是一类信息，逻辑上的队列，每条消息都要指定Topic。为了使得Kafka的吞吐量可以线性提高，物理上将Topic分成一个或多个Partition。每个Partition在存储层面时append log文件，消息push进来后，会被追加到log文件的尾部，每条消息在文件中的位置成为offset(偏移量)，offset是一个long型数字，唯一的标识一条信息。因为每条消息都追加到Partition的尾部，所以属于磁盘的顺序写，效率很高。</p><h2 id="如何保证消息的可靠性"><a href="#如何保证消息的可靠性" class="headerlink" title="如何保证消息的可靠性"></a>如何保证消息的可靠性</h2><p>之前有讲过。</p><h2 id="解决过生产上什么问题？"><a href="#解决过生产上什么问题？" class="headerlink" title="解决过生产上什么问题？"></a>解决过生产上什么问题？</h2><p>答得不好。回答了一个排查cpu内存过高的一个步骤逻辑，重新整理下。</p><h2 id="watchdog的原理"><a href="#watchdog的原理" class="headerlink" title="watchdog的原理"></a>watchdog的原理</h2><p>之前复盘过。</p><h2 id="通过创建不过期的key实现锁会有什么问题"><a href="#通过创建不过期的key实现锁会有什么问题" class="headerlink" title="通过创建不过期的key实现锁会有什么问题"></a>通过创建不过期的key实现锁会有什么问题</h2><p>异常情况锁无法释放。</p><h2 id="锁续期失败后的处理逻辑"><a href="#锁续期失败后的处理逻辑" class="headerlink" title="锁续期失败后的处理逻辑"></a>锁续期失败后的处理逻辑</h2><p>watchdog中锁续期失败后不再续期。</p><h2 id="rabbitmq其他队列了解过吗"><a href="#rabbitmq其他队列了解过吗" class="headerlink" title="rabbitmq其他队列了解过吗"></a>rabbitmq其他队列了解过吗</h2><p>这里回答错了，我们用的Fanout、<em>Direct</em>、Topic指的是交换机的类型。</p><p>Classic，Quorum，Stream才是队列类型。<strong>经典队列</strong>是 RabbitMQ 提供的原始队列类型，一般我们使用的都是这个。</p><p>仲裁队列Quorum在分布式环境下对消息的可靠性保障更高。官方文档中明确表示，未来可能会使用Quorum仲裁队列来替代传统的Classic队列。Quorum队列基于Raft一致性协议实现，是一种新型的分布式消息队列。与Classic队列相比，Quorum队列以牺牲部分高级队列特性为代价，来换取更高的消息可靠性。</p><table><thead><tr><th>特性</th><th><code>Classic</code></th><th><code>Quorum</code></th></tr></thead><tbody><tr><td>非持久化队列（<code>Non-durable queues</code>）</td><td>支持</td><td>不支持</td></tr><tr><td>独占队列（<code>Exclusivity</code>）</td><td>支持</td><td>不支持</td></tr><tr><td>每条消息的持久化（<code>Per message persistence</code>）</td><td>每条消息</td><td>总是</td></tr><tr><td>会员变更（<code>Membership changes</code>）</td><td>自动</td><td>手动</td></tr><tr><td>消息<code>TTL</code>（<code>Message TTL</code>）</td><td>支持</td><td>支持（3.10版本开始）</td></tr><tr><td>队列<code>TTL</code>（<code>Queue TTL</code>）</td><td>支持</td><td>支持</td></tr><tr><td>队列长度限制（<code>Queue length limits</code>）</td><td>支持</td><td>支持</td></tr><tr><td>懒加载（<code>Lazy behaviour</code>）</td><td>支持</td><td>始终</td></tr><tr><td>消息优先级（<code>Message priority</code>）</td><td>支持</td><td>不支持</td></tr><tr><td>消费者优先级（<code>Consumer priority</code>）</td><td>支持</td><td>支持</td></tr><tr><td>死信交换（<code>Dead letter exchanges</code>）</td><td>支持</td><td>支持</td></tr><tr><td>毒消息处理（<code>Poison message handling</code>）</td><td>不支持</td><td>支持</td></tr><tr><td>全局<code>Qos</code>（<code>Global QoS Prefetch</code>）</td><td>支持</td><td>不支持</td></tr></tbody></table><p><code>Stream</code>队列是<code>RabbitMQ</code>自<code>3.9.0</code>版本开始引入的一种新的数据队列类型，也是目前官方最为推荐的队列类型。这种队列类型的消息是持久化到磁盘并且具备分布式备份的，更适合于消费者多，读消息非常频繁的场景</p><ul><li>大规模分发（<code>large fan-outs</code>）</li></ul><p>当想要向多个订阅者发送相同的消息时，以往的队列类型必须为每个消费者绑定一个专用的队列。如果消费者的数量很大，这就会导致性能低下。而<code>Stream</code>队列允许任意数量的消费者使用同一个队列的消息，从而消除绑定多个队列的需求。</p><ul><li>消息回溯（<code>Replay/Time-travelling</code>）</li></ul><p><code>RabbitMQ</code>已有的这些队列类型，在消费者处理完消息后，消息都会从队列中删除，因此，无法重新读取已经消费过的消息。而<code>Stream</code>队列允许用户在日志的任何一个连接点开始重新读取数据。</p><ul><li>高吞吐性能（<code>Throughput Performance</code>）</li></ul><p><code>Stream</code>队列的设计以性能为主要目标，对消息传递吞吐量的提升非常明显。</p><ul><li>大日志（<code>Large logs</code>）</li></ul><p><code>RabbitMQ</code>一直以来有一个让人诟病的地方，就是当队列中积累的消息过多时，性能下降会非常明显。但是<code>Stream</code>队列的设计目标就是以最小的内存开销高效地存储大量的数据。</p><h2 id="rabbitmq的灰度发布策略"><a href="#rabbitmq的灰度发布策略" class="headerlink" title="rabbitmq的灰度发布策略?"></a>rabbitmq的灰度发布策略?</h2><p>这个我猜测面试官是想问服务的发布顺序，因为他后面又问了一下。发布顺序肯定是新消费者新生产者，下线旧生产者旧消费者。</p><p>但是这个确实也引出了我的一个思考，如果说消费的逻辑有改变，那么怎么进行灰度？</p><p>首先应该老消费逻辑和新消费逻辑都要保留，提供过渡。生产者只保留新的也没问题，如果是要基于逻辑的一个灰度，那么可能业务上也需要配合，毕竟有些灰度逻辑网关没法保证始终落在新副本上。</p><h2 id="mq的流量大概有多少"><a href="#mq的流量大概有多少" class="headerlink" title="mq的流量大概有多少"></a>mq的流量大概有多少</h2><p>目前是800-1000左右。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;当我想好好复盘一下的时候总是通知我面试。怪不得说找工作是一件很辛苦的事情，既要找机会，又要面试，又要复盘，又要改简历，中途还得穿插学习，有点
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="随想" scheme="https://re0.top/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="架构" scheme="https://re0.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>【架构之路5】搭建redis集群</title>
    <link href="https://re0.top/2024/07/16/devops5/"/>
    <id>https://re0.top/2024/07/16/devops5/</id>
    <published>2024-07-16T13:30:00.000Z</published>
    <updated>2024-07-18T13:29:13.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>竟然被问到了redis集群了不了解，我除了主从其他还没搭建过，这篇就搭建下redis的主从模式，哨兵模式，Cluster模式。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="主从模式"><a href="#主从模式" class="headerlink" title="主从模式"></a>主从模式</h2><p>这个模式老简单了，读写分离嘛。看我快速写出k8s编排文件。一主一从。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-master-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis-master-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">redis-master</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redis-master</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">redis-master</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-master</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">redis:7.0</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6379</span></span><br><span class="line">          <span class="attr">args:</span> [<span class="string">&quot;--requirepass&quot;</span>, <span class="string">&quot;test&quot;</span>]</span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-master-service-nodeport</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis-master</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">6379</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-master-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis-master</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">6379</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-slave-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis-slave-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">redis-slave</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redis-slave</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">redis-slave</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-slave</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">redis:7.0</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6379</span></span><br><span class="line">          <span class="attr">args:</span> [<span class="string">&quot;--requirepass&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;--replicaof&quot;</span>, <span class="string">&quot;redis-master-service&quot;</span>, <span class="string">&quot;6379&quot;</span>, <span class="string">&quot;--masterauth&quot;</span>, <span class="string">&quot;test&quot;</span>]</span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-slave-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis-slave</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><p>这里能优化的是把配置挪到configMap中。再加节点也是一样的，可以把slave副本拉上去，也可以多加一个service。</p><h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><p>这个模式用k8s部署坑还是比较多的，参考了网上的<a href="https://juejin.cn/post/7339364757386002468">一些文章</a>。但是使用起来也是有一些问题。</p><p>坑点：</p><ol><li>sentinel集群外部连接比较困难，当然这个可以配合ktconnect来做。</li><li>sentinel的配置文件无法直接挂载configmap，因为启动sentinel是会检查配置文件是否可写。。。这个看了下执行日志发现会自动更改配置文件。</li><li>由2可知，不想改镜像的话得动态写入配置文件到卷中。</li></ol><p>参照网上的教程，我也照猫画虎搞了一下。</p><p>先是配置secret，存储redis和sentinel的密码，这里密码都是同一个。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-secret</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">stringData:</span></span><br><span class="line">  <span class="attr">REDIS_PASSWORD:</span> <span class="string">&quot;test&quot;</span></span><br></pre></td></tr></table></figure><p>redis的配置文件和初始化脚本</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-config-map</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">REDIS_NODES:</span> <span class="string">&quot;redis-0.redis,redis-1.redis,redis-2.redis&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis.conf:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    bind 0.0.0.0</span></span><br><span class="line"><span class="string">    protected-mode no</span></span><br><span class="line"><span class="string">    port 6379</span></span><br><span class="line"><span class="string">    tcp-backlog 511</span></span><br><span class="line"><span class="string">    timeout 10</span></span><br><span class="line"><span class="string">    tcp-keepalive 30</span></span><br><span class="line"><span class="string">    daemonize no</span></span><br><span class="line"><span class="string">    supervised no</span></span><br><span class="line"><span class="string">    pidfile &quot;/var/run/redis_6379.pid&quot;</span></span><br><span class="line"><span class="string">    loglevel notice</span></span><br><span class="line"><span class="string">    logfile &quot;&quot;</span></span><br><span class="line"><span class="string">    databases 16</span></span><br><span class="line"><span class="string">    always-show-logo yes</span></span><br><span class="line"><span class="string">    save &quot;&quot;</span></span><br><span class="line"><span class="string">    stop-writes-on-bgsave-error yes</span></span><br><span class="line"><span class="string">    rdbcompression yes</span></span><br><span class="line"><span class="string">    rdbchecksum yes</span></span><br><span class="line"><span class="string">    rdb-del-sync-files no</span></span><br><span class="line"><span class="string">    dir &quot;/data&quot;</span></span><br><span class="line"><span class="string">    replica-serve-stale-data yes</span></span><br><span class="line"><span class="string">    replica-read-only yes</span></span><br><span class="line"><span class="string">    repl-diskless-sync no</span></span><br><span class="line"><span class="string">    repl-diskless-sync-delay 5</span></span><br><span class="line"><span class="string">    repl-diskless-load disabled</span></span><br><span class="line"><span class="string">    appendonly no</span></span><br><span class="line"><span class="string">    repl-disable-tcp-nodelay no</span></span><br><span class="line"><span class="string">    replica-priority 100</span></span><br><span class="line"><span class="string">    acllog-max-len 128</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-init-script-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">sentinel_init.sh:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    #! /bin/bash</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="string">for</span> <span class="string">i</span> <span class="string">in</span> <span class="string">$&#123;REDIS_NODES//,/</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="string">do</span></span><br><span class="line">      <span class="string">echo</span> <span class="string">&quot;find master at $i&quot;</span></span><br><span class="line">      <span class="string">MASTER=$(redis-cli</span> <span class="string">--no-auth-warning</span> <span class="string">--raw</span> <span class="string">-h</span> <span class="string">$i</span> <span class="string">-a</span> <span class="string">$&#123;REDIS_PASSWORD&#125;</span> <span class="string">info</span> <span class="string">replication</span> <span class="string">|</span> <span class="string">awk</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> <span class="string">|</span> <span class="attr">grep master_host:</span> <span class="string">|</span> <span class="string">cut</span> <span class="string">-d</span> <span class="string">&quot;:&quot;</span> <span class="string">-f2)</span></span><br><span class="line">      <span class="string">if</span> [ <span class="string">&quot;$&#123;MASTER&#125;&quot;</span> <span class="string">==</span> <span class="string">&quot;&quot;</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;no master found&quot;</span></span><br><span class="line">          <span class="string">MASTER=</span></span><br><span class="line">      <span class="string">else</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;found $&#123;MASTER&#125;&quot;</span></span><br><span class="line">          <span class="string">break</span></span><br><span class="line">      <span class="string">fi</span></span><br><span class="line">    <span class="string">done</span></span><br><span class="line"></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel resolve-hostnames yes&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel announce-hostnames yes&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel monitor mymaster $&#123;MASTER&#125; 6379 2&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel auth-pass mymaster $&#123;REDIS_PASSWORD&#125;&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel down-after-milliseconds mymaster 5000&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel sentinel-pass $&#123;REDIS_PASSWORD&#125;&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel parallel-syncs mymaster 1&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel failover-timeout mymaster 10000&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;requirepass $&#123;REDIS_PASSWORD&#125;&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel announce-ip $&#123;HOSTNAME&#125;.sentinel&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line"></span><br><span class="line">    <span class="string">cat</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">redis_init.sh:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    #! /bin/bash</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="string">cp</span> <span class="string">/tmp/redis/redis.conf</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;requirepass $&#123;REDIS_PASSWORD&#125;&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;masterauth $&#123;REDIS_PASSWORD&#125;&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;replica-announce-ip $&#123;HOSTNAME&#125;.redis&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;replica-announce-port 6379 &quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;finding master...&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">if</span> [ <span class="string">&quot;$(timeout 5 redis-cli -h sentinel -p 26379 -a $&#123;REDIS_PASSWORD&#125; ping)&quot;</span> <span class="type">!=</span> <span class="string">&quot;PONG&quot;</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line"></span><br><span class="line">      <span class="string">echo</span> <span class="string">&quot;sentinel not found, defaulting to redis-0&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="string">if</span> [ <span class="string">$</span>&#123;<span class="string">HOSTNAME</span>&#125; <span class="string">==</span> <span class="string">&quot;redis-0&quot;</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;this is redis-0, not updating config...&quot;</span></span><br><span class="line">      <span class="string">else</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;updating redis.conf...&quot;</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;repl-ping-replica-period 3&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;slave-read-only no&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;slaveof redis-0.redis 6379&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">      <span class="string">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="string">else</span></span><br><span class="line"></span><br><span class="line">      <span class="string">echo</span> <span class="string">&quot;sentinel found, finding master&quot;</span></span><br><span class="line">      <span class="string">MASTER=&quot;$(redis-cli</span> <span class="string">-h</span> <span class="string">sentinel</span> <span class="string">-p</span> <span class="number">26379</span> <span class="string">-a</span> <span class="string">$&#123;REDIS_PASSWORD&#125;</span> <span class="string">sentinel</span> <span class="string">get-master-addr-by-name</span> <span class="string">mymaster</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">-E</span> <span class="string">&#x27;(^redis-*)|([0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;)&#x27;</span><span class="string">)&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="string">if</span> [ <span class="string">&quot;$&#123;HOSTNAME&#125;.redis&quot;</span> <span class="string">==</span> <span class="string">$</span>&#123;<span class="string">MASTER</span>&#125; ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;this is master, not updating config...&quot;</span></span><br><span class="line">      <span class="string">else</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;master found : $&#123;MASTER&#125;, updating redis.conf&quot;</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;slave-read-only no&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;slaveof $&#123;MASTER&#125; 6379&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;repl-ping-replica-period 3&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">      <span class="string">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="string">fi</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>这里稍微解释一下这个初始化脚本。首先讲讲redis_init.sh吧，首先我们会挂载 redis-config-map到/tmp/redis目录，把配置文件拷贝到/etc/redis/redis.conf作为我们真正的配置文件。然后就开始判断当前是否有sentinel且当前节点是否为主节点了。<code>redis-cli -h sentinel -p 26379 -a $&#123;REDIS_PASSWORD&#125; ping</code>是检查sentinel是否可用。而下面的MASTER则是判断当前节点是否是主节点。如果不是主节点，那么就添加slaveof到主节点，这里有个问题，就是slave-read-only应不应该是no。这里我尝试了一下，非master节点如果可写的话，其实同步不到主节点去。</p><p>然后说说sentinel_init.sh。先遍历所有redis节点，然后找出master节点，然后把配置文件写到/etc/redis/sentinel.conf中供后续使用。</p><p>然后是redis节点的部署。采用statefulSet部署。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">initContainers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">redis:7.0</span></span><br><span class="line">        <span class="attr">env:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">REDIS_PASSWORD</span></span><br><span class="line">            <span class="attr">valueFrom:</span></span><br><span class="line">              <span class="attr">secretKeyRef:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">redis-secret</span></span><br><span class="line">                <span class="attr">key:</span> <span class="string">REDIS_PASSWORD</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;/scripts/redis_init.sh&quot;</span>]</span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span>  <span class="string">redis-config</span></span><br><span class="line">            <span class="attr">mountPath:</span>  <span class="string">/etc/redis/</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-scripts</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/scripts/</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">origin-config</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/tmp/redis</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">redis:7.0</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">args:</span> [<span class="string">&quot;/etc/redis/redis.conf&quot;</span>]</span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6379</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span>  <span class="string">redis-config</span></span><br><span class="line">              <span class="attr">mountPath:</span>  <span class="string">/etc/redis/</span></span><br><span class="line">             <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span>  <span class="string">data</span></span><br><span class="line">          <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-config</span></span><br><span class="line">          <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-scripts</span></span><br><span class="line">          <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">redis-init-script-config</span></span><br><span class="line">            <span class="attr">defaultMode:</span> <span class="number">0777</span></span><br><span class="line">            <span class="attr">items:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">redis_init.sh</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">redis_init.sh</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">origin-config</span></span><br><span class="line">          <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">redis-config-map</span></span><br><span class="line">            <span class="attr">items:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">redis.conf</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">redis.conf</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="attr">podAntiAffinity:</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">labelSelector:</span></span><br><span class="line">                <span class="attr">matchExpressions:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">app</span></span><br><span class="line">                    <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                    <span class="attr">values:</span></span><br><span class="line">                      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">              <span class="attr">topologyKey:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-0-node-port</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">statefulset.kubernetes.io/pod-name:</span> <span class="string">redis-0</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">6379</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-1-node-port</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">statefulset.kubernetes.io/pod-name:</span> <span class="string">redis-1</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">6379</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-2-node-port</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">statefulset.kubernetes.io/pod-name:</span> <span class="string">redis-2</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">6379</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>解读一下。首先在初始化容器中，我们挂载了三个目录<code>redis-config init-scripts origin-config </code>。其中redis-config是一个临时卷，前面我们说过，redis和sentinel启动时要求配置文件可写，所以这里用的临时卷，init-scripts是初始化脚本，origin-config是redis的基础配置文件。init容器的作用就是将origin-config中的配置文件拷贝到redis-config中，并根据init-scripts中的redis_init.sh脚本生成配置文件到redis-config中，提供给真正容器使用。而真正容器中需要挂载的就是redis-config和data目录，data是redis的数据目录，生产环境中应配合pv和pvc实现持久化，这里采用临时卷过渡下。</p><p>随后定义几个service，没啥好说的，这里是把三个节点的redis分别用nodePort暴露出来了，每个节点都能连接。</p><p>然后是sentinel服务。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sentinel</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">sentinel</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">sentinel</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">sentinel</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">initContainers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">redis:7.0</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">REDIS_NODES</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">configMapKeyRef:</span></span><br><span class="line">                  <span class="attr">name:</span> <span class="string">redis-config-map</span></span><br><span class="line">                  <span class="attr">key:</span> <span class="string">REDIS_NODES</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">REDIS_PASSWORD</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">secretKeyRef:</span></span><br><span class="line">                  <span class="attr">name:</span> <span class="string">redis-secret</span></span><br><span class="line">                  <span class="attr">key:</span> <span class="string">REDIS_PASSWORD</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;/scripts/sentinel_init.sh&quot;</span>]</span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span>  <span class="string">redis-config</span></span><br><span class="line">              <span class="attr">mountPath:</span>  <span class="string">/etc/redis/</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-script</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/scripts/</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">image:</span>  <span class="string">redis:7.0</span></span><br><span class="line">          <span class="attr">name:</span>  <span class="string">sentinel</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;redis-sentinel&quot;</span>]</span><br><span class="line">          <span class="attr">args:</span> [<span class="string">&quot;/etc/redis/sentinel.conf&quot;</span>]</span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span>  <span class="string">sentinel</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">26379</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span>  <span class="string">redis-config</span></span><br><span class="line">              <span class="attr">mountPath:</span>  <span class="string">/etc/redis/</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span>  <span class="string">init-script</span></span><br><span class="line">          <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">redis-init-script-config</span></span><br><span class="line">            <span class="attr">defaultMode:</span> <span class="number">0777</span></span><br><span class="line">            <span class="attr">items:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">sentinel_init.sh</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">sentinel_init.sh</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-config</span></span><br><span class="line">          <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">          <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="attr">podAntiAffinity:</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">labelSelector:</span></span><br><span class="line">              <span class="attr">matchExpressions:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">app</span></span><br><span class="line">                <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                <span class="attr">values:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">sentinel</span></span><br><span class="line">            <span class="attr">topologyKey:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sentinel</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">sentinel</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">26379</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sentinel-node-port</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">sentinel</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">26379</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">26379</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>逻辑和redis差不多，这里便不再赘述。唯一有问题的地方是，连接到sentinel后，可以知道主节点的host，这里应该是redis-0.redis，但是由于我们不再集群内，所以dns域名解析失败，外部连接的话可能得配置ktconnect。这里我测试了下，当把主节点的pod删除后，sentinel会自动选举出新节点，当然这里也有一个问题，<strong>在主节点下线后的极短时间内，sentinel依旧会认为主节点是当前下线的节点，导致下线节点重新被拉起时，是以主节点配置启动的，但是当主容器还未启动时，sentinel更改了master，那么此时重新拉起的容器配置文件会被sentinel增加以下内容，导致节点变为只读。这与原先作者的本意不同。</strong>这里可以改进把每个节点配置文件增加<code>slave-read-only no</code>，即无论是否是主节点都增加这个。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Generated by CONFIG REWRITE</span><br><span class="line">replicaof redis-1.redis 6379</span><br><span class="line">latency-tracking-info-percentiles 50 99 99.9</span><br></pre></td></tr></table></figure><p>其次是既有主节点又有其他节点，那么通过sentinel获取时从节点时，也可进行数据添加，极大概率增加了数据的不可靠性。</p><p>因此最终我改造了一下，把redis配置文件稍微改了下，从节点就应该不允许写。其实就是将<code>echo &quot;slave-read-only no&quot; &gt;&gt; /etc/redis/redis.conf</code>删除。此时只有主节点才能写，这才符合主从规范。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-init-script-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">sentinel_init.sh:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    #! /bin/bash</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="string">for</span> <span class="string">i</span> <span class="string">in</span> <span class="string">$&#123;REDIS_NODES//,/</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="string">do</span></span><br><span class="line">      <span class="string">echo</span> <span class="string">&quot;find master at $i&quot;</span></span><br><span class="line">      <span class="string">MASTER=$(redis-cli</span> <span class="string">--no-auth-warning</span> <span class="string">--raw</span> <span class="string">-h</span> <span class="string">$i</span> <span class="string">-a</span> <span class="string">$&#123;REDIS_PASSWORD&#125;</span> <span class="string">info</span> <span class="string">replication</span> <span class="string">|</span> <span class="string">awk</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> <span class="string">|</span> <span class="attr">grep master_host:</span> <span class="string">|</span> <span class="string">cut</span> <span class="string">-d</span> <span class="string">&quot;:&quot;</span> <span class="string">-f2)</span></span><br><span class="line">      <span class="string">if</span> [ <span class="string">&quot;$&#123;MASTER&#125;&quot;</span> <span class="string">==</span> <span class="string">&quot;&quot;</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;no master found&quot;</span></span><br><span class="line">          <span class="string">MASTER=</span></span><br><span class="line">      <span class="string">else</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;found $&#123;MASTER&#125;&quot;</span></span><br><span class="line">          <span class="string">break</span></span><br><span class="line">      <span class="string">fi</span></span><br><span class="line">    <span class="string">done</span></span><br><span class="line"></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel resolve-hostnames yes&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel announce-hostnames yes&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel monitor mymaster $&#123;MASTER&#125; 6379 2&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel auth-pass mymaster $&#123;REDIS_PASSWORD&#125;&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel down-after-milliseconds mymaster 5000&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel sentinel-pass $&#123;REDIS_PASSWORD&#125;&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel parallel-syncs mymaster 1&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel failover-timeout mymaster 10000&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;requirepass $&#123;REDIS_PASSWORD&#125;&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel announce-ip $&#123;HOSTNAME&#125;.sentinel&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line"></span><br><span class="line">    <span class="string">cat</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">redis_init.sh:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    #! /bin/bash</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="string">cp</span> <span class="string">/tmp/redis/redis.conf</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;requirepass $&#123;REDIS_PASSWORD&#125;&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;masterauth $&#123;REDIS_PASSWORD&#125;&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;replica-announce-ip $&#123;HOSTNAME&#125;.redis&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;replica-announce-port 6379 &quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;finding master...&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">if</span> [ <span class="string">&quot;$(timeout 5 redis-cli -h sentinel -p 26379 -a $&#123;REDIS_PASSWORD&#125; ping)&quot;</span> <span class="type">!=</span> <span class="string">&quot;PONG&quot;</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line"></span><br><span class="line">      <span class="string">echo</span> <span class="string">&quot;sentinel not found, defaulting to redis-0&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="string">if</span> [ <span class="string">$</span>&#123;<span class="string">HOSTNAME</span>&#125; <span class="string">==</span> <span class="string">&quot;redis-0&quot;</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;this is redis-0, not updating config...&quot;</span></span><br><span class="line">      <span class="string">else</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;updating redis.conf...&quot;</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;repl-ping-replica-period 3&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;slaveof redis-0.redis 6379&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">      <span class="string">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="string">else</span></span><br><span class="line"></span><br><span class="line">      <span class="string">echo</span> <span class="string">&quot;sentinel found, finding master&quot;</span></span><br><span class="line">      <span class="string">MASTER=&quot;$(redis-cli</span> <span class="string">-h</span> <span class="string">sentinel</span> <span class="string">-p</span> <span class="number">26379</span> <span class="string">-a</span> <span class="string">$&#123;REDIS_PASSWORD&#125;</span> <span class="string">sentinel</span> <span class="string">get-master-addr-by-name</span> <span class="string">mymaster</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">-E</span> <span class="string">&#x27;(^redis-*)|([0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;)&#x27;</span><span class="string">)&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="string">if</span> [ <span class="string">&quot;$&#123;HOSTNAME&#125;.redis&quot;</span> <span class="string">==</span> <span class="string">$</span>&#123;<span class="string">MASTER</span>&#125; ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;this is master, not updating config...&quot;</span></span><br><span class="line">      <span class="string">else</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;master found : $&#123;MASTER&#125;, updating redis.conf&quot;</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;slaveof $&#123;MASTER&#125; 6379&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;repl-ping-replica-period 3&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">      <span class="string">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="string">fi</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>因此最后使用方法就是先通过sentinel获取主节点或者从节点的地址，然后主节点写，从节点读。</p><p>总得来说，哨兵模式搭建在k8s中会比较复杂，因为涉及到有状态服务的定义，所以得配合init容器和bash脚本去控制容器启动逻辑。</p><h2 id="Cluster模式"><a href="#Cluster模式" class="headerlink" title="Cluster模式"></a>Cluster模式</h2><p>这个模式全自动好像比较困难，需要用到redis-trib工具。由于cluster集群必须在所有节点启动后才能进行初始化，而如果将初始化逻辑类似哨兵模式一样写入init.sh中，则是一件非常复杂而且低效的行为。</p><p>先配置config</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-config-map</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis.conf:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    bind 0.0.0.0</span></span><br><span class="line"><span class="string">    protected-mode no</span></span><br><span class="line"><span class="string">    port 6379</span></span><br><span class="line"><span class="string">    cluster-enabled yes</span></span><br><span class="line"><span class="string">    cluster-config-file /data/redis.conf</span></span><br><span class="line"><span class="string">    cluster-node-timeout 5000</span></span><br><span class="line"><span class="string">    dir &quot;/data&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>然后是redis节点创建出来，并创建无头服务。（<strong>无头service不分配clusterIP, 一般用于pod实例之间相互通信，不再像普通service那样负载均衡。</strong>）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">6</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">redis:7.0</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;/conf/redis.conf&quot;</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">6379</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">&quot;TCP&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cluster</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">16379</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">&quot;TCP&quot;</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-conf</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/conf/</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-data</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-conf</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">redis-config-map</span></span><br><span class="line">          <span class="attr">items:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">redis.conf</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">redis.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-data</span></span><br><span class="line">        <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p><strong>注意这里我们采用的是临时卷，生产环境data务必换成持久化卷。</strong> </p><p><strong>并且没有换成持久化卷是有问题的，后面会讲到，可以参照后面新的yaml。</strong></p><p>注意这里没有配置节点亲和性，原因是因为我们创建的是3主3从，没有过多的节点让我们去均匀部署。</p><p>无头服务的statefulSet会分配dns，为<code>&lt;pod name&gt;.&lt;service name&gt;.&lt;namespace&gt;.svc.cluster.local</code> 尝试dns这些服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kubectl run --rm -i --tty busybox --image=busybox:1.28 /bin/sh</span><br><span class="line">nslookup redis-0.redis</span><br><span class="line"></span><br><span class="line">Server:    10.43.0.10</span><br><span class="line">Address 1: 10.43.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Name:      redis-0.redis</span><br><span class="line">Address 1: 10.42.1.60 redis-0.redis.default.svc.cluster.local</span><br></pre></td></tr></table></figure><p>使用一个额外的容器来初始化我们的redis集群。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">kubectl run -it ubuntu --image=ubuntu:20.04 --restart=Never /bin/bash</span><br><span class="line">kubectl <span class="built_in">exec</span> -it ubuntu /bin/bash</span><br><span class="line"></span><br><span class="line">cat &gt; /etc/apt/sources.list &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install -y vim wget python3 python3-pip redis-tools dnsutils</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pip install redis-trib</span><br><span class="line"></span><br><span class="line">创建只有Master节点的集群</span><br><span class="line">redis-trib.py create \</span><br><span class="line">  `dig +short redis-0.redis.default.svc.cluster.local`:6379 \</span><br><span class="line">  `dig +short redis-1.redis.default.svc.cluster.local`:6379 \</span><br><span class="line">  `dig +short redis-2.redis.default.svc.cluster.local`:6379</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">为每个Master添加Slave</span><br><span class="line">redis-trib.py replicate \</span><br><span class="line">  --master-addr `dig +short redis-0.redis.default.svc.cluster.local`:6379 \</span><br><span class="line">  --slave-addr `dig +short redis-3.redis.default.svc.cluster.local`:6379</span><br><span class="line">  </span><br><span class="line">redis-trib.py replicate \</span><br><span class="line">  --master-addr `dig +short redis-1.redis.default.svc.cluster.local`:6379 \</span><br><span class="line">  --slave-addr `dig +short redis-4.redis.default.svc.cluster.local`:6379</span><br><span class="line">  </span><br><span class="line">redis-trib.py replicate \</span><br><span class="line">  --master-addr `dig +short redis-2.redis.default.svc.cluster.local`:6379 \</span><br><span class="line">  --slave-addr `dig +short redis-5.redis.default.svc.cluster.local`:6379</span><br></pre></td></tr></table></figure><p>到这里我们的集群就初始化成功了。</p><p>我们可以进入其中一个redis节点看看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">exec</span> -it redis-0 /bin/bash</span><br><span class="line"></span><br><span class="line">root@redis-0:/data<span class="comment"># redis-cli -c</span></span><br><span class="line">127.0.0.1:6379&gt; cluster nodes</span><br><span class="line">c0309e16b8d0727a4ad2cbe939ec59caac46e37d 10.42.0.93:6379@16379 slave 06809780e7800808a217eafb35f8cee395f51820 0 1721305716101 2 connected</span><br><span class="line">8a63ab6b6e6b1db63855afdf604646e7f0145348 10.42.1.60:6379@16379 myself,master - 0 1721305715000 1 connected 10923-16383</span><br><span class="line">956ebaec5cd6ac4b0970f823808bee6c076dcbe8 10.42.2.60:6379@16379 master - 0 1721305714591 4 connected 0-5461</span><br><span class="line">06809780e7800808a217eafb35f8cee395f51820 10.42.0.92:6379@16379 master - 0 1721305714592 2 connected 5462-10922</span><br><span class="line">f8effa58385f8941a193dfadbf2e90d018ca1c19 10.42.1.59:6379@16379 slave 956ebaec5cd6ac4b0970f823808bee6c076dcbe8 0 1721305715094 4 connected</span><br><span class="line">2937328a1fb97f0c21d203d24039e3f4f4e49da3 10.42.2.61:6379@16379 slave 8a63ab6b6e6b1db63855afdf604646e7f0145348 0 1721305716504 1 connected</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; cluster info</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:6</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:4</span><br><span class="line">cluster_my_epoch:1</span><br><span class="line">cluster_stats_messages_ping_sent:555</span><br><span class="line">cluster_stats_messages_pong_sent:549</span><br><span class="line">cluster_stats_messages_meet_sent:2</span><br><span class="line">cluster_stats_messages_sent:1106</span><br><span class="line">cluster_stats_messages_ping_received:549</span><br><span class="line">cluster_stats_messages_pong_received:557</span><br><span class="line">cluster_stats_messages_received:1106</span><br><span class="line">total_cluster_links_buffer_limit_exceeded:0</span><br></pre></td></tr></table></figure><p>创建一个nodePort服务供外部访问看看</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-access-service</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-port</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span></span><br></pre></td></tr></table></figure><p>注意这里像<code>another redis desktop manager</code>这样的软件不能勾选cluster，因为它识别的所有节点都是内部ip。直接正常连接就行。</p><p>这里我们直接删除redis-0，观察redis-3日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1:S 18 Jul 2024 12:38:37.534 * Marking node 8a63ab6b6e6b1db63855afdf604646e7f0145348 as failing (quorum reached).</span><br><span class="line">1:S 18 Jul 2024 12:38:37.534 # Cluster state changed: fail</span><br><span class="line">1:S 18 Jul 2024 12:38:37.563 # Start of election delayed for 919 milliseconds (rank #0, offset 1171).</span><br><span class="line">1:S 18 Jul 2024 12:38:38.569 # Starting a failover election for epoch 5.</span><br><span class="line">1:S 18 Jul 2024 12:38:38.576 # Failover election won: I&#x27;m the new master.</span><br><span class="line">1:S 18 Jul 2024 12:38:38.576 # configEpoch set to 5 after successful failover</span><br><span class="line">1:M 18 Jul 2024 12:38:38.576 * Discarding previously cached master state.</span><br><span class="line">1:M 18 Jul 2024 12:38:38.576 # Setting secondary replication ID to 793c7bf0d23ad2480d10ebddeef4de92500b7f41, valid up to offset: 1172. New replication ID is d4170f01b37dbd48ab2898ff8cd2404a7025a2b7</span><br><span class="line">1:M 18 Jul 2024 12:38:38.577 # Cluster state changed: ok</span><br></pre></td></tr></table></figure><p>可以看到此时redis-3晋升为master，进入控制台后也可以使用role命令查看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@redis-3:/data# redis-cli</span><br><span class="line">127.0.0.1:6379&gt; role</span><br><span class="line">1) &quot;master&quot;</span><br><span class="line">2) (integer) 1171</span><br><span class="line">3) (empty array)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p>但此时新的问题来了，redis-0重新部署后加不到集群中了。我们在redis-3中执行<code>cluster nodes</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@redis-3:/data# redis-cli</span><br><span class="line">127.0.0.1:6379&gt; cluster nodes</span><br><span class="line">956ebaec5cd6ac4b0970f823808bee6c076dcbe8 10.42.2.60:6379@16379 master - 0 1721306662601 4 connected 0-5461</span><br><span class="line">c0309e16b8d0727a4ad2cbe939ec59caac46e37d 10.42.0.93:6379@16379 slave 06809780e7800808a217eafb35f8cee395f51820 0 1721306663005 2 connected</span><br><span class="line">f8effa58385f8941a193dfadbf2e90d018ca1c19 10.42.1.59:6379@16379 slave 956ebaec5cd6ac4b0970f823808bee6c076dcbe8 0 1721306662000 4 connected</span><br><span class="line">2937328a1fb97f0c21d203d24039e3f4f4e49da3 10.42.2.61:6379@16379 myself,master - 0 1721306661000 5 connected 10923-16383</span><br><span class="line">8a63ab6b6e6b1db63855afdf604646e7f0145348 10.42.1.60:6379@16379 master,fail - 1721306312230 1721306309711 1 connected</span><br><span class="line">06809780e7800808a217eafb35f8cee395f51820 10.42.0.92:6379@16379 master - 0 1721306662000 2 connected 5462-10922</span><br></pre></td></tr></table></figure><p>发现有一个节点fail了，而在redis-0中执行则发现只有自己一个节点。</p><p>再尝试下停掉其他master节点，也是如此。难道网上教程又不靠谱了？经过我的思考，大概知道是为什么了，原因出现在存储上，原文中每个节点的/data/redis.conf都是共用的，作者使用了一个nfs的卷再结合ReadWriteMany将存储共用。而我这里采用的是临时卷，所以节点重启后读取不到原先的/data/redis.conf就会自己创建导致加入不了集群。</p><p>那咋办呢，结合前面的ceph-rbd创建PVC吧。走起。这里其实不一定要共用存储，每个节点创建一个单独的存储也是ok的。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">6</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">redis:7.0</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;/conf/redis.conf&quot;</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">6379</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">&quot;TCP&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cluster</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">16379</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">&quot;TCP&quot;</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-conf</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/conf/</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-data</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-conf</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">redis-config-map</span></span><br><span class="line">          <span class="attr">items:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">redis.conf</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">redis.conf</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redis-data</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">accessModes:</span> [ <span class="string">&quot;ReadWriteOnce&quot;</span> ]</span><br><span class="line">      <span class="attr">storageClassName:</span> <span class="string">&quot;csi-rbd-sc&quot;</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>再重新重建集群。这里不再赘述。</p><p>删除redis-0，查看集群是否能自恢复。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@redis-0:/data<span class="comment"># redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; cluster nodes</span><br><span class="line">4cf82b83963d3a5178d4d73db2080934e9d5f0a1 10.42.1.65:6379@16379 slave 33207c0188005e553000a456fb2d41f9d341eb05 0 1721308687541 3 connected</span><br><span class="line">1c978c4a36bb5f954411b2a965e2258915b4dfdc 10.42.0.95:6379@16379 slave 31e0da6c88f0d4954123b6d7df2de37967938696 0 1721308686531 2 connected</span><br><span class="line">3181437aa3fd71108a6c1616de15fa8e42d6add7 10.42.1.64:6379@16379 myself,slave cf9eb6aa26822f32decf9f3047c7cb606f677a1a 0 1721308685000 4 connected</span><br><span class="line">31e0da6c88f0d4954123b6d7df2de37967938696 10.42.0.94:6379@16379 master - 0 1721308686000 2 connected 0-5461</span><br><span class="line">33207c0188005e553000a456fb2d41f9d341eb05 10.42.2.66:6379@16379 master - 0 1721308686000 3 connected 10923-16383</span><br><span class="line">cf9eb6aa26822f32decf9f3047c7cb606f677a1a 10.42.2.67:6379@16379 master - 0 1721308686000 4 connected 5462-10922</span><br><span class="line">127.0.0.1:6379&gt; role</span><br><span class="line">1) <span class="string">&quot;slave&quot;</span></span><br><span class="line">2) <span class="string">&quot;10.42.2.67&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 6379</span><br><span class="line">4) <span class="string">&quot;connected&quot;</span></span><br><span class="line">5) (<span class="built_in">integer</span>) 224</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>欸，发现redis-0成功变为了slave。</p><p>至此，cluster集群的搭建就完成了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这篇文章整体下来，写了好几天，原本以为哨兵模式也可以简单搭建，没想到也是有点复杂的。中途还有面试和复盘要做，断断续续的。不过好在也算是了解了一些redis高可用集群的搭建。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;竟然被问到了redis集群了不了解，我除了主从其他还没搭建过，这篇就搭建下redis的主从模式，哨兵模式，Cluster模式。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="架构" scheme="https://re0.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="运维" scheme="https://re0.top/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="从0.5开始的运维架构之路" scheme="https://re0.top/tags/%E4%BB%8E0-5%E5%BC%80%E5%A7%8B%E7%9A%84%E8%BF%90%E7%BB%B4%E6%9E%B6%E6%9E%84%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>2024面试复盘4</title>
    <link href="https://re0.top/2024/07/16/2024-07-16-replay/"/>
    <id>https://re0.top/2024/07/16/2024-07-16-replay/</id>
    <published>2024-07-16T07:00:00.000Z</published>
    <updated>2024-07-18T13:24:11.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>无言。</p><p>继续复盘。</p><h1 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h1><h2 id="消息队列选型？kafka和rabbitmq对比？"><a href="#消息队列选型？kafka和rabbitmq对比？" class="headerlink" title="消息队列选型？kafka和rabbitmq对比？"></a>消息队列选型？kafka和rabbitmq对比？</h2><table><thead><tr><th></th><th>RabbitMq</th><th>RocketMq</th><th>Kafka</th></tr></thead><tbody><tr><td>开发语言</td><td>erlang</td><td>Java</td><td>Java</td></tr><tr><td>单机吞吐</td><td>万级</td><td>万级</td><td>十万级</td></tr><tr><td>延时</td><td>微秒</td><td>毫秒</td><td>毫秒</td></tr><tr><td>消息重复</td><td>可控制</td><td></td><td>可能会有重复</td></tr><tr><td>持久化</td><td>内存，文件</td><td>磁盘</td><td></td></tr><tr><td>事务</td><td>不支持</td><td>支持</td><td></td></tr><tr><td>优点</td><td>性能较好，支持amqp</td><td>阿里开源，性能非常好，在阿里内部大规模应用。支持多种模式，集群消费，广播消费等。</td><td>高吞吐量，低延时，稳定性高，消息有序</td></tr><tr><td>缺点</td><td>erlang语言开发，不利于扩展</td><td>阿里开源的东西，说不定什么时候社区会停止维护。</td><td>社区更新较慢，不支持延迟，重试等。</td></tr></tbody></table><p>如果需要日志采集追求高吞吐量，那么采用kafka；Rabbitmq使用简单，但是不利于二次开发。Rocketmq背靠阿里，成也如此败也如此，阿里的开源贡献很大，但是很多项目稳定后社区经常陷入停滞，不过阿里内部既然在使用，那么说明它的性能和可靠性有保证。</p><h2 id="xxljob原理"><a href="#xxljob原理" class="headerlink" title="xxljob原理"></a>xxljob原理</h2><p>xxl-job是一个分布式的定时任务调度平台。主要分为admin和executor</p><p><strong>xxl-job其实也是在quartz的基础上实现的，但是修改了任务调度的模式，并且任务调度采用注册和RPC调用方式来实现</strong>。2.1.0版本前核心调度模块都是基于<code>quartz</code>框架，2.1.0版本开始自研调度组件，移除<code>quartz</code>依赖 ，使用时间轮调度。</p><p><code>xxl_job_info</code>表是<strong>记录定时任务</strong>的db表，里面有个<code>trigger_next_time（Long）</code>字段，表示下一次触发的时间点任务时间被修改 / 每一次任务触发后，可以根据<code>cronb</code>表达式计算下一次触发时间戳：<code>Date nextValidTime = new CronExpression(jobInfo.getJobCron()).getNextValidTimeAfter(new Date()))</code></p><p>定时执行任务逻辑: </p><ol><li>定时任务<code>scheduleThread</code>：不断从<code>db</code>把<code>5秒</code>内要执行的任务读出，<strong>立即触发 / 放到时间轮等待触发</strong>，并更新<code>trigger_next_time</code>.</li><li>获取当前时间<code>now</code></li><li>轮询<code>db</code>，找出<code>trigger_next_time</code>在距<code>now 5秒</code>内的任务，对到达now时间后的任务（超出now 5秒外）直接跳过不执行（调度过期，如果有调度过期策略则触发执行）或者重置<code>trigger_next_time</code>；对到达<code>now</code>时间后的任务（超出<code>now</code> 5秒内），开线程执行触发逻辑，若任务下一次触发时间是在5秒内，则放到时间轮内(Map&lt;Integer, List&gt;秒数(1-60) =&gt; 任务id列表），重置<code>trigger_next_time</code>；对未到达<code>now</code>时间的任务，直接放到时间轮内并重置<code>trigger_next_time</code>。</li><li>定时任务<code>ringThread</code>：时间轮实现到点触发任务。时间轮数据结构：<code>Map&lt;Integer, List&lt;Integer&gt;&gt; key</code>是秒数<code>(1-60)</code> ，<code>value</code>是任务<code>id</code>列表。</li><li>获取当前时间秒数</li><li>从时间轮内移出当前秒数前2个秒数（避免处理耗时太长，跨过刻度，向前校验一个刻度）的任务列表id，一一触发任务；</li></ol><p>如何避免集群中的多个服务器同时调度任务？</p><p>当xxl-job应用本身集群部署（实现高可用HA）时，<strong>通过mysql悲观锁实现分布式锁（for update语句）</strong></p><ul><li><code>setAutoCommit(false)</code>关闭隐式自动提交事务，启动事务</li><li><code>select lock for update</code>（显式排他锁，其他事务无法进入&amp;无法实现<code>for update</code>）</li><li>读<code>db</code>任务信息 -&gt; 拉任务到内存时间轮 -&gt; 更新<code>db</code>任务信息</li><li><code>commit</code>提交事务，同时会释放<code>for update</code>的排他锁（悲观锁）</li></ul><h2 id="es优势"><a href="#es优势" class="headerlink" title="es优势"></a>es优势</h2><p>前一篇应该说过了，用作全文搜索，相较于mysql会快很多。es是document格式的存储，mysql是行格式的，所以es并不需要显式定义字段。mysql由于其索引实现（innodb为例）导致在数据量大到一定级别后会出现性能衰减；而es只要内存足够就没太大问题。插入速度上如果正确的配置mysql其性能并不低，当然相对于正常状态es而言还是差了一个到多个量级（es&gt;mongo&gt;mysql）。查询速度这个主要看索引和数量，在需要复杂关联查询的时候建议优先考虑mysql。资源开销上，当数据量上去了后如果为了维持性能的话，es的占用内存是十分夸张的。</p><h2 id="去掉redis广播怎么通知各服务"><a href="#去掉redis广播怎么通知各服务" class="headerlink" title="去掉redis广播怎么通知各服务"></a>去掉redis广播怎么通知各服务</h2><p>从广播推模式改为存在数据库中，各个服务扫表实现。</p><h2 id="编程题：两个线程交替打印AB。三个线程交替打印ABC。"><a href="#编程题：两个线程交替打印AB。三个线程交替打印ABC。" class="headerlink" title="编程题：两个线程交替打印AB。三个线程交替打印ABC。"></a>编程题：两个线程交替打印AB。三个线程交替打印ABC。</h2><p>被CSDN坑了一把。</p><h3 id="相互唤醒"><a href="#相互唤醒" class="headerlink" title="相互唤醒"></a>相互唤醒</h3><p>这种写法有的问题是最后会卡住，其实改造下wait的条件就行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Print print = <span class="keyword">new</span> Print(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(print::printA).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(print::printB).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Print</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> countA;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> countB;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Print</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.count = count;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (!flag &amp;&amp; countA++ &lt; count) &#123;</span><br><span class="line">                <span class="keyword">this</span>.notify();</span><br><span class="line">                System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.wait();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (flag &amp;&amp; countB++ &lt; count) &#123;</span><br><span class="line">                <span class="keyword">this</span>.notify();</span><br><span class="line">                System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.wait();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lock版，本质上也是synchronized和wait-notify"><a href="#lock版，本质上也是synchronized和wait-notify" class="headerlink" title="lock版，本质上也是synchronized和wait/notify"></a>lock版，本质上也是synchronized和wait/notify</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            lock.notify();</span><br><span class="line">            System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.wait();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            lock.notify();</span><br><span class="line">            System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.wait();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><h3 id="lock版-三线程"><a href="#lock版-三线程" class="headerlink" title="lock版 三线程"></a>lock版 三线程</h3><p>在网上看到这种写法，不建议，易读性十分不好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintABCWithLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            Object lockA = <span class="keyword">new</span> Object();</span><br><span class="line">            Object lockB = <span class="keyword">new</span> Object();</span><br><span class="line">            Object lockC = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">            Thread a = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (lockC) &#123;</span><br><span class="line">                        <span class="keyword">synchronized</span> (lockA) &#123;</span><br><span class="line"></span><br><span class="line">                            System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">                            lockA.notifyAll();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            lockC.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            Thread b = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (lockA) &#123;</span><br><span class="line">                        <span class="keyword">synchronized</span> (lockB) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"></span><br><span class="line">                            lockB.notifyAll();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            lockA.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            Thread c = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (lockB) &#123;</span><br><span class="line">                        <span class="keyword">synchronized</span> (lockC) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">                            lockC.notifyAll();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            lockB.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            a.start();</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            b.start();</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            c.start();</span><br><span class="line">            a.join();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="真正的锁版。"><a href="#真正的锁版。" class="headerlink" title="真正的锁版。"></a>真正的锁版。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintWithLock</span> </span>&#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> state = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Condition A = lock.newCondition();</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Condition B = lock.newCondition();</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Condition C = lock.newCondition();</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">           <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                   <span class="comment">// 获取锁</span></span><br><span class="line">                   lock.lock();</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       <span class="comment">// 判断是否轮到自己执行</span></span><br><span class="line">                       <span class="keyword">while</span> (state % <span class="number">3</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                           A.await();</span><br><span class="line">                       &#125;</span><br><span class="line">                       System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">                       state++;</span><br><span class="line">                       B.signal();</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                       <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                       lock.unlock();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;).start();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                   <span class="comment">// 获取锁</span></span><br><span class="line">                   lock.lock();</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       <span class="comment">// 判断是否轮到自己执行</span></span><br><span class="line">                       <span class="keyword">while</span> (state % <span class="number">3</span> != <span class="number">1</span>) &#123;</span><br><span class="line">                           B.await();</span><br><span class="line">                       &#125;</span><br><span class="line">                       System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">                       state++;</span><br><span class="line">                       C.signal();</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                       <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                       lock.unlock();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;).start();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                   <span class="comment">// 获取锁</span></span><br><span class="line">                   lock.lock();</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       <span class="comment">// 判断是否轮到自己执行</span></span><br><span class="line">                       <span class="keyword">while</span> (state % <span class="number">3</span> != <span class="number">2</span>) &#123;</span><br><span class="line">                           C.await();</span><br><span class="line">                       &#125;</span><br><span class="line">                       System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">                       state++;</span><br><span class="line">                       A.signal();</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                       <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                       lock.unlock();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;).start();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="去掉不需要的condition"><a href="#去掉不需要的condition" class="headerlink" title="去掉不需要的condition"></a>去掉不需要的condition</h3><p>和atomicInteger差不多。内部都在循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintWithLock</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> state = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>;) &#123;</span><br><span class="line">                    <span class="comment">// 获取锁</span></span><br><span class="line">                    lock.lock();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 判断是否轮到自己执行</span></span><br><span class="line">                        <span class="keyword">while</span> (state % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">                            state++;</span><br><span class="line">                            i++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        lock.unlock();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>;) &#123;</span><br><span class="line">                    <span class="comment">// 获取锁</span></span><br><span class="line">                    lock.lock();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 判断是否轮到自己执行</span></span><br><span class="line">                        <span class="keyword">while</span> (state % <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">                            state++;</span><br><span class="line">                            i++;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        lock.unlock();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>;) &#123;</span><br><span class="line">                    <span class="comment">// 获取锁</span></span><br><span class="line">                    lock.lock();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 判断是否轮到自己执行</span></span><br><span class="line">                        <span class="keyword">while</span> (state % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">                            state++;</span><br><span class="line">                            i++;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        lock.unlock();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="AtomicInteger版本"><a href="#AtomicInteger版本" class="headerlink" title="AtomicInteger版本"></a>AtomicInteger版本</h3><p>比较费cpu，因为在循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintWithCas</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicInteger state = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (state.get() % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">                        state.compareAndSet(state.get(), state.get() + <span class="number">1</span>);</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (state.get() % <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">                        state.compareAndSet(state.get(), state.get() + <span class="number">1</span>);</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (state.get() % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">                        state.compareAndSet(state.get(), state.get() + <span class="number">1</span>);</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintWithSemaphore</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Semaphore A = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Semaphore B = <span class="keyword">new</span> Semaphore(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Semaphore C = <span class="keyword">new</span> Semaphore(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                        A.acquire();</span><br><span class="line">                        System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">                        B.release();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                        B.acquire();</span><br><span class="line">                        System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">                        C.release();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                        C.acquire();</span><br><span class="line">                        System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">                        A.release();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;无言。&lt;/p&gt;
&lt;p&gt;继续复盘。&lt;/p&gt;
&lt;h1 id=&quot;复盘&quot;&gt;&lt;a href=&quot;#复盘&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="随想" scheme="https://re0.top/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="架构" scheme="https://re0.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>2024面试复盘3</title>
    <link href="https://re0.top/2024/07/15/2024-07-15-replay/"/>
    <id>https://re0.top/2024/07/15/2024-07-15-replay/</id>
    <published>2024-07-15T12:00:00.000Z</published>
    <updated>2024-07-16T06:47:41.243Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>拼多多和b站两场面试，大概率凉凉。  </p><p>“你这业务都是偏向工具类啊”。这句话一说出我也只能呵呵一笑了，确实是这样，面试越多越发现内部业务是真的垃圾啊。</p><p>真的该考虑转行了。</p><p>但是该复盘还是得复盘。</p><h1 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h1><h2 id="pdd"><a href="#pdd" class="headerlink" title="pdd"></a>pdd</h2><h3 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h3><p>实现一颗树的序列化与反序列化，要求序列化后的字符串长度最小。树的定义如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> value;</span><br><span class="line">List&lt;Node&gt; children;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Node root = <span class="keyword">new</span> Node(<span class="number">1</span>);</span><br><span class="line">        Node node2 = <span class="keyword">new</span> Node(<span class="number">2</span>);</span><br><span class="line">        Node node3 = <span class="keyword">new</span> Node(<span class="number">3</span>);</span><br><span class="line">        root.children.add(node2);</span><br><span class="line">        root.children.add(node3);</span><br><span class="line">        Node node4 = <span class="keyword">new</span> Node(<span class="number">4</span>);</span><br><span class="line">        Node node5 = <span class="keyword">new</span> Node(<span class="number">5</span>);</span><br><span class="line">        Node node6 = <span class="keyword">new</span> Node(<span class="number">6</span>);</span><br><span class="line">        Node node7 = <span class="keyword">new</span> Node(<span class="number">7</span>);</span><br><span class="line">        node2.children.add(node4);</span><br><span class="line">        node2.children.add(node5);</span><br><span class="line">        node2.children.add(node6);</span><br><span class="line">        node3.children.add(node7);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这道题目我只写出了序列化，虽然是错的，就拿代码的示例，我那时想的是<code>1-[2-[4,5,6], 3-[7]]</code>，给gpt解答之后发现完全可以省略-变成1[2[4,5,6],3[7]]，但其实逻辑大差不大。先写序列化的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span> (root.children != <span class="keyword">null</span> &amp;&amp; root.children.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; root.children.size(); i++) &#123;</span><br><span class="line">                Node child = root.children.get(i);</span><br><span class="line">                String childStr = format(child);</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(childStr)) &#123;</span><br><span class="line">                    sb.append(childStr);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i != root.children.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                    sb.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sb.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> String.valueOf(root.value);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> root.value + <span class="string">&quot;[&quot;</span> + sb + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>反序列化是gpt写的，我学习一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">deserialize</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span> || data.isEmpty()) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> deserializeHelper(data, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">deserializeHelper</span><span class="params">(String data, <span class="keyword">int</span>[] index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index[<span class="number">0</span>] &gt;= data.length()) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取节点值</span></span><br><span class="line">    <span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index[<span class="number">0</span>] &lt; data.length() &amp;&amp; Character.isDigit(data.charAt(index[<span class="number">0</span>]))) &#123;</span><br><span class="line">        value = value * <span class="number">10</span> + (data.charAt(index[<span class="number">0</span>]) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        index[<span class="number">0</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node node = <span class="keyword">new</span> Node(value);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查是否有子节点</span></span><br><span class="line">    <span class="keyword">if</span> (index[<span class="number">0</span>] &lt; data.length() &amp;&amp; data.charAt(index[<span class="number">0</span>]) == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">        index[<span class="number">0</span>]++;  <span class="comment">// 跳过 &#x27;[&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> (index[<span class="number">0</span>] &lt; data.length() &amp;&amp; data.charAt(index[<span class="number">0</span>]) != <span class="string">&#x27;]&#x27;</span>) &#123;</span><br><span class="line">            node.children.add(deserializeHelper(data, index));</span><br><span class="line">            <span class="keyword">if</span> (index[<span class="number">0</span>] &lt; data.length() &amp;&amp; data.charAt(index[<span class="number">0</span>]) == <span class="string">&#x27;,&#x27;</span>) &#123;</span><br><span class="line">                index[<span class="number">0</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        index[<span class="number">0</span>]++;  <span class="comment">// 跳过 &#x27;]&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一说一，现在AI比人强太多了。</p><h3 id="redis的使用场景？缓存不一致怎么解决？缓存的时间是？分布式锁的场景？"><a href="#redis的使用场景？缓存不一致怎么解决？缓存的时间是？分布式锁的场景？" class="headerlink" title="redis的使用场景？缓存不一致怎么解决？缓存的时间是？分布式锁的场景？"></a>redis的使用场景？缓存不一致怎么解决？缓存的时间是？分布式锁的场景？</h3><p>内部redis的使用场景一般是缓存和分布式锁。当然业界也有很多其他用法，比如和spring session对接，存储登录信息。还有排行榜功能（zset），pv统计等等。</p><p>缓存不一致业界一般采用的是Cache Aside Pattern, 即旁路缓存方案。这种方案包括读与写两种实践，对于读请求，先读缓存再读DB，如果cache命中，返回数据，未命中则访问DB,并将数据写回缓存。对于写请求，先操作数据库修改，再删除缓存。</p><p>为什么要删除缓存？原因是因为如果是写缓存的话，与正常的缓存miss流程相冲突，无法保证时序性。</p><p>为什么先操作数据库后删除缓存？其实不管是谁先谁后，都有可能会出现并发问题，但是写数据库的操作会比读数据库的速度慢，因此当A线程读了老数据并写入cache，B线程更改了数据库数据，并删除缓存，假设先删除缓存，那么有可能是删了个寂寞，老数据依旧被A写入缓存。当然这就是一个概率问题。</p><p>数据库和缓存是很难做到强一致性的，只能退而求其次追求最终一致性。那么就可以使用双写方案，即常说的延时双删，但是具体延迟多久这个得根据业务确定，取决于读业务所需的时间。</p><p>至于缓存的超时时间，一般是由业务决定，像我一般往redis存储的数据经常是一些配置数据，这些配置数据一般不怎么会改变，我一般是存12或24小时。</p><p>分布式锁的场景一般用于资源的抢占，实现业务的幂等。</p><h3 id="消息队列场景？除了解耦还有其他作用吗？其他优点？"><a href="#消息队列场景？除了解耦还有其他作用吗？其他优点？" class="headerlink" title="消息队列场景？除了解耦还有其他作用吗？其他优点？"></a>消息队列场景？除了解耦还有其他作用吗？其他优点？</h3><p>消息队列一般用于异步处理，应用解耦，流量削峰，日志处理，消息通讯，延时任务，广播等。优点就是解耦、异步、削峰，缺点就是可用性降低，中间件越多，系统越可能出现单点故障；增加系统的复杂性，既然引入了消息队列，那么重复消费需要避免吧？消息丢失需要处理吧？顺序性需要保证吗？这都是一个个问题。</p><h3 id="mysql和mongodb的场景？数据量有多少？"><a href="#mysql和mongodb的场景？数据量有多少？" class="headerlink" title="mysql和mongodb的场景？数据量有多少？"></a>mysql和mongodb的场景？数据量有多少？</h3><p>MongoDB适合用于大数据量、高并发的场景，特别是在需要灵活的数据模型和快速的读写操作时非常适用。</p><p>MySQL适合用于传统的关系型数据库场景，特别是在需要强一致性和复杂的事务处理时非常适用。支持SQL。</p><p>MongoDB的优点包括：灵活的数据模型、高性能的读写操作、可扩展性强、适合大数据量场景；缺点包括：不支持事务处理、对内存和磁盘的要求较高。<br>MySQL的优点包括：强一致性、支持复杂的事务处理、成熟的生态系统、广泛的应用领域；缺点包括：不适合非结构化数据、可扩展性较弱、性能在大数据量场景下有限，需要考虑分库分表，当然mongoDB也需要考虑分片。</p><p>数据量十亿以下吧。</p><h3 id="es的使用场景？"><a href="#es的使用场景？" class="headerlink" title="es的使用场景？"></a>es的使用场景？</h3><p>内部es都用做日志存储与检索，包括应用日志，其他需要上报的文本数据。</p><p>业内es一般用来做搜索，例如电商产品搜索，视频搜索等等，也用作日志分析，如用户行为分析，运营审计日志等。</p><p>后面es集群搭建的时候，再复习下。</p><h3 id="项目：编排流程是做什么的？流程的依赖是怎么处理的？"><a href="#项目：编排流程是做什么的？流程的依赖是怎么处理的？" class="headerlink" title="项目：编排流程是做什么的？流程的依赖是怎么处理的？"></a>项目：编排流程是做什么的？流程的依赖是怎么处理的？</h3><p>这个就不聊了，项目挺垃圾。</p><h3 id="有大流量大批量执行有吗？"><a href="#有大流量大批量执行有吗？" class="headerlink" title="有大流量大批量执行有吗？"></a>有大流量大批量执行有吗？</h3><p>项目相关。没有。确实都没经历过。内部系统哪来的大流量大批量。</p><h3 id="有了解过分库分表吗？既然你们用tidb-那节点扩容了解过吗？"><a href="#有了解过分库分表吗？既然你们用tidb-那节点扩容了解过吗？" class="headerlink" title="有了解过分库分表吗？既然你们用tidb 那节点扩容了解过吗？"></a>有了解过分库分表吗？既然你们用tidb 那节点扩容了解过吗？</h3><p>之后架构之路会搭建TiDB集群，敬请期待。</p><p>这里讲讲分库分表。</p><p>分库一般是按照应用或者租户来分库，用于解决单体库并发量高的问题。而分表一般来说数据量到达一定量级需要考虑。</p><p>分库分表分为水平拆分和垂直拆分。水平拆分是将单表拆成多个数据表，例如order表拆为order1，order2等，根据不同的用户id分到不同的表中。垂直拆分则是拆字段，将不同的字段按照业务或性能拆分成不同的表。</p><p>分表算法一般有直接取模，hash取模，一致性hash等方案，前两种方法存在一个问题就是当后期需要扩容的时候，那么由于基数改变，必然涉及到数据的重新迁移。所以一般来说是使用一致性Hash方式。一致性哈希可以按照常用的hash算法来将对应的key哈希到一个具有2^32次方个节点的空间中，形成成一个顺时针首尾相接的闭合的环形。所以当添加一个新的数据库节点时，只有增加服务器的位置和逆时针方向第一个数据库节点之间的键会受影响。虽然数据会收到部分影响，但是会稍微好点。当然前期就应该规划好数据量级，提前做好分库分表。</p><p>全局id的生成一般有UUID，雪花算法，当然也有tidb使用的预先分配id方案，例如节点1插入数据id范围为1-3000，节点2为3001-6000以此类推。</p><p>市面上主流的分库分表中间件有ShardingSphere，TDDL，Mycat。<a href="https://shardingsphere.apache.org/document/4.1.0/cn/manual/sharding-jdbc/">ShardingSphere</a>用的人可能会多一些。ShardingSphere包括Sharding-JDBC和Sharding-Proxy，JDBC是项目里使用的，Proxy则代理数据库连接，JDBC使用较为简单，只需在项目里引用，并添加多个数据源即可实现分库分表。Proxy 版则可以屏蔽应用层面配置多个数据源，能更好的管理数据库。</p><h3 id="有考虑过容灾吗？"><a href="#有考虑过容灾吗？" class="headerlink" title="有考虑过容灾吗？"></a>有考虑过容灾吗？</h3><p>”同城双活”，“两地三中心”？想到的是这个，但是内部顶多是跨集群跨网络部署应用。这里说说我的思考。</p><p>其实以内部的基础设施建设能力的话，已经足够做容灾方案了。各个园区都有服务器集群，其实只要把服务都部署一套就可以了，然后做网关的负载均衡，但是有个点就是如果是网关故障的话，以目前内部的能力是无法做的无感切换的。一是不支持智能DNS，所以网关即便部署多套，依旧会出现瞬时不可用的场景。</p><p>所以我理解的容灾方案，不仅是服务跨集群部署，网关也要部署多套，然后必须支持智能DNS。这样才能实现初步的容灾。</p><p><strong>当然无外乎就是成本的问题。</strong></p><h2 id="b站"><a href="#b站" class="headerlink" title="b站"></a>b站</h2><p>刚开始讲项目就不说了。还被问了有没有做过业务系统。</p><blockquote><p>你觉得最有挑战的项目是什么，承担的角色是什么？有没有遇到什么有意思的问题。</p></blockquote><p>面试官还提醒我要把空白时间补齐，后面把项目加进去。</p><h3 id="mysql事务四大特性，底层是如何保证这四大特性？"><a href="#mysql事务四大特性，底层是如何保证这四大特性？" class="headerlink" title="mysql事务四大特性，底层是如何保证这四大特性？"></a>mysql事务四大特性，底层是如何保证这四大特性？</h3><p>没答上来。。复习下。</p><ul><li>Atomic，原子性，事务的所有SQL操作作为原子工作单元执行，要么全部执行，要么全部不执行；</li><li>Consistent，一致性，事务完成后，所有数据的状态都是一致的，即A账户只要减去了100，B账户则必定加上了100；</li><li>Isolation，隔离性，如果有多个事务并发执行，每个事务作出的修改必须与其他事务隔离；</li><li>Duration，持久性，即事务完成后，对数据库数据的修改被持久化存储。</li></ul><p>mysql数据库事务的原子性是通过<code>undo log</code>实现的。</p><p>事务的所有修改操作(增、删、改)的相反操作都会写入<code>undo log</code>,比如事务执行了一条insert语句，那么undo log就会记录一条相应的delete语句。所以<code>undo log</code>是一个逻辑文件，记录的是相应的SQL语句一旦由于故障，导致事务无法成功提交，系统则会执行<code>undo log</code>中相应的撤销操作，达到事务回滚的目的。</p><p>mysql数据库事务的持久性是通过<code>redo log</code>实现的</p><p>事务的所有修改操作(增、删、改)，数据库都会生成一条<code>redo</code>日志记录到<code>redo log</code>.区别于<code>undo log</code>记录SQL语句、<code>redo log</code>记录的是事务对数据库的哪个数据页做了什么修改，属于物理日志。</p><p>隔离性是通过（读写锁+MVCC）来实现的。即常见的事务隔离级别（读未提交，不可重复读，可重复读，串行化）。不同隔离级别下，隔离性采用锁+MVCC的方式实现。</p><p><strong>表锁：读锁（不会阻塞其他线程的读操作，阻塞写操作）；写锁（读写操作都阻塞）</strong></p><p><strong>行锁：需要的时候加上，并不是马上释放，等事务提交才释放，两阶段锁协议</strong></p><p><strong>间隙锁-gap lock</strong>：锁定区间范围，防止幻读，左开右开，只在可重复读隔离级别下生效—|—为了阻止多个事务将记录插入到同一范围内，而这会导致幻读问题的产生</p><p><strong>记录锁-record Lock</strong>：锁定行记录，索的索引，索引失效，为表锁</p><p><strong>临键锁-next-key Lock</strong>：record lock+gap lock 左开右闭<strong>（解决幻读</strong>）</p><p><strong>MVCC：实现多版本并发控制，</strong>实现原理：使用版本链+Read View</p><p>读已提交和可重复读实现原理就是MVCC Read View不同的生成时机。可重复读只在事务开始时生成一个Read View，之后都用的这个；读已提交每次执行前都会生成Read View。</p><p>最后通过原子性、持久性、隔离性最终实现数据一致性。</p><h3 id="mysql的锁？为什么读多写少使用乐观锁？死锁什么时候会出现？"><a href="#mysql的锁？为什么读多写少使用乐观锁？死锁什么时候会出现？" class="headerlink" title="mysql的锁？为什么读多写少使用乐观锁？死锁什么时候会出现？"></a>mysql的锁？为什么读多写少使用乐观锁？死锁什么时候会出现？</h3><p>mysql锁按照模式可以分类为：乐观锁与悲观锁。按粒度分可以分为全局锁、表级锁、页级锁、行级锁。按属性可以分为：共享锁、排它锁。按状态分为：意向共享锁、意向排它锁。按算法分为：间隙锁、临键锁、记录锁。</p><h4 id="全局锁、表级锁、页级锁、行级锁"><a href="#全局锁、表级锁、页级锁、行级锁" class="headerlink" title="全局锁、表级锁、页级锁、行级锁"></a>全局锁、表级锁、页级锁、行级锁</h4><ul><li><p>全局锁就是对整个数据库实例加锁。常用在全库逻辑备份（mysqldump）。</p></li><li><p>当前操作的整张表加锁，最常使用的 MyISAM 与 InnoDB 都支持表级锁定。MySQL 里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock，MDL)。</p><p>表锁实现：<code>lock tables … read/write</code>。</p><p><strong>MDL作用是防止DDL和DML并发的冲突</strong> <strong>，保证读写的正确性</strong>MDL 不需要显式使用，在访问一个表的时候会被自动加上。MDL 的作用是，保证读写的正确性。当对一个表做增删改查操作的时候，加 MDL读锁；当要对表做结构变更操作的时候，加 MDL 写锁.</p><p>MDL比较复杂，后面我把网上找的资料补上。</p></li><li><p>页级锁是 MySQL 中锁定粒度介于行级锁和表级锁中间的一种锁。表级锁速度快，但冲突多，行级冲突少，但速度慢。因此，采取了折衷的页级锁，一次锁定相邻的一组记录。BDB 引擎支持页级锁。</p></li><li><p>行级锁是粒度最低的锁，发生锁冲突的概率也最低、并发度最高。但是加锁慢、开销大，容易发生死锁现象。</p><p>MySQL中只有InnoDB支持行级锁，行级锁分为共享锁和排他锁。在MySQL中，行级锁并不是直接锁记录，而是锁索引。索引分为主键索引和非主键索引两种，如果一条sql语句操作了主键索引，MySQL就会锁定这条主键索引；如果一条语句操作了非主键索引，MySQL会先锁定该非主键索引，再锁定相关的主键索引。在UPDATE、DELETE操作时，MySQL不仅锁定WHERE条件扫描过的所有索引记录，而且会锁定相邻的键值，即所谓的next-key locking。</p></li></ul><h4 id="乐观锁与悲观锁"><a href="#乐观锁与悲观锁" class="headerlink" title="乐观锁与悲观锁"></a>乐观锁与悲观锁</h4><p>乐观锁是相对悲观锁而言的，乐观锁假设数据一般情况下不会造成冲突。适用于读多写少，因为如果出现大量的写操作，写冲突的可能性就会增大，业务层需要不断重试，会大大降低系统性能。一般使用数据版本（Version）或时间戳记录机制实现，在数据库表中增加一个数字类型的“version”字段来实现。当读取数据时，将version字段的值一同读出，数据每更新一次，对此version值加一。</p><p>悲观锁，每次去拿数据的时候都认为别人会修改，对数据被外界修改持保守态度。适用于并发量不大、写入操作比较频繁、数据一致性比较高的场景。在MySQL中使用悲观锁，必须关闭MySQL的自动提交，set autocommit=0。共享锁和排它锁是悲观锁的不同的实现，它俩都属于悲观锁的范畴。</p><h4 id="共享锁和排他锁"><a href="#共享锁和排他锁" class="headerlink" title="共享锁和排他锁"></a>共享锁和排他锁</h4><h4 id="死锁的出现"><a href="#死锁的出现" class="headerlink" title="死锁的出现"></a>死锁的出现</h4><p>比如表级锁死锁，这个好理解。</p><p>行级锁死锁可能的原因是因为锁的膨胀，比如事务中执行了一条没有索引条件的查询，进行了全表扫描，膨胀为表级锁。</p><p>mysql的innoDb采用了一种叫作等待图(wait-for graph)的方法来自动检测死锁，如果发现死锁，就会自动回滚一个事务。</p><h3 id="redis使用场景？redisson的原理？线程递归使用锁？"><a href="#redis使用场景？redisson的原理？线程递归使用锁？" class="headerlink" title="redis使用场景？redisson的原理？线程递归使用锁？"></a>redis使用场景？redisson的原理？线程递归使用锁？</h3><p>使用场景同pdd。</p><h4 id="redission原理"><a href="#redission原理" class="headerlink" title="redission原理"></a>redission原理</h4><p>通过lua脚本来实现加锁的操作</p><ol><li>判断lock键是否存在，不存在直接调用hset存储当前线程信息并且设置过期时间,返回nil，告诉客户端直接获取到锁。</li><li>判断lock键是否存在，存在则将重入次数加1，并重新设置过期时间，返回nil，告诉客户端直接获取到锁。</li><li>被其它线程已经锁定，返回锁有效期的剩余时间，告诉客户端需要等待。</li></ol><p>加锁的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;T&gt; <span class="function">RFuture&lt;T&gt; <span class="title">tryLockInnerAsync</span><span class="params">(<span class="keyword">long</span> waitTime, <span class="keyword">long</span> leaseTime, TimeUnit unit, <span class="keyword">long</span> threadId, RedisStrictCommand&lt;T&gt; command)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> evalWriteAsync(getRawName(), LongCodec.INSTANCE, command,</span><br><span class="line">                          <span class="string">&quot;if (redis.call(&#x27;exists&#x27;, KEYS[1]) == 0) then &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return redis.call(&#x27;pttl&#x27;, KEYS[1]);&quot;</span>,</span><br><span class="line">                          Collections.singletonList(getRawName()), unit.toMillis(leaseTime), getLockName(threadId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>释放锁的流程: </p><ol><li>如果lock键不存在，通过<code>publish</code>指令发送一个消息表示锁已经可用。</li><li>如果锁不是被当前线程锁定，则返回nil</li><li>由于支持可重入，在解锁时将重入次数需要减1</li><li>如果计算后的重入次数&gt;0，则重新设置过期时间</li><li>如果计算后的重入次数&lt;=0，则发消息说锁已经可用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> RFuture&lt;Boolean&gt; <span class="title">unlockInnerAsync</span><span class="params">(<span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> evalWriteAsync(getRawName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,</span><br><span class="line">                          <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[3]) == 0) then &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return nil;&quot;</span> +</span><br><span class="line">                          <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;local counter = redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[3], -1); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;if (counter &gt; 0) then &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[2]); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return 0; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;else &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;redis.call(&#x27;del&#x27;, KEYS[1]); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;redis.call(&#x27;publish&#x27;, KEYS[2], ARGV[1]); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return 1; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return nil;&quot;</span>,</span><br><span class="line">                          Arrays.asList(getRawName(), getChannelName()), LockPubSub.UNLOCK_MESSAGE, internalLockLeaseTime, getLockName(threadId));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>watchlog实现机制可以参考之前的复盘。</p><h3 id="redis集群模式了解过吗？怎么保证高可用？"><a href="#redis集群模式了解过吗？怎么保证高可用？" class="headerlink" title="redis集群模式了解过吗？怎么保证高可用？"></a>redis集群模式了解过吗？怎么保证高可用？</h3><p>下一期架构之路会搭建redis集群模式，这个我早上醒来就在想啥时候搭建一个，没想到下午面试就遇到了。</p><p>redis共有三种集群模式，主从复制模式（Master-Slave）、哨兵模式（Sentinel）和Cluster模式。</p><p>主从复制是Redis的一种基本集群模式，它通过将一个Redis节点（主节点）的数据复制到一个或多个其他Redis节点（从节点）来实现数据的冗余和备份。</p><p>主节点负责处理客户端的写操作，同时从节点会实时同步主节点的数据。客户端可以从从节点读取数据，实现读写分离，提高系统性能。</p><p>主从复制模式适合数据备份、读写分离和在线升级等场景，但在主节点故障时需要手动切换，不能自动实现故障转移。如果对高可用性要求较高，可以考虑使用哨兵模式或Cluster模式。</p><p>哨兵模式（Sentinel）是在主从复制基础上加入了哨兵节点，实现了自动故障转移。哨兵节点是一种特殊的Redis节点，它会监控主节点和从节点的运行状态。当主节点发生故障时，哨兵节点会自动从从节点中选举出一个新的主节点，并通知其他从节点和客户端，实现故障转移。</p><p>哨兵模式在主从复制模式的基础上实现了自动故障转移，提高了系统的高可用性。然而，它仍然无法实现数据分片。如果需要实现数据分片和负载均衡，可以考虑使用Cluster模式。</p><p>Cluster集群通过分片（sharding）模式来对数据进行管理，并具备分片间数据复制、故障转移和流量调度的能力。</p><p>Redis集群的做法是 将数据划分为 16384（2的14次方）个哈希槽（slots），如果你有多个实例节点，那么每个实例节点将管理其中一部分的槽位，槽位的信息会存储在各自所归属的节点中。</p><p>Cluster模式适用于以下场景：</p><ol><li>大规模数据存储：通过数据分片，突破单节点内存限制。</li><li>高性能要求场景：通过负载均衡，提高系统性能。</li><li>高可用性要求场景：通过自动故障转移，确保服务的持续可用。</li></ol><p>Cluster模式在提供高可用性的同时，实现了数据分片和负载均衡，适用于大规模数据存储和高性能要求的场景。然而，它的配置和管理相对复杂，且某些复杂的多键操作可能受到限制。</p><h3 id="spring事务的传播机制有哪几种，什么情况下事务会失效？"><a href="#spring事务的传播机制有哪几种，什么情况下事务会失效？" class="headerlink" title="spring事务的传播机制有哪几种，什么情况下事务会失效？"></a>spring事务的传播机制有哪几种，什么情况下事务会失效？</h3><ol><li>Propagation.REQUIRED：默认的事务传播级别，它表示如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li><li>Propagation.SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li><li>Propagation.MANDATORY：（mandatory：强制性）如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</li><li>Propagation.REQUIRES_NEW：表示创建一个新的事务，如果当前存在事务，则把当前事务挂起。也就是说不管外部方法是否开启事务，Propagation.REQUIRES_NEW 修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。</li><li>Propagation.NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li><li>Propagation.NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。</li><li>Propagation.NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于 PROPAGATION_REQUIRED。</li></ol><h4 id="事务失效的场景"><a href="#事务失效的场景" class="headerlink" title="事务失效的场景"></a>事务失效的场景</h4><ol><li><p>抛出检查异常，如果<code>@Transactional</code> 没有特别指定，Spring 只会在遇到运行时异常RuntimeException或者error时进行回滚。需要配置rollbackFor`属性。</p></li><li><p>业务方法本身捕获了异常。这个没啥好说的，当内部嵌套特别多的时候非常容易犯这种错误。</p></li><li><p>同一类中的方法调用。这个也容易犯错，加入A是<code>@Transactional</code>注解的方法，同类的B方法没有注解，但是内部调用了A方法，导致事务失效。很简单，原因就是方法没有被动态代理。</p></li><li><p>方法使用 final 或 static关键字。如果<code>Spring</code>使用了<code>Cglib</code>代理实现，而你的业务方法恰好使用了<code>final</code>或者<code>static</code>关键字，那么事务也会失败。更具体地说，它应该抛出异常，因为<code>Cglib</code>使用字节码增强技术生成被代理类的子类并重写被代理类的方法来实现代理。如果被代理的方法的方法使用<code>final</code>或<code>static</code>关键字，则子类不能重写被代理的方法。如果<code>Spring</code>使用<code>JDK</code>动态代理实现，<code>JDK</code>动态代理是基于接口实现的，那么<code>final</code>和<code>static</code>修饰的方法也就无法被代理。</p></li><li><p>方法不是public。<code>Spring</code>的事务管理源码<code>AbstractFallbackTransactionAttributeSource</code>中有判断<code>computeTransactionAttribute()。</code>如果目标方法不是公共的，则<code>TransactionAttribute</code>返回<code>null</code>。</p></li><li><p>错误使用传播机制。假设两个方法都使用REQUIRES_NEW，如果当前方法中没有事务，就会创建一个新的事务。如果一个事务已经存在，则当前事务将被挂起，并创建一个新事务。那么当A调用B完成后，B事务已经提交，A就算回滚了也影响不了B。</p></li><li><p>没有被Spring管理。这种情况一般来说不会发生。</p></li><li><p>多线程。我们说的同一个事务，其实是指同一个数据库连接，只有拥有同一个数据库连接才能同时提交和回滚。如果在不同的线程，拿到的数据库连接肯定是不一样的，所以是不同的事务。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>基础问题很多没答上来，得好好复习。面试官人挺好，感觉就是聊聊天。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;拼多多和b站两场面试，大概率凉凉。  &lt;/p&gt;
&lt;p&gt;“你这业务都是偏向工具类啊”。这句话一说出我也只能呵呵一笑了，确实是这样，面试越多越发
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="随想" scheme="https://re0.top/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="架构" scheme="https://re0.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>【架构之路4】k8s对接ceph-rbd</title>
    <link href="https://re0.top/2024/07/12/devops4/"/>
    <id>https://re0.top/2024/07/12/devops4/</id>
    <published>2024-07-12T13:30:00.000Z</published>
    <updated>2024-07-12T12:06:35.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上篇讲了cephfs对接k8s集群，体验不是很好，这篇接着体验ceph-rbd。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="安装rbd驱动"><a href="#安装rbd驱动" class="headerlink" title="安装rbd驱动"></a>安装rbd驱动</h2><p>很简单，接着使用helm安装即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl create namespace &quot;ceph-csi-rbd&quot;</span><br><span class="line">helm install --namespace &quot;ceph-csi-rbd&quot; &quot;ceph-csi-rbd&quot; ceph-csi/ceph-csi-rbd</span><br></pre></td></tr></table></figure><h2 id="ceph-pool-secret创建"><a href="#ceph-pool-secret创建" class="headerlink" title="ceph pool secret创建"></a>ceph pool secret创建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool create k8s_rbd 128 128</span><br><span class="line">// 记得初始化</span><br><span class="line">rbd pool init k8s_rbd</span><br></pre></td></tr></table></figure><p>创建名为k8s的用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ceph auth get-or-create client.k8s mon &#x27;profile rbd&#x27; osd &#x27;profile rbd pool=k8s_rbd&#x27;</span><br><span class="line">// AQAx4JBm6BItDBAAQue62g4QOmdDD27/PFZmQQ==</span><br></pre></td></tr></table></figure><h2 id="修改k8s集群的rbd驱动配置文件"><a href="#修改k8s集群的rbd驱动配置文件" class="headerlink" title="修改k8s集群的rbd驱动配置文件"></a>修改k8s集群的rbd驱动配置文件</h2><p>老样子，安装rbd驱动后，ceph-csi-rbd命名空间下会有ceph-csi-config的configMap，修改它。</p><p>这里我直接通过kubepi网页直接修改了，很方便，修改它的config.json，把下面的东西粘贴进去。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;clusterID&quot;</span>: <span class="string">&quot;ed91a6b4-3df6-11ef-9d94-000c29a7737d&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;monitors&quot;</span>: [</span><br><span class="line">          <span class="string">&quot;192.168.28.138:6789&quot;</span>,</span><br><span class="line">          <span class="string">&quot;192.168.28.139:6789&quot;</span>,</span><br><span class="line">          <span class="string">&quot;192.168.28.140:6789&quot;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>增加secret.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">csi-rbd-secret</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ceph-csi-rbd</span></span><br><span class="line"><span class="attr">stringData:</span></span><br><span class="line">  <span class="attr">userID:</span> <span class="string">k8s</span></span><br><span class="line">  <span class="attr">userKey:</span> <span class="string">AQAx4JBm6BItDBAAQue62g4QOmdDD27/PFZmQQ==</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">   <span class="attr">name:</span> <span class="string">csi-rbd-sc</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">rbd.csi.ceph.com</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">   <span class="attr">clusterID:</span> <span class="string">ed91a6b4-3df6-11ef-9d94-000c29a7737d</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">pool:</span> <span class="string">k8s_rbd</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">imageFeatures:</span> <span class="string">&quot;layering&quot;</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">csi.storage.k8s.io/provisioner-secret-name:</span> <span class="string">csi-rbd-secret</span></span><br><span class="line">   <span class="attr">csi.storage.k8s.io/provisioner-secret-namespace:</span> <span class="string">ceph-csi-rbd</span></span><br><span class="line">   <span class="attr">csi.storage.k8s.io/controller-expand-secret-name:</span> <span class="string">csi-rbd-secret</span></span><br><span class="line">   <span class="attr">csi.storage.k8s.io/controller-expand-secret-namespace:</span> <span class="string">ceph-csi-rbd</span></span><br><span class="line">   <span class="attr">csi.storage.k8s.io/node-stage-secret-name:</span> <span class="string">csi-rbd-secret</span></span><br><span class="line">   <span class="attr">csi.storage.k8s.io/node-stage-secret-namespace:</span> <span class="string">ceph-csi-rbd</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">csi.storage.k8s.io/fstype:</span> <span class="string">ext4</span></span><br><span class="line"><span class="attr">reclaimPolicy:</span> <span class="string">Delete</span></span><br><span class="line"><span class="attr">allowVolumeExpansion:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If filesystem is xfs, nouuid will be automatically added to mountOptions</span></span><br><span class="line"><span class="attr">mountOptions:</span>   </span><br><span class="line">  <span class="bullet">-</span> <span class="string">discard</span></span><br></pre></td></tr></table></figure><h2 id="创建pvc绑定容器"><a href="#创建pvc绑定容器" class="headerlink" title="创建pvc绑定容器"></a>创建pvc绑定容器</h2><p>先创建pvc，<code>vim ceph-rbd-pvc.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">csi-rbd-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">csi-rbd-sc</span></span><br></pre></td></tr></table></figure><p><code>kubectl get pvc</code>可以看到是Bound的状态。</p><p>绑定个容器试试，老熟人nginx</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mypvc</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mypvc</span></span><br><span class="line">        <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">          <span class="attr">claimName:</span> <span class="string">csi-rbd-pvc</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">false</span></span><br><span class="line"> <span class="string">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span> <span class="comment"># service类型</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>试了下也是正常绑定了。</p><h2 id="是否解决了cephfs的问题"><a href="#是否解决了cephfs的问题" class="headerlink" title="是否解决了cephfs的问题"></a>是否解决了cephfs的问题</h2><p>先看看重新绑定好使不。</p><p>老套路，进容器往/usr/share/nginx/html/index.html写点东西。然后nginx删掉重新部署看看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Multi-Attach error for volume &quot;pvc-eb833c50-0acf-4b36-8b4e-b9e262f42406&quot; Volume is already used by pod(s) nginx-deployment-697596746b-z9zwp</span><br></pre></td></tr></table></figure><p>报了个错，但是问题不大，因为不支持ReadWriteMany，所以绑定有问题，稍等片刻等前一个容器停止后，重新访问容器发现文件都还在。</p><p>然后是自动释放.先把nginx停掉.然后删除pvc.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f /ceph-pvc.yaml</span><br></pre></td></tr></table></figure><p>可以看到pv也自动删除了，非常好。</p><p>扩容缩容也没啥问题。完美。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>rbd使用上相比fs果然好使，不知道是不是因为我把所有无关的pool都删除的原因，现在创建，绑定删除都没有任何问题。</p><p>至此ceph与k8s的对接就告一段落了。</p><p>后续应该是按照这个思路接着写我的部署系统了。但是有一点没想好就是volume应该在一个命名空间下去管理，还是说分散到各个应用中呢？PV属于集群级别，PVC有命名空间，那么volume数据存放到应用的命名空间就行了，只要把回收策略从Delete改为Retain应该就好了，删除时不影响数据即可。嗯就这么搞。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;上篇讲了cephfs对接k8s集群，体验不是很好，这篇接着体验ceph-rbd。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot;
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="架构" scheme="https://re0.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="运维" scheme="https://re0.top/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="从0.5开始的运维架构之路" scheme="https://re0.top/tags/%E4%BB%8E0-5%E5%BC%80%E5%A7%8B%E7%9A%84%E8%BF%90%E7%BB%B4%E6%9E%B6%E6%9E%84%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>【架构之路3】k8s对接cephfs</title>
    <link href="https://re0.top/2024/07/11/devops3/"/>
    <id>https://re0.top/2024/07/11/devops3/</id>
    <published>2024-07-11T13:30:00.000Z</published>
    <updated>2024-07-12T06:30:31.073Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上篇讲了ceph集群的搭建，这篇就来对接k8s存储。  </p><p>ceph对接k8s在比较新的k8s版本中废弃了对ceph的官方支持，转为社区维护ceph-csi驱动，但是纵观我能搜索到的网上的中文教程，还有<a href="https://github.com/ceph/ceph-csi/">驱动官方</a>的readme，都写的不咋样。  </p><p>ceph接入k8s常见的有两种方式，一种是ceph-rbd，另一种是ceph-fs，两者各有优劣，网上也有性能测试，对k8s而言，rbd不支持ReadWriteMany模式。这篇就来讲讲cephfs和k8s是如何对接的。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="cephfs接入k8s"><a href="#cephfs接入k8s" class="headerlink" title="cephfs接入k8s"></a>cephfs接入k8s</h2><p>打开<a href="https://github.com/ceph/ceph-csi/">驱动官方github地址</a>。由于我们的k8s集群版本是1.29，因此驱动版本就使用3.11.0。  </p><p>打开<a href="https://github.com/ceph/ceph-csi/blob/v3.11.0/docs/deploy-cephfs.md">deploy-cephfs.md</a>.可以看到教程很复杂，需要部署好几个yaml，但其实根本没那么复杂。。。最简单的方法就是helm.</p><p>helm是k8s的包管理工具，可以理解成pip或者npm的作用。官方其实提供了chart包供我们使用。</p><p>先安装helm，记得export代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3</span><br><span class="line">chmod 700 get_helm.sh</span><br><span class="line">./get_helm.sh</span><br></pre></td></tr></table></figure><p>安装完成后添加csi的repo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm repo add ceph-csi https://ceph.github.io/csi-charts</span><br></pre></td></tr></table></figure><p>先创建k8s命名空间，然后安装ceph-csi-cephfs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl create namespace ceph-csi-cephfs</span><br><span class="line">helm install --namespace &quot;ceph-csi-cephfs&quot; &quot;ceph-csi-cephfs&quot; ceph-csi/ceph-csi-cephfs</span><br></pre></td></tr></table></figure><p>可以加上<code>--version</code>指定版本</p><p>等待安装部署完成。</p><p>部署完成后，可以在kubepi上看到ceph-csi-cephfs-nodeplugin和ceph-csi-cephfs-provisioner容器在三个节点上运行，说明就成功了，接下来我们就配置如何和ceph对接。</p><h2 id="cephfs-pool创建"><a href="#cephfs-pool创建" class="headerlink" title="cephfs pool创建"></a>cephfs pool创建</h2><p>我们需要在ceph上创建两个pool用于构建cephfs，在主节点执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool create cephfs_k8s_metadata 64</span><br><span class="line">ceph osd pool create cephfs_k8s_data 64</span><br></pre></td></tr></table></figure><p>最后一个参数pg_num与osd数量相关，我只有三个osd因此我只能设置到64.</p><p>接着创建ceph fs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph fs new cephfs_k8s cephfs_k8s_metadata cephfs_k8s_data</span><br></pre></td></tr></table></figure><p>设置mds</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph fs set cephfs_k8s max_mds 2</span><br></pre></td></tr></table></figure><p>创建subvolumegroup</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph fs subvolumegroup create cephfs_k8s csi</span><br></pre></td></tr></table></figure><p>我们创建获取两个token用于后续k8s与ceph通信。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 注意 client.k8s.cephfs必须以client开头</span><br><span class="line">ceph auth get-or-create client.k8s.cephfs mon &#x27;allow r&#x27; mds &#x27;allow rw&#x27; osd &#x27;allow rw pool=cephfs_k8s_data, allow rw pool=cephfs_k8s_metadata&#x27;</span><br><span class="line">// 记录返回的key</span><br><span class="line">ceph auth get-key client.admin</span><br></pre></td></tr></table></figure><p>分别获取k8s.cephfs和admin的token</p><h2 id="利用storageclass自动创建pv"><a href="#利用storageclass自动创建pv" class="headerlink" title="利用storageclass自动创建pv"></a>利用storageclass自动创建pv</h2><p>首先我们在ceph-csi-cephfs命名空间下可以看到名为ceph-csi-config的configMap，我们要修改它。主要修改的是config.json的内容。其中clusterID可用通过ceph -s获取。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">kubectl</span> <span class="string">edit</span> <span class="string">configmap</span> <span class="string">ceph-csi-config</span> <span class="string">-n</span> <span class="string">ceph-csi-cephfs</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">config.json:</span> <span class="string">|-</span></span><br><span class="line"><span class="string">    [</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        &quot;clusterID&quot;: &quot;ed91a6b4-3df6-11ef-9d94-000c29a7737d&quot;,</span></span><br><span class="line"><span class="string">        &quot;monitors&quot;: [</span></span><br><span class="line"><span class="string">          &quot;192.168.28.138:6789&quot;,</span></span><br><span class="line"><span class="string">          &quot;192.168.28.139:6789&quot;,</span></span><br><span class="line"><span class="string">          &quot;192.168.28.140:6789&quot;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string"></span><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">meta.helm.sh/release-name:</span> <span class="string">ceph-csi-cephfs</span></span><br><span class="line">    <span class="attr">creationTimestamp:</span> <span class="string">&quot;2024-07-10T19:38:16Z&quot;</span>      </span><br><span class="line">  <span class="attr">labels:</span>            </span><br><span class="line">    <span class="attr">app:</span> <span class="string">ceph-csi-cephfs</span>        </span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">chart:</span> <span class="string">ceph-csi-cephfs-3.11.0</span></span><br><span class="line">    <span class="attr">component:</span> <span class="string">provisioner</span></span><br><span class="line">    <span class="attr">heritage:</span> <span class="string">Helm</span>                            </span><br><span class="line">    <span class="attr">release:</span> <span class="string">ceph-csi-cephfs</span>                       </span><br><span class="line">  <span class="attr">name:</span> <span class="string">ceph-csi-config</span>                    </span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ceph-csi-cephfs</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">&quot;78500&quot;</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">3ea503de-238f-41b8-b96c-7f54ae00effb</span> </span><br></pre></td></tr></table></figure><p>创建secret，将上面获取的两个token填入，<code>vim ceph-secret.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">csi-cephfs-secret</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ceph-csi-cephfs</span></span><br><span class="line"><span class="attr">stringData:</span></span><br><span class="line">  <span class="attr">userID:</span> <span class="string">k8s.cephfs</span></span><br><span class="line">  <span class="attr">userKey:</span> <span class="string">AQDE049mVf8vOBAA8f4LpLckjoS6Qbhbrgr9Tw==</span></span><br><span class="line">  <span class="attr">adminID:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">adminKey:</span> <span class="string">AQCwOo1mbQ+nFxAA5CZ4VajvzDCRd5Gpaxe6kw==</span></span><br></pre></td></tr></table></figure><p>接着我们创建storageclass，<code>vim storageclass.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">csi-cephfs-sc</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">cephfs.csi.ceph.com</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="attr">clusterID:</span> <span class="string">ed91a6b4-3df6-11ef-9d94-000c29a7737d</span></span><br><span class="line">  <span class="attr">fsName:</span> <span class="string">cephfs_k8s</span></span><br><span class="line">  <span class="attr">pool:</span> <span class="string">cephfs_k8s_data</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">csi.storage.k8s.io/provisioner-secret-name:</span> <span class="string">csi-cephfs-secret</span></span><br><span class="line">  <span class="attr">csi.storage.k8s.io/provisioner-secret-namespace:</span> <span class="string">ceph-csi-cephfs</span></span><br><span class="line">  <span class="attr">csi.storage.k8s.io/controller-expand-secret-name:</span> <span class="string">csi-cephfs-secret</span></span><br><span class="line">  <span class="attr">csi.storage.k8s.io/controller-expand-secret-namespace:</span> <span class="string">ceph-csi-cephfs</span></span><br><span class="line">  <span class="attr">csi.storage.k8s.io/node-stage-secret-name:</span> <span class="string">csi-cephfs-secret</span></span><br><span class="line">  <span class="attr">csi.storage.k8s.io/node-stage-secret-namespace:</span> <span class="string">ceph-csi-cephfs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产环境建议改成Retain</span></span><br><span class="line"><span class="attr">reclaimPolicy:</span> <span class="string">Delete</span></span><br><span class="line"><span class="attr">allowVolumeExpansion:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 注意这里mountOptions不要有任何东西</span></span><br><span class="line"><span class="comment"># mountOptions:</span></span><br><span class="line"><span class="comment">#   - context=&quot;system_u:object_r:container_file_t:s0:c0,c1&quot;</span></span><br></pre></td></tr></table></figure><p>部署secret和storageclass</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f ceph-secret.yaml</span><br><span class="line">kubectl apply -f storageclass.yaml</span><br></pre></td></tr></table></figure><p>至此，申请pvc时，将会自动向ceph集群申请存储卷，并自动创建pv。</p><h2 id="创建测试容器"><a href="#创建测试容器" class="headerlink" title="创建测试容器"></a>创建测试容器</h2><p>先创建一个pvc。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: csi-cephfs-pvc-test</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 2Gi</span><br><span class="line">  storageClassName: csi-cephfs-sc</span><br></pre></td></tr></table></figure><p>记得apply一下。</p><p>如果发现pv无法自动创建出来，记得检查下密码或者subvolume是否创建出来，可以到csi-provisioner看看日志。</p><p>再创建一个nginx测试好了，<code>vim nginx-deployment.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mypvc</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mypvc</span></span><br><span class="line">        <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">          <span class="attr">claimName:</span> <span class="string">csi-cephfs-pvc-test</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>apply一下看看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc -o wide</span><br></pre></td></tr></table></figure><p>如果容器不是pending，那么说明挂载成功了。我们获取访问端口看看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx-service   NodePort    10.43.24.66   &lt;none&gt;        80:31162/TCP   29h    app=nginx-pod</span><br><span class="line">curl http://worker1:31162/</span><br></pre></td></tr></table></figure><p>这里提示403是正常的，因为我们挂载的根节点没有东西。</p><p>我们进入容器内随意加点东西，可以通过kubepi的进入终端方便一点，也可以<code>kubectl exec -it nginx-deployment-7c565ff488-qqfkz -- /bin/bash</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/nginx/html/</span><br><span class="line">echo `date` &gt; index.html</span><br></pre></td></tr></table></figure><p>再访问发现正常了。</p><p>接下来我们结束容器让其重新部署看看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete pod nginx-deployment-7c565ff488-qqfkz</span><br></pre></td></tr></table></figure><p>刚才pod部署在节点3，现在删除后重新部署在了节点2，再次访问<code>http://worker1:31162/</code>可以看到我们的更改还在。</p><p>至此我们便完成了cephfs与k8s的对接，值得一提的是这种方式是支持动态扩容的。只需修改pvc的容量，pv的容量也会自动调整。</p><p>至此我们搭建就完成了，但是也存在一些问题。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="经常性自动创建PV失败"><a href="#经常性自动创建PV失败" class="headerlink" title="经常性自动创建PV失败"></a>经常性自动创建PV失败</h2><p>当声明pvc后，csi-ceph的插件容器会自动向ceph集群创建volume，GRPC调用/csi.v1.Controller/CreateVolume，但是第一次请求总是没有响应，可能是因为超时，所以后续会重复调用CreateVolume，导致后续请求响应都是<code>an operation with the given Volume ID xxx already exists</code>.我看了下默认的超时时间是60s，<code>provisioner.timeout</code>，可能是我ceph集群性能不好，没找到原因，但是我重启虚拟机后又正常了，奇怪。</p><h2 id="pv无法自动回收"><a href="#pv无法自动回收" class="headerlink" title="pv无法自动回收"></a>pv无法自动回收</h2><p>通过storageclass创建的pv，当删除pvc时，pv会被标记为release，但是回收会出现问题，导致pv资源一直存在。看了容器日志应该是和ceph集群通信有问题，导致删除失败，GRPC调用/csi.v1.Controller/DeleteVolume似乎超时了，后续再调用时和上面问题一样一直出现 already exists。这个目前没有找到解决办法。</p><h2 id="自动回收不适用生产环境"><a href="#自动回收不适用生产环境" class="headerlink" title="自动回收不适用生产环境"></a>自动回收不适用生产环境</h2><p>storageclass中的reclaimPolicy应该修改为Retain，保证数据安全。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>尽管搭建了ceph集群，并且使用cephfs对接了k8s，但实际上体验不是很好，不知道是虚拟硬盘导致的ceph集群问题，还是本身就有bug存在，总之一番体验下来，不建议使用cephfs对接k8s。</p><p>至于为什么不手动创建pv，是因为网上那些例子其实都是过时的，从k8s1.28开始就已经将pv里的spec.cephfs标记为过时了，并且这种方式需要在pv里声明monitor的地址列表，当pv数量足够多时很难去管理。</p><p>目前上一家公司用的就是ceph-rbd对接的k8s。看下后续的ceph-rbd对接能不能有更好的体验，如果还是存在问题，那就是我的ceph集群有问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;上篇讲了ceph集群的搭建，这篇就来对接k8s存储。  &lt;/p&gt;
&lt;p&gt;ceph对接k8s在比较新的k8s版本中废弃了对ceph的官方支持，
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="架构" scheme="https://re0.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="运维" scheme="https://re0.top/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="从0.5开始的运维架构之路" scheme="https://re0.top/tags/%E4%BB%8E0-5%E5%BC%80%E5%A7%8B%E7%9A%84%E8%BF%90%E7%BB%B4%E6%9E%B6%E6%9E%84%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>【架构之路2】ceph集群搭建</title>
    <link href="https://re0.top/2024/07/11/devops2/"/>
    <id>https://re0.top/2024/07/11/devops2/</id>
    <published>2024-07-11T08:30:00.000Z</published>
    <updated>2024-07-11T12:38:54.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上篇讲了k8s集群的搭建，这篇接着来搭建ceph集群。  </p><blockquote><p>以下内容来自<a href="https://wiki.archlinuxcn.org/wiki/Ceph">wiki</a></p><p>Ceph 是一个专注于分布式的、弹性可扩展的、高可靠的、性能优异的存储系统平台，可用于为虚拟机提供块存储方案或通过 FUSE提供常规的文件系统。Ceph 是个高度可配置的系统，管理者可以控制系统的各个方面。它提供了一个命令行界面用于监视和控制其存储集群。Ceph 也包含鉴证和授权功能，可兼容多种存储网关接口，如 <a href="https://en.wikipedia.org/wiki/OpenStack#Swift">OpenStack Swift</a> 和 <a href="https://en.wikipedia.org/wiki/Amazon_S3">Amazon S3</a>。</p></blockquote><p>ceph中有几个术语，官网的描述为</p><blockquote><ul><li><strong>Monitors</strong>: A <a href="https://docs.ceph.com/en/latest/glossary/#term-Ceph-Monitor">Ceph Monitor</a> (<code>ceph-mon</code>) maintains maps of the cluster state, including the <a href="https://docs.ceph.com/en/latest/rados/operations/monitoring/#display-mon-map">monitor map</a>, manager map, the OSD map, the MDS map, and the CRUSH map. These maps are critical cluster state required for Ceph daemons to coordinate with each other. Monitors are also responsible for managing authentication between daemons and clients. At least three monitors are normally required for redundancy and high availability.</li><li><strong>Managers</strong>: A <a href="https://docs.ceph.com/en/latest/glossary/#term-Ceph-Manager">Ceph Manager</a> daemon (<code>ceph-mgr</code>) is responsible for keeping track of runtime metrics and the current state of the Ceph cluster, including storage utilization, current performance metrics, and system load. The Ceph Manager daemons also host python-based modules to manage and expose Ceph cluster information, including a web-based <a href="https://docs.ceph.com/en/latest/mgr/dashboard/#mgr-dashboard">Ceph Dashboard</a> and <a href="https://docs.ceph.com/en/mgr/restful">REST API</a>. At least two managers are normally required for high availability.</li><li><strong>Ceph OSDs</strong>: An Object Storage Daemon (<a href="https://docs.ceph.com/en/latest/glossary/#term-Ceph-OSD">Ceph OSD</a>, <code>ceph-osd</code>) stores data, handles data replication, recovery, rebalancing, and provides some monitoring information to Ceph Monitors and Managers by checking other Ceph OSD Daemons for a heartbeat. At least three Ceph OSDs are normally required for redundancy and high availability.</li><li><strong>MDSs</strong>: A <a href="https://docs.ceph.com/en/latest/glossary/#term-Ceph-Metadata-Server">Ceph Metadata Server</a> (MDS, <code>ceph-mds</code>) stores metadata for the <a href="https://docs.ceph.com/en/latest/glossary/#term-Ceph-File-System">Ceph File System</a>. Ceph Metadata Servers allow CephFS users to run basic commands (like <code>ls</code>, <code>find</code>, etc.) without placing a burden on the Ceph Storage Cluster.</li></ul></blockquote><p>稍微翻译一下</p><ul><li><strong>MONs</strong> : 即监视器，存放了集群状态及例如服务和数据位置等集群信息。</li><li><strong>MDSs</strong> : 即元数据服务器，为 Ceph 文件系统存储元数据，以减轻存储集群的负载（例如<code>ls</code> 等命令所需的信息）。</li><li><strong>MGRs</strong>: 负责集群监控，维护，并于外部监控系统对接，如普罗米修斯。</li><li><strong>OSDs</strong> : 即 OSD daemons，负责集群的数据存储工作，也同时负责多项其它任务，例如数据复制，恢复及重平衡。</li></ul><p>ceph的架构还是挺复杂的，建议去官网看看。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>废话少说开始搭建。</p><p>准备工作就不重复写了，可以参考上一篇，还是那三台机器138，139，140。</p><p>官方目前推荐使用cephadm作为安装工具，那我们后续就用这个。至于ceph-ansible和ceph-deploy，前者我们做demo没必要，后者的话官网已经不再支持了。</p><h2 id="安装cephadm"><a href="#安装cephadm" class="headerlink" title="安装cephadm"></a>安装cephadm</h2><p>在ubantu下很简单直接使用apt就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y cephadm</span><br></pre></td></tr></table></figure><p>但是我们用的是centOS7！已经快被淘汰了，现在新版的叫CentOS Stream，内置的包管理器竟然叫做dnf。。。</p><p>不管了，其实cephadm就是一个python脚本，我们去从源码拉下来就行。</p><p>先安装python3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y python3</span><br></pre></td></tr></table></figure><p>然后拉去代码，拉不下来记得export代理地址。CEPH_RELEASE版本可以参考<a href="https://docs.ceph.com/en/latest/releases/#active-releases">这里</a>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CEPH_RELEASE=18.2.2</span><br><span class="line">curl --silent --remote-name --location https://download.ceph.com/rpm-<span class="variable">$&#123;CEPH_RELEASE&#125;</span>/el9/noarch/cephadm</span><br><span class="line">chmod +x cephadm</span><br></pre></td></tr></table></figure><p>接下来是添加仓库，官网这里是安装的18.2，所以添加的是reef仓库，我这里安装的是15.x所以是octopus仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./cephadm add-repo --release octopus</span><br><span class="line">./cephadm install</span><br></pre></td></tr></table></figure><h2 id="初始化集群"><a href="#初始化集群" class="headerlink" title="初始化集群"></a>初始化集群</h2><p>在所有节点上完成cephadm安装后，安装ceph-common</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install ceph-common</span><br></pre></td></tr></table></figure><p>在<strong>主节点</strong>初始化集群，初始化方式是使用docker方式，所以提前装好docker-ce，ceph-common中应该有docker依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cephadm bootstrap --mon-ip 192.168.28.138</span><br></pre></td></tr></table></figure><p>初始化完成后，终端会打印默认密码，进入<code>https://worker1:8443/</code>，<strong>记得先更改初始密码</strong>。</p><p>执行<code>ceph -s</code>能查看集群信息说明初始化完成。记得保存下cluster.id，后续对接k8s需要使用。没记也不要紧，后面应该很多地方都可以看到。</p><h2 id="添加子节点"><a href="#添加子节点" class="headerlink" title="添加子节点"></a>添加子节点</h2><p>将主节点的ceph配置文件和key文件传到子节点上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scp /etc/ceph/ceph.conf root@worker2:/etc/ceph/</span><br><span class="line">scp /etc/ceph/ceph.client.admin.keyring root@worker2:/etc/ceph/</span><br><span class="line"></span><br><span class="line">scp /etc/ceph/ceph.conf root@worker3:/etc/ceph/</span><br><span class="line">scp /etc/ceph/ceph.client.admin.keyring root@worker3:/etc/ceph/</span><br></pre></td></tr></table></figure><p>添加host节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ceph orch host add worker2</span><br><span class="line">ceph orch host add worker3</span><br></pre></td></tr></table></figure><p>在所有节点部署mon服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ceph orch daemon add mon worker2:192.168.28.139</span><br><span class="line">ceph orch daemon add mon worker3:192.168.28.140</span><br></pre></td></tr></table></figure><p>在另外一个节点部署mgr服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph orch daemon add mgr worker2:192.168.28.139</span><br></pre></td></tr></table></figure><p>这里我也尝试把节点3也部署mgr，但是发现部署后主节点的mgr服务会被取消，不知道啥原因，先不管了，影响也不大。</p><h2 id="添加osd"><a href="#添加osd" class="headerlink" title="添加osd"></a>添加osd</h2><p>osd对应的就是硬盘，一个osd服务管理一个硬盘，这里我们在worker2和3上分别额外挂载两个硬盘。在VMware虚拟机设置中添加硬盘即可，在系统中不需要任何分区操作。   </p><p>添加完成后重启系统。</p><p>在2，3节点上执行<code>fdisk -l</code>命令，能看见挂载的硬盘，一般对于虚拟机来说，/dev/sdb和/dev/sdc是新加的两块硬盘。</p><p>在主节点执行命令，查看可用设备</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph orch device ls</span><br></pre></td></tr></table></figure><p>执行以下命令，让ceph将所有可用设备用作osd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph orch apply osd --all-available-devices</span><br></pre></td></tr></table></figure><p>也可手动部署osd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph orch daemon add osd worker2:/dev/sdb</span><br></pre></td></tr></table></figure><p>至此，ceph集群搭建完成。</p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h3 id="部署osd时，提示可能已经被使用。"><a href="#部署osd时，提示可能已经被使用。" class="headerlink" title="部署osd时，提示可能已经被使用。"></a>部署osd时，提示可能已经被使用。</h3><p>可能之前挂载的时候，没有卸载干净，需要重新清理lv(Logical Volume)，ceph正是使用lv技术来管理磁盘的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lvdisplay</span><br><span class="line">// 根据display找到对应磁盘</span><br><span class="line">lvremove /dev/ceph-e0242907-2693-4d51-a454-18aa38145020/osd-block-245236cd-4902-4973-b306-baa61bb16d1b</span><br><span class="line">// 记得重启</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h3 id="yum代理"><a href="#yum代理" class="headerlink" title="yum代理"></a>yum代理</h3><p>export的代理对yum不起作用，需要手动配置下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.conf</span><br><span class="line">// 在空行添加</span><br><span class="line">proxy=http://192.168.28.1:10801</span><br></pre></td></tr></table></figure><h3 id="osd大量离线"><a href="#osd大量离线" class="headerlink" title="osd大量离线"></a>osd大量离线</h3><p>当启用了mds后，osd会定时与mds服务进行同步，此时如果时间异常会导致同步失败，一般情况下是mds服务或osd所在节点的时间不正确，用ntp同步一下时间即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;上篇讲了k8s集群的搭建，这篇接着来搭建ceph集群。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以下内容来自&lt;a href=&quot;https
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="架构" scheme="https://re0.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="运维" scheme="https://re0.top/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="从0.5开始的运维架构之路" scheme="https://re0.top/tags/%E4%BB%8E0-5%E5%BC%80%E5%A7%8B%E7%9A%84%E8%BF%90%E7%BB%B4%E6%9E%B6%E6%9E%84%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>【架构之路1】k8s集群搭建</title>
    <link href="https://re0.top/2024/07/10/devops1/"/>
    <id>https://re0.top/2024/07/10/devops1/</id>
    <published>2024-07-10T15:30:00.000Z</published>
    <updated>2024-07-10T14:50:06.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>k8s集群是目前中大型公司的首选微服务部署方案，包括高可用，便捷性等等，但是也有人建议中小厂最好不用k8s去部署，因为这意味着你需要有一个专门的精通k8s的运维工程师去解决各种大大小小的问题，但说实话不难，你遇到的问题，99%都能在网上搜索到。  </p><p>所以我个人的观点是能用则用，当然如果是裸金属服务器的话，成本那就比较高了，但是如果你是用虚拟化技术来创建集群的话成本就小一点。  </p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>废话少说，开始干！</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>以我本次的demo为例，环境准备3台centOS7虚拟机。  </p><p>配置好国内源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">// 没有wget用curl</span><br><span class="line">curl -o Cenos-7.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure><p>安装ntp，同步时钟</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install ntp</span><br><span class="line">systemctl <span class="built_in">enable</span> ntpd</span><br><span class="line">// 手动同步时钟</span><br><span class="line">ntpdate ntp1.aliyun.com</span><br><span class="line">// 需要持续可用的话需要配合cron做定时同步</span><br></pre></td></tr></table></figure><p>关闭防火墙！！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><p>安装新一点的docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker docker-common docker-selinux docker-engine</span><br><span class="line">// 添加docker仓库</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum install docker-ce</span><br></pre></td></tr></table></figure><p>修改三台虚拟机的hostname分别为worker1, worker2, worker3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hostname</span><br><span class="line">worker1</span><br></pre></td></tr></table></figure><p>固定三台虚拟机的ip地址,子网根据vmnet8所分配的，你也可以自行更改。ip分别为192.168.28.138，192.168.28.139，192.168.28.140.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// vmware的虚拟机网卡基本上都叫ens33</span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">修改BOOTPROTO=static和ONBOOT=yes</span><br><span class="line">增加</span><br><span class="line">IPADDR=192.168.28.138</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">NETWORK=192.168.28.0</span><br><span class="line">BROADCAST=192.168.28.255</span><br><span class="line">DNS1=192.168.28.2</span><br><span class="line">GATEWAY=192.168.28.2</span><br></pre></td></tr></table></figure><p>增加dns映射，三台都加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line">192.168.28.138 worker1</span><br><span class="line">192.168.28.139 worker2</span><br><span class="line">192.168.28.140 worker3</span><br></pre></td></tr></table></figure><p>由于目前国内的网络环境，不管是rpm包还是docker镜像，都有可能拉取不下来，强烈建议在本机开放允许局域网的连接来使用飞机。在需要时可能会用到。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&quot;https://192.168.28.1:10801/&quot;</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&quot;http://192.168.28.1:10801/&quot;</span></span><br><span class="line"><span class="built_in">export</span> no_proxy=<span class="string">&quot;localhost,127.0.0.1,.example.com,192.168.28.0/16&quot;</span></span><br></pre></td></tr></table></figure><p>配置docker代理或镜像源。镜像源我就不配置了，目前国内源懂得都懂，这里介绍配置docker pull使用代理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/systemd/system/docker.service.d</span><br><span class="line">vi /etc/systemd/system/docker.service.d/proxy.conf</span><br><span class="line">// 把以下代理内容写进去，注意不需要写http(s)协议</span><br><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;HTTP_PROXY=192.168.28.1:10801&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;HTTPS_PROXY=192.168.28.1:10801&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;NO_PROXY=localhost,127.0.0.1,.example.com,192.168.28.0/16&quot;</span></span><br></pre></td></tr></table></figure><p>重启下docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line">docker info出现HTTP Proxy说明配置完成</span><br></pre></td></tr></table></figure><p>至此准备工作就此完成！</p><h2 id="创建k8s集群"><a href="#创建k8s集群" class="headerlink" title="创建k8s集群"></a>创建k8s集群</h2><p>这里我推荐使用<a href="https://docs.k3s.io/zh/">k3s</a>, 一个轻量的k8s集群，没有etcd作为存储，因此如果需要使用在生产环境中建议配置etcd，这里我们采取默认脚本来安装，十分简单。</p><p>先在终端中将代理export下，然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=<span class="string">&quot;--docker&quot;</span> sh -</span><br></pre></td></tr></table></figure><p>这里我们依旧采用docker作为容器运行时。</p><p>安装完成后kubeconfig文件被放在<code>/etc/rancher/k3s/k3s.yaml</code>中。</p><p>接着执行<code>cat /var/lib/rancher/k3s/server/node-toke</code>获取主节点的token。然后在其他节点上执行（也是记得export）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sfL https://get.k3s.io | K3S_URL=https://worker1:6443 K3S_TOKEN=获取的token INSTALL_K3S_EXEC=<span class="string">&quot;--docker&quot;</span> sh -</span><br></pre></td></tr></table></figure><p>子节点全部启动agent成功后，在主节点执行<code>kubectl get nodes</code>看见其他节点就说明安装完成了，前后不超过5分钟。</p><p>当然此时子节点还没有标签，我们可以打上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl label node worker2 node-role.kubernetes.io/worker=worker</span><br><span class="line">kubectl label node worker3 node-role.kubernetes.io/worker=worker</span><br><span class="line">// 当然主节点worker1也可以标上工作节点</span><br><span class="line">kubectl label node worker1 node-role.kubernetes.io/worker=worker</span><br></pre></td></tr></table></figure><p>这里还有个小点，就是当终端中有那些代理的变量时，这些变量会写入到<code>/etc/systemd/system/k3s.service.env</code>，作为后续kubectl的使用代理，如果没有配置no_proxy需要加上，当然你也可以去掉代理，然后重启k3s服务，否则例如<code>kubectl logs</code>可能会提示代理出错。可以参考官方<a href="https://docs.k3s.io/zh/advanced#%E9%85%8D%E7%BD%AE-http-%E4%BB%A3%E7%90%86">wiki</a>.</p><h2 id="安装kubepi面板"><a href="#安装kubepi面板" class="headerlink" title="安装kubepi面板"></a>安装kubepi面板</h2><p><a href="https://github.com/1Panel-dev/KubePi">kubepi</a>是一个开源的k8s面板，个人觉得挺好用的，装一个可以清楚看到容器的运行状态，不用再去一个个敲命令。<a href="https://github.com/1Panel-dev/KubePi/wiki/2%E3%80%81%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2">官方wiki</a>中也有详细的部署教程，但是持久化部署官方用的nfs，集群刚搭建起来怎么会有呢，因此我稍微改了一下，把存储放到本地了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">vim</span> <span class="string">kubepi-pvc.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubepi-user</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubepi-user</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kubepi-user</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">local-storage</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">kubernetes.io/no-provisioner</span></span><br><span class="line"><span class="attr">volumeBindingMode:</span> <span class="string">WaitForFirstConsumer</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubepi-pv</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">kubepi</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">local-storage</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">10Gi</span></span><br><span class="line">  <span class="attr">volumeMode:</span> <span class="string">Filesystem</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Delete</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/home/k8s/kubepi</span></span><br><span class="line">  <span class="attr">nodeAffinity:</span></span><br><span class="line">    <span class="attr">required:</span></span><br><span class="line">      <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line">          <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">          <span class="attr">values:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">worker1</span></span><br><span class="line">        </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubepi-pv-claim</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">kubepi</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">local-storage</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">10Gi</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubepi</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">kubepi</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubepi</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">kubepi</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/name:</span> <span class="string">kubepi</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/name:</span> <span class="string">kubepi</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kubepi</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">kubeoperator/kubepi-server:latest</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kubepi-persistent-storage</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/var/lib/kubepi</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kubepi-persistent-storage</span></span><br><span class="line">          <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">            <span class="attr">claimName:</span> <span class="string">kubepi-pv-claim</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要修改的是节点亲和性相关，由于local-path使用的是本机存储需要指定主机，因此pv创建需要有节点条件，修改matchExpressions的[0].value改为你想部署的节点hostname即可。然后<code>/home/k8s/kubepi</code>可以提前创建目录出来，不确定k8s会不会自动创建。</p><p>接下来就是获取nodePort暴露的端口，这个官方有。</p><p><code>export NODE_PORT=$(kubectl -n kube-system get services kubepi -o jsonpath=&quot;&#123;.spec.ports[0].nodePort&#125;&quot;)</code></p><p>由于上述我们改了节点亲和性，因此访问的地址就是<code>http://worker1:$NODE_PORT</code>，账号为admin，密码为kubepi</p><p>当然我们也可以固定下来端口，例如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubepi</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">31779</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">kubepi</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>至此就完成了一个简单的三节点k8s集群的搭建了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;k8s集群是目前中大型公司的首选微服务部署方案，包括高可用，便捷性等等，但是也有人建议中小厂最好不用k8s去部署，因为这意味着你需要有一个专
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="架构" scheme="https://re0.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="运维" scheme="https://re0.top/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="从0.5开始的运维架构之路" scheme="https://re0.top/tags/%E4%BB%8E0-5%E5%BC%80%E5%A7%8B%E7%9A%84%E8%BF%90%E7%BB%B4%E6%9E%B6%E6%9E%84%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>从0.5开始的运维架构之路0</title>
    <link href="https://re0.top/2024/07/10/devops0/"/>
    <id>https://re0.top/2024/07/10/devops0/</id>
    <published>2024-07-10T12:00:00.000Z</published>
    <updated>2024-07-10T14:42:48.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="随便聊聊"><a href="#随便聊聊" class="headerlink" title="随便聊聊"></a>随便聊聊</h1><p>最近离职了无聊想写一个系统，用于在k8s上部署应用，也是我们内部在用的一个部署平台，想着通过这个，把一些技术都给用上。没想到没写多久就遇到困难了，在想ceph是如何挂载到k8s上，运维老师又是如何把数据从原先的docker swarm迁移到k8s上。以上种种，在我写代码时暴露出来，因此我花了很久的时间，学习与踩坑，从k8s环境搭建，到ceph集群搭建，再到存储挂载。  </p><p>网上的教程五花八门，有的太老，有的根本用不了，包括ceph-csi驱动官方在readme中也写的不够详细，因此我决定自己写文章。  </p><p>至于为什么是从0.5开始，因为我自认为懂点架构知识，虽然可能不多，但是姑且从0.5开始吧。  </p><p>这个系列会记录我在运维，架构上的一些问题和解决方案，也想持续的把它写下去，我也不知道这次能坚持多久，也许下一份工作开始就被遗忘了，也许是转行的那天，但是此时我是想记录的，那就遵从心意努力前进吧!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;随便聊聊&quot;&gt;&lt;a href=&quot;#随便聊聊&quot; class=&quot;headerlink&quot; title=&quot;随便聊聊&quot;&gt;&lt;/a&gt;随便聊聊&lt;/h1&gt;&lt;p&gt;最近离职了无聊想写一个系统，用于在k8s上部署应用，也是我们内部在用的一个部署平台，想着通过这个，把一些技术都给用上。没想到
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="架构" scheme="https://re0.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="运维" scheme="https://re0.top/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="从0.5开始的运维架构之路" scheme="https://re0.top/tags/%E4%BB%8E0-5%E5%BC%80%E5%A7%8B%E7%9A%84%E8%BF%90%E7%BB%B4%E6%9E%B6%E6%9E%84%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>2024面试复盘2</title>
    <link href="https://re0.top/2024/06/24/2024-06-24-replay/"/>
    <id>https://re0.top/2024/06/24/2024-06-24-replay/</id>
    <published>2024-06-24T15:00:00.000Z</published>
    <updated>2024-06-25T05:21:34.515Z</updated>
    
    <content type="html"><![CDATA[<h1 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h1><h2 id="快排原理，时间空间复杂度"><a href="#快排原理，时间空间复杂度" class="headerlink" title="快排原理，时间空间复杂度"></a>快排原理，时间空间复杂度</h2><p>原理  </p><ol><li><p>选择基准元素</p></li><li><p>分区操作（Partition）。通过一趟排序将待排序的数据分割成独立的两部分，其中一部分的所有数据都比另一部分的所有数据要小。这个过程称为分区操作。</p></li><li><p>递归排序。递归地（recursive）把小于基准值元素的子数组和大于基准值元素的子数组排序。</p></li><li><p>合并。通常，这个步骤并不需要实际的合并操作，因为在分解和递归排序阶段已经完成了排序。</p></li></ol><p>  时间复杂度O(nlogn)。空间复杂度O(logn)。<br>  代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">log.info(<span class="string">&quot;开始排从【arr[&#123;&#125;]】到【arr[&#123;&#125;]】数据&quot;</span>, left, right);</span><br><span class="line"><span class="keyword">int</span> pivot = partition(arr, left, right);</span><br><span class="line">log.info(<span class="string">&quot;返回的基准位置是：&#123;&#125;,分区排序后的结果：&#123;&#125;&quot;</span>, pivot, arr);</span><br><span class="line"><span class="comment">// 基准元素一定比左边的数大，所以左边分区最大值是：pivot - 1，分区范围是[left, pivot - 1]</span></span><br><span class="line">quickSort(arr, left, pivot - <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 基准元素一定比右边的数小，所以右边分区最小值是：pivot + 1，分区范围是[pivot + 1, right]</span></span><br><span class="line">quickSort(arr, pivot + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 定义基准元素</span></span><br><span class="line"><span class="keyword">int</span> pivotValue = arr[left];</span><br><span class="line"><span class="comment">// 遍历（条件就是分区左边索引小于右边索引）</span></span><br><span class="line"><span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line"><span class="comment">// 从右边right开始遍历，找到一个数比基准数小</span></span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; arr[right] &gt;= pivotValue) &#123;</span><br><span class="line"><span class="comment">// 未找到，继续往前找</span></span><br><span class="line">right--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找到了，则把找到小值放到此时左边索引的位置</span></span><br><span class="line"><span class="comment">// 第一次进入时,基准元素已存放到临时值pivotValue了，第一次就相当于放到基准位置了，同时，arr[right]也腾出了一个位置</span></span><br><span class="line">arr[left] = arr[right];</span><br><span class="line"><span class="comment">// 从左边left开始遍历，找到一个数比基准数大</span></span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; arr[left] &lt;= pivotValue) &#123;</span><br><span class="line"><span class="comment">// 未找到，继续往后找</span></span><br><span class="line">left++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找到了，则把找到大值放到此时右边索引的位置（也就是腾出的位置）</span></span><br><span class="line"><span class="comment">// 同时，arr[left]也腾出了一个位置</span></span><br><span class="line">arr[right] = arr[left];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// left等于right说明遍历结束了，把基准元素插入到腾出的位置，也就是arr[left]或者arr[right]</span></span><br><span class="line">arr[left] = pivotValue;</span><br><span class="line"><span class="comment">// 返回基准元素插入的位置</span></span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mysql-innodb索引的结构？"><a href="#mysql-innodb索引的结构？" class="headerlink" title="mysql innodb索引的结构？"></a>mysql innodb索引的结构？</h2><p>InnoDB使用B+树作为其索引结构的基础。</p><ul><li>聚簇索引<br>InnoDB的主键索引被称为聚簇索引。聚簇索引的特点是表中的数据行按照主键的顺序进行物理存储。这意味着主键查询非常快，因为数据库可以直接定位到数据行。聚簇索引的另一个优点是它可以有效地支持范围查询，因为数据行在磁盘上是连续存储的。  </li><li>二级索引<br>除了聚簇索引外，InnoDB还支持二级索引（也称为非聚簇索引）。二级索引的叶子节点包含相应的主键值，而不是实际的数据行。当通过二级索引查询数据时，InnoDB首先定位到二级索引的叶子节点，获取对应的主键值，然后再通过聚簇索引定位到实际的数据行。因此，相对于聚簇索引，二级索引的查询性能会有所降低。  </li></ul><h2 id="b-和b树的区别？"><a href="#b-和b树的区别？" class="headerlink" title="b+和b树的区别？"></a>b+和b树的区别？</h2><p>B树（B树、BTree、B-Tree都是同一个概念，都称为BTree），B树是一种多路自平衡搜索树，它类似普通的二叉树，但是B树允许每个节点有更多的子节点（二叉树一个节点下最多两个节点，而B树下一个节点可以有超过两个的节点），特点是：</p><ul><li>所有节点中即包含记录的索引key值和这条记录的所有数据，以及指向下一个节点的指针；</li><li>任何一条记录出现且只出现在一个节点中；</li><li>搜索可能在非叶子节点时就结束了（因为节点中包含这条记录的所有数据，查到某条记录可以直接返回）；</li></ul><p>B+树是对B树的升级，非叶子节点只存储索引列和下一个节点的指针（不再存储数据了），叶子节点存储索引列和数据以及下一个节点的指针（叶子节点是相连的），以现实中的树木比喻说明就是，BTree更加繁茂，而B+树相对精简<br>B+树相对于B树：</p><ul><li>B+树非叶子节点只存储索引键和指针，相对B树来讲可以存储更多的索引键，这样的话B+树的深度也会更低，一次性读入内存的索引键也会更多，IO的次数也会变少，查询效率更高</li><li>B+树的所有数据都存储在叶子节点上，如果要取数据的话，那么每次查询IO的次数都是相同的，也就是说查询是稳定的</li><li>B+树叶子节点之间通过双向链表连接，可以很方便的进行范围查询 总结就是B+树比B树查询效率更高更稳定，而且方便范围查询。</li></ul><p>B+树相对于平衡二叉树或红黑树：</p><ul><li>平衡二叉树追求绝对平衡，条件比较苛刻，而红黑树是对平衡二叉树的弱实现，追求大致平衡，在与平衡二叉树的时间复杂度相差不大的情况下，保证每次插入最多只需要三次旋转就能达到平衡，实现起来也更为简单，然而不管是平衡二叉树还是红黑树它们的任一节点最多有两个子节点，假设使用平衡二叉树或红黑树作为索引结构，那么一个节点只能存储一个索引键和指针，在数据量非常大的情况下，平衡二叉树或红黑树的深度会变的更深，这就意味着查询需要更多的IO，这显然不能被接受。</li></ul><h2 id="可重复读会什么情况？实现原理"><a href="#可重复读会什么情况？实现原理" class="headerlink" title="可重复读会什么情况？实现原理"></a>可重复读会什么情况？实现原理</h2><p>会有幻读的情况。<br>针对快照读（普通 select 语句），是通过 MVCC 方式解决了幻读，因为可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，即使中途有其他事务插入了一条数据，是查询不出来这条数据的，所以就很好了避免幻读问题。<br>针对当前读（select … for update 等语句），是通过 next-key lock（记录锁+间隙锁）方式解决了幻读，因为当执行 select … for update 语句的时候，会加上 next-key lock，如果有其他事务在 next-key lock 锁范围内插入了一条记录，那么这个插入语句就会被阻塞，无法成功插入，所以就很好了避免幻读问题。<br>这两个解决方案是很大程度上解决了幻读现象，但是还是有个别的情况造成的幻读现象是无法解决的。</p><ul><li>对于快照读， MVCC 并不能完全避免幻读现象。因为当事务 A 更新了一条事务 B 插入的记录，那么事务 A 前后两次查询的记录条目就不一样了，所以就发生幻读。</li><li>对于当前读，如果事务开启后，并没有执行当前读，而是先快照读，然后这期间如果其他事务插入了一条记录，那么事务后续使用当前读进行查询的时候，就会发现两次查询的记录条目就不一样了，所以就发生幻读。  </li></ul><h2 id="并发包锁的实现原理，AQS原理，数据结构？"><a href="#并发包锁的实现原理，AQS原理，数据结构？" class="headerlink" title="并发包锁的实现原理，AQS原理，数据结构？"></a>并发包锁的实现原理，AQS原理，数据结构？</h2><p>Java中的大部分同步类（Lock、Semaphore、ReentrantLock等）都是基于AbstractQueuedSynchronizer（简称为AQS）实现的。</p><p>AQS核心思想是，如果被请求的共享资源空闲，那么就将当前请求资源的线程设置为有效的工作线程，将共享资源设置为锁定状态；如果共享资源被占用，就需要一定的阻塞等待唤醒机制来保证锁分配。这个机制主要用的是CLH队列的变体实现的，将暂时获取不到锁的线程加入到队列中。</p><p>AQS使用一个Volatile的int类型的成员变量来表示同步状态，通过内置的FIFO队列来完成资源获取的排队工作，通过CAS完成对State值的修改。<br>这里引用下美团的图片：  </p><p><img src="https://cdn.re0.top/blog/replay/27605d483e8935da683a93be015713f331378.png" alt="img"><br><img src="https://cdn.re0.top/blog/replay/3f1e1a44f5b7d77000ba4f9476189b2e32806.png" alt="img"></p><p>具体可以参考<a href="https://tech.meituan.com/2019/12/05/aqs-theory-and-apply.html">文章</a>.</p><h2 id="synchronized关键字实现方式？"><a href="#synchronized关键字实现方式？" class="headerlink" title="synchronized关键字实现方式？"></a>synchronized关键字实现方式？</h2><p>Monitorenter和Monitorexit指令，会让对象在执行时，使其锁计数器加1或者减1。每一个对象在同一时间只与一个monitor(锁)相关联，而一个monitor在同一时间只能被一个线程获得，一个对象在尝试获得与这个对象相关联的Monitor锁的所有权的时候，monitorenter指令会发生如下3中情况之一：</p><ul><li>monitor计数器为0，意味着目前还没有被获得，那这个线程就会立刻获得然后把锁计数器+1，一旦+1，别的线程再想获取，就需要等待</li><li>如果这个monitor已经拿到了这个锁的所有权，又重入了这把锁，那锁计数器就会累加，变成2，并且随着重入的次数，会一直累加</li><li>这把锁已经被别的线程获取了，等待锁释放</li></ul><p>JVM中monitorenter和monitorexit字节码依赖于底层的操作系统的Mutex Lock来实现的，但是由于使用Mutex Lock需要将当前线程挂起并从用户态切换到内核态来执行，这种切换的代价是非常昂贵的。<strong>不过在jdk1.6中对锁的实现引入了大量的优化，如锁粗化(Lock Coarsening)、锁消除(Lock Elimination)、轻量级锁(Lightweight Locking)、偏向锁(Biased Locking)、适应性自旋(Adaptive Spinning)等技术来减少锁操作的开销</strong>。</p><p><code>锁粗化(Lock Coarsening)</code>：也就是减少不必要的紧连在一起的unlock，lock操作，将多个连续的锁扩展成一个范围更大的锁。</p><p><code>锁消除(Lock Elimination)</code>：通过运行时JIT编译器的逃逸分析来消除一些没有在当前同步块以外被其他线程共享的数据的锁保护，通过逃逸分析也可以在线程本的Stack上进行对象空间的分配(同时还可以减少Heap上的垃圾收集开销)。</p><p><code>轻量级锁(Lightweight Locking)</code>：这种锁实现的背后基于这样一种假设，即在真实的情况下我们程序中的大部分同步代码一般都处于无锁竞争状态(即单线程执行环境)，在无锁竞争的情况下完全可以避免调用操作系统层面的重量级互斥锁，取而代之的是在monitorenter和monitorexit中只需要依靠一条CAS原子指令就可以完成锁的获取及释放。当存在锁竞争的情况下，执行CAS指令失败的线程将调用操作系统互斥锁进入到阻塞状态，当锁被释放的时候被唤醒(具体处理步骤下面详细讨论)。</p><p><code>偏向锁(Biased Locking)</code>：是为了在无锁竞争的情况下避免在锁获取过程中执行不必要的CAS原子指令，因为CAS原子指令虽然相对于重量级锁来说开销比较小但还是存在非常可观的本地延迟。</p><p><code>适应性自旋(Adaptive Spinning)</code>：当线程在获取轻量级锁的过程中执行CAS操作失败时，在进入与monitor相关联的操作系统重量级锁(mutex semaphore)前会进入忙等待(Spinning)然后再次尝试，当尝试一定的次数后如果仍然没有成功则调用与该monitor关联的semaphore(即互斥锁)进入到阻塞状态。</p><p>锁膨胀方向： 无锁 → 偏向锁 → 轻量级锁 → 重量级锁 (此过程是不可逆的)</p><table><thead><tr><th><strong>锁</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th><th><strong>使用场景</strong></th></tr></thead><tbody><tr><td>偏向锁</td><td>加锁和解锁不需要CAS操作，没有额外的性能消耗，和执行非同步方法相比仅存在纳秒级的差距</td><td>如果线程间存在锁竞争，会带来额外的锁撤销的消耗</td><td>适用于只有一个线程访问同步块的场景</td></tr><tr><td>轻量级锁</td><td>竞争的线程不会阻塞，提高了响应速度</td><td>如线程始终得不到锁竞争的线程，使用自旋会消耗CPU性能</td><td>追求响应时间，同步块执行速度非常快</td></tr><tr><td>重量级锁</td><td>线程竞争不适用自旋，不会消耗CPU</td><td>线程阻塞，响应时间缓慢，在多线程下，频繁的获取释放锁，会带来巨大的性能消耗</td><td>追求吞吐量，同步块执行速度较长</td></tr></tbody></table><h2 id="分布式锁的实现原理？setnx的缺点？watchdog的实现机制？"><a href="#分布式锁的实现原理？setnx的缺点？watchdog的实现机制？" class="headerlink" title="分布式锁的实现原理？setnx的缺点？watchdog的实现机制？"></a>分布式锁的实现原理？setnx的缺点？watchdog的实现机制？</h2><p>redis分布式锁主要依靠setnx实现。</p><p>redis在 2.6.12 版本开始，为 SET 命令增加一系列选项.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET key value[EX seconds][PX milliseconds][NX|XX]</span><br></pre></td></tr></table></figure><ul><li>EX seconds: 设定过期时间，单位为秒</li><li>PX milliseconds: 设定过期时间，单位为毫秒</li><li>NX: 仅当key不存在时设置值</li><li>XX: 仅当key存在时设置值</li></ul><p>缺点  </p><ul><li><strong>超时时间不好设置</strong>。如果锁的超时时间设置过长，会影响性能，如果设置的超时时间过短会保护不到共享资源。</li><li><strong>redis 主从复制模式中的数据是异步复制的，这样导致分布式锁的不可靠性</strong></li></ul><p>watchdog源码解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">RFuture&lt;Long&gt; <span class="title">tryAcquireAsync</span><span class="params">(<span class="keyword">long</span> waitTime, <span class="keyword">long</span> leaseTime, TimeUnit unit, <span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (leaseTime != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> tryLockInnerAsync(waitTime, leaseTime, unit, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当leaseTime = -1 时 启动 watch dog机制</span></span><br><span class="line">    RFuture&lt;Long&gt; ttlRemainingFuture = tryLockInnerAsync(waitTime,</span><br><span class="line">                                            commandExecutor.getConnectionManager().getCfg().getLockWatchdogTimeout(),</span><br><span class="line">                                            TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">    <span class="comment">//执行完lua脚本后的回调</span></span><br><span class="line">    ttlRemainingFuture.onComplete((ttlRemaining, e) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ttlRemaining == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// watch dog </span></span><br><span class="line">            scheduleExpirationRenewal(threadId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> ttlRemainingFuture;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scheduleExpirationRenewal</span><span class="params">(<span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">    ExpirationEntry entry = <span class="keyword">new</span> ExpirationEntry();</span><br><span class="line">    <span class="comment">//将线程放入缓存中</span></span><br><span class="line">    ExpirationEntry oldEntry = EXPIRATION_RENEWAL_MAP.putIfAbsent(getEntryName(), entry);</span><br><span class="line">    <span class="comment">//第二次获得锁后 不会进行延期操作</span></span><br><span class="line">    <span class="keyword">if</span> (oldEntry != <span class="keyword">null</span>) &#123;</span><br><span class="line">        oldEntry.addThreadId(threadId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        entry.addThreadId(threadId);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 第一次获得锁 延期操作</span></span><br><span class="line">        renewExpiration();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进入 renewExpiration()</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">renewExpiration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ExpirationEntry ee = EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class="line">    <span class="comment">//如果缓存不存在，那不再锁续期</span></span><br><span class="line">    <span class="keyword">if</span> (ee == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Timeout task = commandExecutor.getConnectionManager().newTimeout(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(Timeout timeout)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            ExpirationEntry ent = EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class="line">            <span class="keyword">if</span> (ent == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Long threadId = ent.getFirstThreadId();</span><br><span class="line">            <span class="keyword">if</span> (threadId == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//执行lua 进行续期</span></span><br><span class="line">            RFuture&lt;Boolean&gt; future = renewExpirationAsync(threadId);</span><br><span class="line">            future.onComplete((res, e) -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;Can&#x27;t update lock &quot;</span> + getName() + <span class="string">&quot; expiration&quot;</span>, e);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (res) &#123;</span><br><span class="line">                    <span class="comment">//延期成功，继续循环操作</span></span><br><span class="line">                    renewExpiration();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//每隔internalLockLeaseTime/3=10秒检查一次</span></span><br><span class="line">    &#125;, internalLockLeaseTime / <span class="number">3</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">    </span><br><span class="line">    ee.setTimeout(task);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//lua脚本 执行包装好的lua脚本进行key续期</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> RFuture&lt;Boolean&gt; <span class="title">renewExpirationAsync</span><span class="params">(<span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> evalWriteAsync(getName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,</span><br><span class="line">            <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;return 1; &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;return 0;&quot;</span>,</span><br><span class="line">            Collections.singletonList(getName()),</span><br><span class="line">            internalLockLeaseTime, getLockName(threadId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li> watch dog 在当前节点存活时每10s给分布式锁的key续期 30s；</li><li> watch dog 机制启动，且代码中没有释放锁操作时，watch dog 会不断的给锁续期；</li><li> 从可2得出，如果程序释放锁操作时因为异常没有被执行，那么锁无法被释放，所以释放锁操作一定要放到 finally {} 中；</li></ol><h1 id="随便聊聊"><a href="#随便聊聊" class="headerlink" title="随便聊聊"></a>随便聊聊</h1><p>不管是大小公司，都喜欢深挖项目中的一些细节啊改进啊之类的，聊着聊着我就对内部的项目产生了深深的怀疑，草台班子竟是我自己。   </p><p>其次都热衷于去讨论底层实现，对业务其实并不是特别关心。     </p><p>搞得我心态有点炸裂，但还是该学习就学习吧。慢慢来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;复盘&quot;&gt;&lt;a href=&quot;#复盘&quot; class=&quot;headerlink&quot; title=&quot;复盘&quot;&gt;&lt;/a&gt;复盘&lt;/h1&gt;&lt;h2 id=&quot;快排原理，时间空间复杂度&quot;&gt;&lt;a href=&quot;#快排原理，时间空间复杂度&quot; class=&quot;headerlink&quot; title=&quot;快
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="随想" scheme="https://re0.top/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="架构" scheme="https://re0.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>2024面试复盘1</title>
    <link href="https://re0.top/2024/06/23/2024-06-23-replay/"/>
    <id>https://re0.top/2024/06/23/2024-06-23-replay/</id>
    <published>2024-06-23T15:00:00.000Z</published>
    <updated>2024-06-23T15:17:37.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天又再一次面试了字节，在复习准备不足的情况下，我还是接受了面试邀请。<br>很遗憾又在二面挂了，三年前我也曾经面过字节的校园招聘，那时候也是在二面挂了。  </p><h1 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h1><h2 id="缓存穿透-缓存击穿"><a href="#缓存穿透-缓存击穿" class="headerlink" title="缓存穿透/缓存击穿"></a>缓存穿透/缓存击穿</h2><p>这两个概念面试的时候搞混了，还是没复习好，说实话接触的系统没能有这种场景。<br>缓存穿透指的是有大量请求获取<strong>既不在缓存中也不在数据库中的数据</strong>，会导致数据库压力增大，这种情况一般是黑客在攻击或者数据被误删除了，相应的解决方案有限制非法请求，缓存控制或者默认值，使用布隆过滤器判断数据是否存在。<br>缓存击穿指的是<strong>一些热点数据的过期，很容易导致大量请求到db上。</strong>解决方案一是加互斥锁或者分布式锁去更新缓存，没能获取的锁的返回空置或默认值，二是不给热点数据设置过期时间，由后台去统一更新缓存。  </p><h2 id="redis大key的解决方案。"><a href="#redis大key的解决方案。" class="headerlink" title="redis大key的解决方案。"></a>redis大key的解决方案。</h2><p>大key指的是value大小超过一定阈值的key。这个阈值根据系统可能指标是不同的。大key可能导致的问题可能有一是数据倾斜，如在redis集群里，大key所在的节点上内存占用率过高。二是服务器资源耗费比较严重，包括网络带宽CPU和内存。三就是redis是单线程的会导致阻塞。<br>而解决方案有一是规范使用，从业务上断绝大key，如拆分存储，考虑使用数据库等。二是监控报警和强制删除。三是对大key进行处理，如果value是string，那么可以使用压缩算法进行压缩，如果还是比较大，拆分数据，使用mget获取数据；如果value是list/set等集合，那么可以根据规则进行分片，即拆分key，不同元素计算hash后分到不同的key中，比如productList1，productList2等。</p><h2 id="rabbitmq如何保证消息的可靠性，不丢失。"><a href="#rabbitmq如何保证消息的可靠性，不丢失。" class="headerlink" title="rabbitmq如何保证消息的可靠性，不丢失。"></a>rabbitmq如何保证消息的可靠性，不丢失。</h2><p>首先明确消息的传递阶段有哪些。一是从生产者到rabbmitmq。二是从exchange到queue。三是未持久化消息导致意外丢失。四是消费者消费异常。下面一个个来分析。  </p><ol><li>生产者到mq。rabbitmq提供了两种机制去保证生产者的消息到达了服务。一是使用事务</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class RabbitMQConfig &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 配置事务管理器</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public RabbitTransactionManager transactionManager(ConnectionFactory connectionFactory) &#123;</span><br><span class="line">        return new RabbitTransactionManager(connectionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class RabbitMQServiceImpl &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    @Transactional // 事务注解</span><br><span class="line">    public void sendMessage() &#123;</span><br><span class="line">        // 开启事务</span><br><span class="line">        rabbitTemplate.setChannelTransacted(true);</span><br><span class="line">        // 发送消息</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.Direct_Exchange, routingKey, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用事务去确认发送消息成功是一个同步操作，会阻塞等待mq应答。<br>第二种方案就是使用发送方确认机制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    publisher-confirm-type: correlated  # 开启发送方确认机制</span><br><span class="line"></span><br><span class="line">none：表示禁用发送方确认机制</span><br><span class="line">correlated：表示开启发送方确认机制</span><br><span class="line">simple：表示开启发送方确认机制，并支持 waitForConfirms() 和 waitForConfirmsOrDie() 的调用。</span><br></pre></td></tr></table></figure><p>simple是串行的应答，与事务机制一样性能较差。这里主要讨论correlated。可以通过setConfirmCallback去实现异步confirm 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class RabbitMQServiceImpl &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void sendMessage() &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.Direct_Exchange, routingKey, message);</span><br><span class="line">        rabbitTemplate.setConfirmCallback(new RabbitTemplate.ConfirmCallback() &#123;</span><br><span class="line">            /**</span><br><span class="line">             * MQ确认回调方法</span><br><span class="line">             * @param correlationData 消息的唯一标识</span><br><span class="line">             * @param ack 消息是否成功收到</span><br><span class="line">             * @param cause 失败原因</span><br><span class="line">             */</span><br><span class="line">            @Override</span><br><span class="line">            public void confirm(CorrelationData correlationData, boolean ack, String cause) &#123;</span><br><span class="line">                // 记录日志</span><br><span class="line">                log.info(&quot;ConfirmCallback...correlationData[&quot;+correlationData+&quot;]==&gt;ack:[&quot;+ack+&quot;]==&gt;cause:[&quot;+cause+&quot;]&quot;);</span><br><span class="line">                if (!ack) &#123;</span><br><span class="line">                    // 出错处理</span><br><span class="line">                    ...</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>exchange到queue投递失败。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    publisher-confirm-type: correlated  # 开启发送方确认机制</span><br><span class="line">    publisher-returns: true   # 开启消息返回</span><br><span class="line">    template:</span><br><span class="line">      mandatory: true     # 消息投递失败返回客户端</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>mandatory 分为 true 失败后返回客户端 和 false 失败后自动删除两种策略。通过调用 setReturnCallback() 方法设置路由失败后的回调方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class RabbitMQServiceImpl &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void sendMessage() &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.Direct_Exchange, routingKey, message);</span><br><span class="line"></span><br><span class="line">        rabbitTemplate.setConfirmCallback(new RabbitTemplate.ConfirmCallback() &#123;</span><br><span class="line">  </span><br><span class="line">            @Override</span><br><span class="line">            public void confirm(CorrelationData correlationData, boolean ack, String cause) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        // 设置路由失败回调方法</span><br><span class="line">        rabbitTemplate.setReturnCallback(new RabbitTemplate.ReturnCallback() &#123;</span><br><span class="line">            /**</span><br><span class="line">             * MQ没有将消息投递给指定的队列回调方法</span><br><span class="line">             * @param message 投递失败的消息详细信息</span><br><span class="line">             * @param replyCode 回复的状态码</span><br><span class="line">             * @param replyText 回复的文本内容</span><br><span class="line">             * @param exchange 消息发给哪个交换机</span><br><span class="line">             * @param routingKey 消息用哪个路邮键</span><br><span class="line">             */</span><br><span class="line">            @Override</span><br><span class="line">            public void returnedMessage(Message message, int replyCode, String replyText, String exchange, String routingKey) &#123;</span><br><span class="line">                // 记录日志</span><br><span class="line">                log.info(&quot;Fail Message[&quot;+message+&quot;]==&gt;replyCode[&quot;+replyCode+&quot;]&quot; +&quot;==&gt;replyText[&quot;+replyText+&quot;]==&gt;exchange[&quot;+exchange+&quot;]==&gt;routingKey[&quot;+routingKey+&quot;]&quot;);</span><br><span class="line">                // 出错处理</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>持久化消息。rabbitmq支持将消息持久化保证服务异常后可恢复。在定义queue和exchange时就可以指定队列和交换机的持久化参数。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public Queue queue() &#123;</span><br><span class="line">    // 四个参数：name（队列名）、durable（持久化）、 exclusive（独占）、autoDelete（自动删除）</span><br><span class="line">    return new Queue(MESSAGE_QUEUE, true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public DirectExchange exchange() &#123;</span><br><span class="line">    // 四个参数：name（交换机名）、durable（持久化）、autoDelete（自动删除）、arguments（额外参数）</span><br><span class="line">    return new DirectExchange(Direct_Exchange, true, false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于消息持久化，可以在发送时指定消息类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Message message = MessageBuilder.withBody(&quot;test&quot;.getBytes(StandardCharsets.UTF_8)).setDeliveryMode(MessageDeliveryMode.PERSISTENT).build();</span><br><span class="line">rabbitTemplate.convertAndSend(RabbitMQConfig.Direct_Exchange, routingKey, message);</span><br></pre></td></tr></table></figure><p>因此如果需要持久化，必须交换机，队列，消息都进行持久化，否则该丢失的还是会丢失。</p><ol start="4"><li>保证消费者消费的消息不丢失。rabbitmq也提供了消费者确认机制感知消费者是否消费成功。消费成功后才删除消息，否则会继续投递。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    listener:</span><br><span class="line">      simple:</span><br><span class="line">        acknowledge-mode: manual</span><br></pre></td></tr></table></figure><p>默认情况下acknowledge-mode的参数是auto，即自动确认，一般情况下使用@RabbitListener注解的方法没有抛出异常，则会自动进行确认。可以结合springboot中提供的retry来实现消息重试策略。<br>注意这里重试并不是mq重新发送了消息，仅仅是消费者内部进行的重试，换句话说就是重试跟mq没有任何关系；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    listener:</span><br><span class="line">      simple:</span><br><span class="line">        acknowledge-mode: auto  # 开启自动确认消费机制</span><br><span class="line">        retry:</span><br><span class="line">          enabled: true # 开启消费者失败重试</span><br><span class="line">          initial-interval: 5000ms # 初始失败等待时长为5秒</span><br><span class="line">          multiplier: 1  # 失败的等待时长倍数（下次等待时长 = multiplier * 上次等待时间）</span><br><span class="line">          max-attempts: 3 # 最大重试次数</span><br><span class="line">          stateless: true # true无状态；false有状态（如果业务中包含事务，这里改为false）</span><br></pre></td></tr></table></figure><p>这里重试次数达到上限后，会被自动ack。如果存在RepublishMessageRecoverer那么会被投递到指定交换机。<br>接着来讲讲手动ack。其实就是做basicAck和basicNack，其中basicNack是可以指定是否返回队列的，需要注意的是，如果requeue了，那么很大概率会出现消息重复投递又再次入队，会影响其他正常的消息消费。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@RabbitListener(queues = RabbitMQConfig.MESSAGE_QUEUE)</span><br><span class="line">public void onMessage(Message message, Channel channel) &#123;</span><br><span class="line">    long deliveryTag = message.getMessageProperties().getDeliveryTag();</span><br><span class="line">    // 解析消息</span><br><span class="line">    byte[] body = message.getBody();</span><br><span class="line">    ...</span><br><span class="line">    try &#123;</span><br><span class="line">        // 业务处理</span><br><span class="line"></span><br><span class="line">        // 手动确认</span><br><span class="line">        channel.basicAck(deliveryTag, false);</span><br><span class="line">    &#125;catch (Exception e) &#123;</span><br><span class="line">        // 记录日志</span><br><span class="line">        log.info(&quot;出现异常：&#123;&#125;&quot;, e.getMessage());</span><br><span class="line">        try &#123;</span><br><span class="line">            channel.basicNack(deliveryTag, false, false);</span><br><span class="line">        &#125; catch (IOException ex) &#123;</span><br><span class="line">            log.info(&quot;nack消息异常&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即便有了以上方案，其实也无法保证消息100%不丢失，最好的方案还是消息落库，再加消息补偿的机制去保证消息的100%正常处理。</p><h2 id="rabbitmq的事务消息。"><a href="#rabbitmq的事务消息。" class="headerlink" title="rabbitmq的事务消息。"></a>rabbitmq的事务消息。</h2><p>rabbitmq的事务我没有接触过，所以直接就回答不清楚，仔细一查结果还真有。<br>它的事务在上一个问题中也提到过，主要是用在生产者消息投递的确认上，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    channel.txSelect();</span><br><span class="line">    channel.basicPublish(exchange, routingKey, MessageProperties.PERSISTENT_TEXT_PLAIN, msg.getBytes());</span><br><span class="line">    int result = 1 / 0;</span><br><span class="line">    channel.txCommit();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    channel.txRollback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码和3中的rabbitTemplate.setChannelTransacted(true)是一样的，aop会自动去txSelect和txCommit。<br>由此我们可以知道，rabbitmq的事务消息其实是作为生产者发送确认来使用的，它的作用在于可以先往mq中投递消息，再根据本地事务的结果去决定mq消息是否回滚，同时也保证了生产者投递消息的可靠性。但其实相较于rocketmq它少了一个消息回查的机制。可以参考<a href="https://rocketmq.apache.org/zh/docs/featureBehavior/04transactionmessage/">rocketmq文档</a>。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>系统复杂度主要体现在哪些地方。<br>对现有系统有哪些优化空间。<br>这两个问题我会后面写文章单独去聊聊简历上的项目存在什么问题。</p><h1 id="随便聊聊"><a href="#随便聊聊" class="headerlink" title="随便聊聊"></a>随便聊聊</h1><p>我其实很不解，一度陷入自我怀疑，难道我三年来真的没长进吗？不，我想不是的。<br>作为一名测试开发，对系统的理解很难同大厂的研发去交流，也许测开真的是测试领域？！我对系统的架构，使用，未来展望上不能说没有，只能说少之又少！<br>我自认为良好的一个系统，在面试官眼中可能漏洞百出。<br>我也许对开发的认知有些偏离了，在海康的这三年，磨灭了自己些许的钻研心，每天就重复性工作，排查问题，技术支持。<br>反思了一下，已经很久了，我对技术的钻研只停留在使用，而且是简单使用。并且与业务结合已经是去年的事了。<br>但幸运的是，我已经离开了，去尝试不敢打破的规则和生活。尽管可能非常难，实际上确实很难，但总体上我还是觉得是庆幸的。<br>回到刚开始的问题，我这几年真的没长进吗？我想不是的，我了解一个系统从设计到开发再到运维的全过程，尽管这些长进可能相对于开发岗是微小的，或者说相较于大厂的应用只是个弟弟。  但我愿意相信这些知识有一天能起到真正的作用。<br>我其实想过自己是否真正适合这一行，我自认为比上不足比下有余，当然同事朋友老是捧杀我应该去更高的平台拿更高的工资，但我想去冲但是能力和胆量又不够。<br>我不知道我除了代码还能做些什么，迷茫啊，但是人生就是这样，人一辈子都是在迷茫中度过的。<br>今天不如意没关系，明天太阳也会照常升起。人生苦短，慢慢加油吧。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;今天又再一次面试了字节，在复习准备不足的情况下，我还是接受了面试邀请。&lt;br&gt;很遗憾又在二面挂了，三年前我也曾经面过字节的校园招聘，那时候也
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="随想" scheme="https://re0.top/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="架构" scheme="https://re0.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>写于6月离职之后</title>
    <link href="https://re0.top/2024/06/11/2024-resign/"/>
    <id>https://re0.top/2024/06/11/2024-resign/</id>
    <published>2024-06-11T12:00:00.000Z</published>
    <updated>2024-06-11T13:43:41.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2024年已经快过去一半了，4月下旬的时候我提出了离职，尽管我还不知道未来的路如何，不管休息也好找下一份工作也罢，我决定离开康子。<br>6月4日特殊的日子，我办理了离职手续，经历了人生中的第一次离职。</p><h1 id="随便聊聊"><a href="#随便聊聊" class="headerlink" title="随便聊聊"></a>随便聊聊</h1><h2 id="为什么离开"><a href="#为什么离开" class="headerlink" title="为什么离开"></a>为什么离开</h2><p>在23年的总结中我写到，目前的自己有点迷茫，不知道之后的方向在哪，我其实休息的时候一直在思考我目前的境地。<br>诚然在康子，我是组内的核心，是大家口中的”大佬”，但说实话我感觉自己远远不够，简单来说是系统设计层面。由于内部系统没有太多的技术可言，唯一能做的就是内部业务如何与技术相结合，说实话，这一年半以来我主导了很多的业务与方案，确实结合了不少技术，但是终究也只是自娱自乐而已，开发模式不完善以至于能学习的对象也少之又少。<br>其次就是内部角色定位模糊，开发模式与周期不敢苟同。我一个人既要做产品负责需求的整理，分析，又要做开发人员出方案设计与开发，又要与前端同学沟通与协调，临近发布日我还得自测系统。说实话我不认为这样的一个开发模式是合理的，我一个人要做不同角色的活，关键是迭代周期还是短短的两周！！！最近半年更是一周一个迭代发布，每次周四发布日我都得干到凌晨。就算不是发布日我也得每天加班加点完成做不完的任务。真的累了。<br>最后是作为技术负责人话语权依然不足。离职前我的定位是某些产品的负责人，兼组内技术顾问的角色。作为产品负责人，我对自己产品做哪些东西其实没有特别大的话语权，一旦领导认为这个东西就得做，那不管我从业务角度还是技术角度去阐述这个需求实现的难度也好，合理性也罢，这个需求都是一定要做的，而且都是紧急的。其实我没太明白，作为一个持续迭代的产品，用户的每一个需求都是紧急的吗？当我去追问用户后，其实往往并不是那么紧急，因为本来就是新的东西。<br>那作为技术顾问呢，我经常看到组内有非常多不合理的需求在季度前的会上讨论，也是一样，这些需求负责人明白是不合理的，从我一个外部的技术角度去看这个需求的时候，也是不合理的，但是呢，就是要做，我没法将这些需求在前期就过滤掉，往往是在完成中或者完成后发现问题后，才意识到不对劲，但他也不会去承认不合理，只是硬着头皮做下去吧。  </p><p>我反思了一下，既然我无法改变目前的现状，也没法提升自身，我决定给自己放个假，沉淀下技术，思考下未来。<br>尽管很多人都说不要轻易裸辞，环境不好之类的，但我自认为还是有点技术的，混口饭吃其实问题不太大。  </p><h2 id="这几年经历了什么"><a href="#这几年经历了什么" class="headerlink" title="这几年经历了什么"></a>这几年经历了什么</h2><p>有一说一，康子作为我毕业后的第一份工作，确实给了我一个相对比较大的发挥平台，刚开始没有合并组织架构前，作为新人我也可以直接参与到新功能的讨论与开发，甚至可以能见证一个产品从零到一，确实是有成就感。<br>度过了新人阶段后，由于转正考核优秀，我开始作为核心开发成员参与到一些产品迭代中，度过了一段也还算有意思的阶段，负责完成方案设计与代码任务，强度不高。<br>又过了一年左右，由于绩效考核较好，转向产品负责人，我开始接手一些系统，也负责搭建一些底层基础服务。<br>其中经历了组内服务部署从docker compose转向k8s的过程，对架构和运维产生了莫大兴趣，从<strong>服务架构选型</strong>到<strong>服务部署</strong>再到<strong>服务治理</strong>到<strong>线上问题排查</strong>，都觉得十分有趣。<br>领导也比较赏识，连续两年都给了我良好绩效，目前的职级相比同一年来的一些小伙伴还高一点。但是有一说一，尽管职级高了但是工资还是比较低的。</p><h2 id="之后做啥"><a href="#之后做啥" class="headerlink" title="之后做啥"></a>之后做啥</h2><p>目前是离职一周了，这一周我看了身上的小毛病，花去了1700块钱，看病真贵啊。怪不得有的人说赚的钱都拿来看病了。<br>之后可能会再稍微休息一小段时间，然后开始找下一份工作，可能确实会不太好找，不过目前我压力还可以，足够支撑我慢慢来，实在不行那就回老家吧。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;2024年已经快过去一半了，4月下旬的时候我提出了离职，尽管我还不知道未来的路如何，不管休息也好找下一份工作也罢，我决定离开康子。&lt;br&gt;6
      
    
    </summary>
    
    
      <category term="随想" scheme="https://re0.top/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>2023年度总结</title>
    <link href="https://re0.top/2024/01/01/2023-summary/"/>
    <id>https://re0.top/2024/01/01/2023-summary/</id>
    <published>2024-01-01T08:00:00.000Z</published>
    <updated>2024-06-11T12:56:20.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2023年又过去了。时间飞快，不知不觉中工作已经两年多，忘记去年有没有写总结了，过去的文件都放在原来的笔记本里不想去翻了。那么就来总结下2023年我的经历吧。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>说实话，平常没有记录的习惯，导致今年发生了什么完全想不起来，那么我就按照季度来总结吧。</p><h2 id="一季度"><a href="#一季度" class="headerlink" title="一季度"></a>一季度</h2><p>2023年一季度就是春节吧，首先是去年工作表现还算可以，年终多发了一点，但是工资还是过于少了。春节那次赶车是我最赶的一次，检票时距离发车只有4分钟，从下地铁就是一路狂奔，印象特别深刻。<br>然后就是网易暴雪分手，在关服前特意去炉石里看了看，算了算也有三年没玩了。<br>2月份的时候崩三第一部主线更新，本来我应该在那时候写下我这几年的感慨，但是真到的那刻我却难以表述我心中的感情。<br>作为陪伴我7年时光的游戏，在那一刻迎来了结束，紧接着毕业旅行的动画短片，我哭了，不仅是对主角琪亚娜经历点点滴滴的感动，也是对我见证这段故事结束时的不舍。但未来总要继续，我们应该笑着走向未来。终点亦是起点，太阳依旧会升起，而每个人依旧要前进。这是这个故事带给我的力量，也是我喜欢这个故事的理由。人生能有几个七年，随着我的年度歌曲Da Capo的落幕，我的七年青春就此结束，我从故事的开始见证到最后，从学生时代的美好到社会人士的残酷。所以这个故事就让它留在过去吧，但它的美好依旧指引着我前进。</p><h2 id="二季度"><a href="#二季度" class="headerlink" title="二季度"></a>二季度</h2><p>4月份开头的时候去看了新海诚的铃芽之旅，个人觉得一般，新海诚的电影从你的名字过后感觉就是为了迎合市场做的，挺难评价的。<br>4月26日米忽悠的新游戏崩铁上线，作为内测玩家我也是马上就登录了，但相较于内测时我填写问卷里所选的上线后可能不会去尝试，结果还是真香了，星铁作为一个休闲游戏爆杀原神，合理利用碎片化时间完成游玩，福利还特别好，不愧与年度最佳移动端游戏！尤其是boss战配合野火直接点燃游戏。<br>5月，加班，二阳，总得来说是很难受的一个月。月末去看了刀剑剧场版，我的评价是非常不错。<br>6月份，天气逐渐热起来，我的小米10s后盖开裂了，电池鼓包，大概率是我经常使用无线充电的原因，电池温度经常过高。换了块电池花了100来块。<br>二季度加班也比较多，但闲暇之余我还是学习了rust语言，做了一些笔记。相较于cpp，我更看好rust的前景，可惜日常中使用它的场景太少，没能有效练习，导致我现在回想起来只记得基本语法了。其次我在工作时开始使用不常使用的架构与中间件实现一些功能，例如spring cloud nacos，rabbitmq，redis集群，es等等。曾经这些其实都是我的设想或者只是旧服务的维护。当我要把这些用在生产环境时总是一个又一个问题，从环境搭建到服务上的使用都有，但最终从搭建部署到使用，自己总结了一些经验，这也许是今年工作相关内容最大的收获了。  </p><h2 id="三季度"><a href="#三季度" class="headerlink" title="三季度"></a>三季度</h2><p>7月份，收到崩三的邀请，去线下参加了林海琦律音乐会，正好地点也在杭州，现场氛围很好，有很多coser，场景布置也非常好，最重要的米忽悠还白送了我一袋子周边，哭死，不过想起来我给崩三充值的金额，想想好像也没啥。现场音乐会比在家看直播好非常多，得益于电影院的音效，听起来确实很好。可惜的是coser就坐在我旁边，但是我却不敢找她们拍照，哈哈。<br>9月4日是我的生日，我本想在这一天请个假休息一下，但好像那周有什么事，我最后没有请假，本想在那天写个人总结，但也搁置了。<br>整个三季度也是比较压抑的，一是随着同事的离职，我也在反思自己到底为啥要待在这里，自己也一直在考虑是否应该换个环境。二是股市动荡比较大，虽然我投资比较少，而且我也不是那种想短期看到收益的人，但看着账户里的资金越来越少其实自己也是蛮无奈的，大A，永远的骗局，不要对股市抱有不切实际的幻想！<br>三季度也收到了多个预定的手办，非常nice，有时候看着这些手办，虽然她们放着确实吃灰，但是回到家看到她们心情确实会变好一些。  </p><h2 id="四季度"><a href="#四季度" class="headerlink" title="四季度"></a>四季度</h2><p>10月份，国庆假期，大概率是宅了一个假期，既有打游戏也有学习，稍微看了岗位详情，但简历却无从下手。10月番剧也开始追起来了，现在想想，当初对16bit给予过大的期待了。其他一些番剧，比如芙莉莲，药屋少女等一些还是非常不错的。<br>11月份，换了小米14pro，玩游戏比以前流畅了，这次直接干到16+1T了，再也不用关心存储空间不够用了。这个月团建去爬山。总体来说还是非常不错的，除了某个领导不断指责导游之外，体验还是很好的，虽然爬山很累，但是山上的风景非常nice。还用14pro拍了非常多照片，不得不说新手机的拍照真的好。<br>11月原神新主线更新，这次的主线剧情应该是我觉得最好的一章，配乐也是巅峰水准，感觉一年到头一直来将米家相关的东西。<br>11-12月就是满无休止的加班加班加班，说实话我受够了这样的工作，明明工资没多少却不断的加班不断的催促不断的内卷，四季度又有两位同事离职了，说实话我挺羡慕他们，考虑了年底离职的风险，能去更好的地方，拿更多的工资。听隔壁组说，两千份简历招了6个人，结果来了2个，还都是校招进来的，由此说明我们岗位工资是真的太低太低了。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>今年，在对工作有用的学习其实不多，主要是在一些架构的设计，运维，学习了一些k8s的东西，但没有特别深入。有一说一目前的岗位对于我能力的提升已经到了瓶颈。说实话我对自己挺迷茫的，迷茫自己的定位，曾经我希望慢慢转型成架构师或者产品经理，但当我尝试去整理需求时我发现我不擅长这个，或许产品这个岗位不适合我，我只想钻研技术，但会不会有一天我也会感觉到厌倦呢？<br>随着工作越来越忙，我在生活中也逐渐变懒，回家只想打游戏休息，虽然偶尔刷视频看见感兴趣的工作相关的也会看，但学习算是比较搁置的，都是碎片化学习。曾经偶尔会写文章，现在都是年更了。我有时候也会反思自己，但总是以工作太累的理由推脱，我想我不能再这样下去了，虽然同事大家都说我很厉害，但我也清楚自己的不足。新的一年希望自己可以再加把劲，去个新环境再提升自己。</p><p>2023年12月31日22:19。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;2023年又过去了。时间飞快，不知不觉中工作已经两年多，忘记去年有没有写总结了，过去的文件都放在原来的笔记本里不想去翻了。那么就来总结下20
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="随想" scheme="https://re0.top/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>2022年度总结</title>
    <link href="https://re0.top/2022/12/31/2022-2023/"/>
    <id>https://re0.top/2022/12/31/2022-2023/</id>
    <published>2022-12-31T08:00:00.000Z</published>
    <updated>2022-12-31T08:28:23.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h1><p>又是半年过去没写文章的日子，时间真的挺快的，转眼又到年末了。今天是2022年的最后一天，在日本这个日子称作大晦日，主要是做大扫除。昨天安排了一下今天的日程，主要是打扫卫生与写年度总结。今天中午起床，吃了点面休息了一会便开始打扫卫生。<br>没想到在12月份的最后几个星期阳了，好在现在已经恢复了七七八八，又可以快乐跨年了。今天把床上用品都拆下来洗了一下，房间打扫了一下，喷了喷酒精消毒。整理完后打开半年不见的笔记本开始码字。  </p><h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>今年又是平淡的一年，这一年算是见证了历史。长跑三年的疫情终于落下了帷幕。有网友调侃2022年的总价就是1-11月做核酸，12月阳了。哈哈哈，我觉得非常准确，因为我就是这样。<br>杭州，算是一个有温度的城市，核酸基本上是3天一检测，一周2.5次，频率算中规中矩吧。好在这个阶段已经结束了，剩下的就只能靠自己了。希望新的一年大家都能平平安安不生病吧。<br>今年又是单身的一年，哈哈，我其实很少提这件事，但同事总是问我为什么没有女朋友，家里人也一直在催我。仔细想想，2023年我竟然25岁了，时光是真的快啊。但是我没想法，主要还是因为自己一个人真的挺舒服的，工作回家，打打游戏，周末自己一个选择睡觉打游戏，或者出去和朋友聚餐，挺自由的。总之我不太愿意另一个人来打搅我现在的生活。<br>今年因为疫情，大部分休息时间我都宅在家里，和朋友聚餐也少了（没疫情说不定也是宅家）。大部分时间都在看视频打游戏看书。说到看书，今年看的书挺少，前段时间买了两本哲学书，结果到货的时候阳了就没心情看，结果到现在还没看。<br>今年，我的亲姐姐终于结婚了，让我挺感慨的。没想到几年前还在说她为啥不谈不结婚，现在竟然遇到了人生的另一半并且决定结婚。正好那段时间疫情影响较小，顺利把婚礼办下来了。她总说没遇到合适的人，如今终于遇到了。我问她结婚是什么感觉，她说结婚其实和平常并没有什么区别。嘛，我是不理解的。也在这祝福她吧。  </p><h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p>今年算是我参加工作的第二个年头。不知不觉我从毕业进入这个公司以来，到现在已经在这个公司待了一年半了。去年主要做了自动化测试工具。今年一整年都围绕这个工具进行展开，包括4月份的时候做了全平台的录制功能，重构了框架一些代码。通过参加今年的一些技术大会，我意识到目前我们的东西，在业界都是前沿，这让我挺意外的。<br>其次是接手了类似云真机平台，并对接了持续集成，打通了设备，测试流程，测试执行的一整条链路。<br>最后下半年主要做了兼容性测试与其他系统的对接。所谓的兼容性测试，目前就是有规律的selenium的遍历，做了两套流程之后我个人有点不想写了。感觉很繁琐，需要根据不同页面去适配。其次是统一平台，对接了组内的一些系统，可以从平台体验其他系统。有一说一，对接其他平台算是后端的噩梦，各个系统的字段都不一样，需要充分了解各个系统，并将各个系统逻辑抽离公共与独有部分，对整个系统字段设计考验还是非常大的。最终我设计并重构了三版，才让目前的逻辑更加清楚一些。<br>但问题依旧存在，为了做数据隔离，不同类型的系统我采取了分表的操作。这一分，后续要统合数据时，就必须根据类型来判断。现在也不知道是好是坏，只能等时间去验证了。  </p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>今年在工作之余写代码又少了，去年还会偶尔写写，今年就没怎么写了。11月份的时候心血来潮，刷了刷LeetCode，刷了半个月每天一到两题，后面就刷不动了，有工作原因太忙，也有自己下班只想休息的原因。技术类书籍今年还是看了一些的，spring源码解析，golang圣经，当然小说也看了不少，东野圭吾的小说，其他轻小说等等。  </p><h1 id="展望未来"><a href="#展望未来" class="headerlink" title="展望未来"></a>展望未来</h1><p>听说隔壁阿里又裁了不少人，今年也是困难的一年啊，各行各业都在裁人，我也挺迷茫的。我不知道23年要做些什么改变现状，待在目前公司算是一种选择，但是感觉学习进展不多，一直在用原来的东西，新的东西也有但总感觉不是很多。但是离开我又不知道做什么，大概率23年又是迷茫一整年。<br>最后，希望2023年自己能多看点书，在工作之余多写点代码，多看看其他项目的源码，多学习。也希望自己，家人，朋友在新的一年健健康康，工作顺利。<br>让我们在下一篇文章再见！新年快乐！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;杂谈&quot;&gt;&lt;a href=&quot;#杂谈&quot; class=&quot;headerlink&quot; title=&quot;杂谈&quot;&gt;&lt;/a&gt;杂谈&lt;/h1&gt;&lt;p&gt;又是半年过去没写文章的日子，时间真的挺快的，转眼又到年末了。今天是2022年的最后一天，在日本这个日子称作大晦日，主要是做大扫除。昨天安排了
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="随想" scheme="https://re0.top/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>devtools协议分析与自动化录制实现</title>
    <link href="https://re0.top/2022/04/08/devtools/"/>
    <id>https://re0.top/2022/04/08/devtools/</id>
    <published>2022-04-08T10:00:00.000Z</published>
    <updated>2022-04-08T14:12:20.699Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近有个需求是做web自动化脚本录制，简单来说就是点击页面上的一个元素，就能把对应节点的xpath和自动化语法添加到脚本中。在airtest中，已经实现了这个功能，这里不再演示，通过实际使用，我认为这一技术实现的关键在于devtools，即通过与浏览器devtools的交互，实现当前节点的选取与脚本录制。<br>目前网上能搜索到的文章有限，本文将详细描述与自动化相关的devtools协议的研究与demo实现。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>首先是去寻找下devtools的<a href="https://chromedevtools.github.io/devtools-protocol/">文档</a>。CDP协议，全程Chrome DevTools Protocol，是用来检测、检查、调试和分析 Chromium、Chrome 和其他基于 Blink 的浏览器。通过开启调试端口，就能与devtools进行通信，从而实现事件与监听。  </p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>首先使用<code>chrome.exe --remote-debugging-port=9222</code>开启chrome的远程调试端口。也可以加上<code>--headless</code>启用无头浏览器。<br>当启动完成后，访问<code>http://localhost:9222/json</code>即可获取到可交互的devtools地址。<strong>devtools采用websocket协议进行通信</strong>，通过与webSocketDebuggerUrl进行websocket连接即可与devtools进行通信。<br>到这，准备工作已经完成，现在需要分析需要的devtools协议。</p><h2 id="使用原有工具观察协议"><a href="#使用原有工具观察协议" class="headerlink" title="使用原有工具观察协议"></a>使用原有工具观察协议</h2><p>相信各位都使用过devtools的inspect模式，这个模式能高亮选中的元素，并且当点击这个元素后，elements标签里会跳到对应节点的html代码处。<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/devtools/1.png" alt="1.png"><br>要观察devtools协议传输了什么，可以通过打开devtools前端的协议观察器。在devtools的试验设置里可以打开。打开后，在更多里打开协议监听器。<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/devtools/2.png" alt="2.png"><br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/devtools/3.png" alt="3.png"><br>点击inspect，选中页面上的元素，即可出现相关的协议请求，包括请求方法，请求参数，还有响应。  </p><h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><p>当然，知道了通信具体参数并不代表可以直接发送数据了，我们还需了解交互的格式，在官方文档中，我们找到了一份<a href="https://github.com/aslushnikov/getting-started-with-cdp/blob/master/README.md">getting-start</a>，这份文档用js写了份示例，根据示例我们可以清楚看到websocket交互的请求体。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中id作为请求的唯一标识，用于让请求方标识返回的内容是对应哪个请求的，当devtools返回时，会将此id返回，因此当需要当出现多个请求同时发出时，需要确保id唯一。<br>method字段对应响应的方法，而params字段则是方法对应的参数。<br>最后发送的是json数据的stringfy。  </p><h2 id="大体实现"><a href="#大体实现" class="headerlink" title="大体实现"></a>大体实现</h2><p>回到protocol monitor，我们可以发现当启用inspect模式时，会发送<code>Overlay.setInspectMode</code>方法，开启检查模式。虽然也可以在官方文档中看到，但是官方文档方法实在太多了，不如这种方式来的直接。<br>其次在页面上选中元素时，会接收一个<code>Overlay.nodeHighlightRequested</code>事件，会返回一个nodeId，而当在页面上点击一个元素时会接收一个<code>Overlay.inspectNodeRequested</code>事件，返回一个backendNodeId。<br>而无论是nodeId还是backendNodeId，都可以通过<code>DOM.describeNode</code>方法发送指定参数的请求，获取这个节点的详细信息。这个方法的参数如下：  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;nodeId&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;backendNodeId&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;objectId&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;depth&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;pierce&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>实际使用中，我们只需要发送nodeId或者backendNodeId即可。<br>其他实现自动化需要的事件还有<code>DOM.documentUpdated</code>，这个事件说明dom被更新了，需要重新获取dom，否则前后端的节点会不一致，可以通过<code>DOM.getDocument</code>方法重新获取dom，顺带一提，连接完成后，也应该执行一次这个方法。<br>至此，我们已经可以完成一个简单的自动化节点监控。下面简单写下代码。  </p><h2 id="简易实现代码"><a href="#简易实现代码" class="headerlink" title="简易实现代码"></a>简易实现代码</h2><p>这里我们使用websocket-client作为websocket的客户端连接到devtools。<br>先从<code>http://127.0.0.1:9222/json</code>获取到webSocketDebuggerUrl。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">send_msg_template = &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;method&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">searchForNode = &#123;</span><br><span class="line">    <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;searchForNode&quot;</span>,</span><br><span class="line">    <span class="string">&quot;highlightConfig&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;showInfo&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&quot;showRulers&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&quot;showStyles&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&quot;showAccessibilityInfo&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&quot;showExtensionLines&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&quot;contentColor&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;r&quot;</span>: <span class="number">111</span>,</span><br><span class="line">            <span class="string">&quot;g&quot;</span>: <span class="number">168</span>,</span><br><span class="line">            <span class="string">&quot;b&quot;</span>: <span class="number">220</span>,</span><br><span class="line">            <span class="string">&quot;a&quot;</span>: <span class="number">0.66</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">disableSearchForNode = deepcopy(searchForNode)</span><br><span class="line">disableSearchForNode[<span class="string">&#x27;mode&#x27;</span>] = <span class="string">&quot;none&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_message</span>(<span class="params">ws, msg</span>):</span></span><br><span class="line">        data = json. loads(msg)</span><br><span class="line">        pprint(data)</span><br><span class="line">        method = data[<span class="string">&#x27;method&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> method == <span class="string">&#x27;Overlay.inspectNodeRequested&#x27;</span>:</span><br><span class="line">            <span class="comment"># 当在Inspector模式下，节点被按下时触发的事件</span></span><br><span class="line">            backend_node_id = data[<span class="string">&quot;params&quot;</span>][<span class="string">&#x27;backendNodeId&#x27;</span>]</span><br><span class="line">            <span class="comment"># pprint(backend_node_id)</span></span><br><span class="line">            <span class="comment"># 获取下详细的节点信息</span></span><br><span class="line">            send_msg(ws, <span class="string">&quot;DOM.describeNode&quot;</span>, &#123;<span class="string">&#x27;backendNodeId&#x27;</span>: backend_node_id&#125;)</span><br><span class="line">            <span class="comment"># 然后关闭Inspector模式</span></span><br><span class="line">            send_msg(ws, <span class="string">&quot;Overlay.setInspectMode&quot;</span>, disableSearchForNode)</span><br><span class="line">        <span class="keyword">elif</span> method == <span class="string">&quot;Overlay.nodeHighlightRequested&quot;</span>:</span><br><span class="line">            <span class="comment"># 这个方法是Inspector模式下，节点被选中时触发的，前提是已经获取过dom</span></span><br><span class="line">            send_msg(ws, <span class="string">&quot;DOM.describeNode&quot;</span>, &#123;<span class="string">&#x27;nodeId&#x27;</span>: data[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;nodeId&#x27;</span>]&#125;)</span><br><span class="line">        <span class="keyword">elif</span> method == <span class="string">&quot;DOM.documentUpdated&quot;</span>:</span><br><span class="line">            <span class="comment"># 收到这个方法说明dom被更新，需要重新获取下dom</span></span><br><span class="line">            send_msg(ws, <span class="string">&quot;DOM.getDocument&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_msg</span>(<span class="params">ws, method, params=<span class="literal">None</span></span>):</span></span><br><span class="line">        send_msg_template[<span class="string">&#x27;id&#x27;</span>] += <span class="number">1</span></span><br><span class="line">        msg = deepcopy(send_msg_template)</span><br><span class="line">        msg[<span class="string">&#x27;method&#x27;</span>] = method</span><br><span class="line">        msg[<span class="string">&#x27;params&#x27;</span>] = params <span class="keyword">if</span> params <span class="keyword">else</span> &#123;&#125;</span><br><span class="line">        ws.send(json.dumps(msg))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_open</span>(<span class="params">ws</span>):</span></span><br><span class="line">        send_msg(ws, <span class="string">&quot;DOM.enable&quot;</span>)</span><br><span class="line">        send_msg(ws, <span class="string">&quot;Overlay.enable&quot;</span>)</span><br><span class="line">        send_msg(ws, <span class="string">&quot;Inspector.enable&quot;</span>)</span><br><span class="line">        send_msg(ws, <span class="string">&quot;DOM.getDocument&quot;</span>)</span><br><span class="line">        send_msg(ws, <span class="string">&quot;Overlay.setInspectMode&quot;</span>, searchForNode)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> websocket <span class="keyword">import</span> WebSocketApp</span><br><span class="line">    ws = WebSocketApp(<span class="string">&quot;ws://127.0.0.1:9222/devtools/page/EA63C0AE33770FD58FB89FD3A6ACB165&quot;</span>, on_message=on_message,</span><br><span class="line">                      on_open=on_open)</span><br><span class="line"></span><br><span class="line">    ws.run_forever()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    t = threading.Thread(target=main)</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br></pre></td></tr></table></figure><p>这里我们在连接完成后，立即发送几个方法，分别是<code>DOM.enable</code>,<code>Overlay.enable</code>,<code>Inspector.enable</code>,<code>DOM.getDocument</code>,<code>Overlay.setInspectMode</code>，其中几个enable是开启对应的功能，这里不再赘述，然后是立即获取一次dom，随后开启inspect模式，这里我们不需要浏览器中devtools的inspect那么多显示，如元素的padding，因此我们只保留最基础的设置。<br>随后我们在收到消息后就监听几个事件，分别是我们前文所讲的几个事件，随后在节点被按下后，取消inspect模式。<br>可以看看效果  </p><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","preload":"none","video":{"url":"https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/devtools/1.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>这里当我们移动到一个元素上时，会打印出该节点的详细信息，在按下节点后，inspect模式随即解除。  </p><h2 id="使用第三方库监听"><a href="#使用第三方库监听" class="headerlink" title="使用第三方库监听"></a>使用第三方库监听</h2><p>当然，我们也可以专注于事件的监听和方法的发送，无需关注websocket的实现，<a href="https://github.com/fate0/pychrome">pychrome</a>就是这样的一个库，它的核心代码不过二百多行，它可以通过设置listener来实现指定方法的监听，根据官方示例，我们可以简单改造下上面的代码。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pychrome</span><br><span class="line">browser = pychrome.Browser(url=<span class="string">&quot;http://127.0.0.1:9222&quot;</span>)</span><br><span class="line">tab = browser.list_tab()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_node</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">result = tab.call_method(<span class="string">&quot;DOM.describeNode&quot;</span>, **kwargs)</span><br><span class="line">pprint(result)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_node_and_stop_inspect</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">result = tab.call_method(<span class="string">&quot;DOM.describeNode&quot;</span>, **kwargs)</span><br><span class="line">pprint(result)</span><br><span class="line">tab.call_method(<span class="string">&quot;Overlay.setInspectMode&quot;</span>, **disableSearchForNode)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_dom</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">tab.call_method(<span class="string">&quot;DOM.getDocument&quot;</span>)</span><br><span class="line"></span><br><span class="line">tab.set_listener(<span class="string">&quot;Overlay.inspectNodeRequested&quot;</span>, get_node_and_stop_inspect)</span><br><span class="line">tab.set_listener(<span class="string">&quot;Overlay.nodeHighlightRequested&quot;</span>, get_node)</span><br><span class="line">tab.set_listener(<span class="string">&quot;DOM.documentUpdated&quot;</span>, update_dom)</span><br><span class="line"></span><br><span class="line">tab.start()</span><br><span class="line">tab.call_method(<span class="string">&quot;DOM.enable&quot;</span>)</span><br><span class="line">tab.call_method(<span class="string">&quot;Overlay.enable&quot;</span>)</span><br><span class="line">tab.call_method(<span class="string">&quot;Inspector.enable&quot;</span>)</span><br><span class="line">tab.call_method(<span class="string">&quot;DOM.getDocument&quot;</span>)</span><br><span class="line">tab.call_method(<span class="string">&quot;Overlay.setInspectMode&quot;</span>, **searchForNode)</span><br><span class="line"></span><br><span class="line">tab.wait(<span class="number">10</span>)</span><br><span class="line">tab.stop()</span><br></pre></td></tr></table></figure><p>改造完成后，瞬间就很清爽，我们只需要对指定事件监听即可，脚本运行的情况与之前脚本相同，这里就不再演示。<br>唯一遗憾的是pychrome不支持一个event监听多个方法，新方法会覆盖旧方法。之后有机会提下pr吧。  </p><h2 id="获取节点xpath"><a href="#获取节点xpath" class="headerlink" title="获取节点xpath"></a>获取节点xpath</h2><p>至此，我们的自动化录制已经实现了一大部分，那么剩下就是获取这个节点的xpath，唯一确定这个节点的位置，就可以在selenium准确点击这个元素了。<br>回到刚刚的<code>DOM.describeNode</code>方法，这个方法的返回如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;node&#x27;</span>: &#123;<span class="string">&#x27;attributes&#x27;</span>: [<span class="string">&#x27;href&#x27;</span>,</span><br><span class="line">                                    <span class="string">&#x27;https://www.iana.org/domains/example&#x27;</span>],</span><br><span class="line">                     <span class="string">&#x27;backendNodeId&#x27;</span>: <span class="number">14</span>,</span><br><span class="line">                     <span class="string">&#x27;childNodeCount&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">                     <span class="string">&#x27;localName&#x27;</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">                     <span class="string">&#x27;nodeId&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">                     <span class="string">&#x27;nodeName&#x27;</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">                     <span class="string">&#x27;nodeType&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">                     <span class="string">&#x27;nodeValue&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>我们知道这个节点的名称，attributes，但是我们却没有结构，来完成路径组装。其实<code>DOM.getDocument</code>是可以获取到完整结构树的，如果没有参数传递，那么最多只会获取1层的子树，我们可以指定depth参数为-1获取整个document结构。<br>有了整个dom树，那么我们就可以从上到下遍历树，从而获取节点的路径，我们也无需再次通过<code>DOM.describeNode</code>获取节点的数据。代码示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">dom_root = tab.call_method(<span class="string">&quot;DOM.getDocument&quot;</span>, depth=-<span class="number">1</span>)[<span class="string">&#x27;root&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_path_from_root</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">backend_node_id = kwargs.get(<span class="string">&quot;backendNodeId&quot;</span>)</span><br><span class="line">path = _get_path(dom_root, backend_node_id, <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;path: &quot;</span> + <span class="built_in">str</span>(path))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_path</span>(<span class="params">node, backend_node_id, path</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">递归获取结构</span></span><br><span class="line"><span class="string">:param node:</span></span><br><span class="line"><span class="string">:param backend_node_id:</span></span><br><span class="line"><span class="string">:param path</span></span><br><span class="line"><span class="string">:return:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> node[<span class="string">&#x27;backendNodeId&#x27;</span>] == backend_node_id:</span><br><span class="line"><span class="keyword">return</span> path + <span class="string">&quot;/&quot;</span> + node[<span class="string">&#x27;localName&#x27;</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> node.get(<span class="string">&#x27;children&#x27;</span>, []):</span><br><span class="line">child_path = _get_path(child, backend_node_id, path + <span class="string">&quot;/&quot;</span> + node[<span class="string">&#x27;localName&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> child_path:</span><br><span class="line"><span class="keyword">return</span> child_path</span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>我们点击页面上超链接，得到<code>path: //html/body/div/p/a</code>，这里前面多个/符号是因为root没有名称，获取后做下处理即可。下面的代码会改进。<br>当然只用路径肯定不够，当有id时，我们优先使用id来实现，顺便改造下之前的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_path</span>(<span class="params">node, backend_node_id, path</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">递归获取结构</span></span><br><span class="line"><span class="string">:param node:</span></span><br><span class="line"><span class="string">:param backend_node_id:</span></span><br><span class="line"><span class="string">:param path</span></span><br><span class="line"><span class="string">:return:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">node_attributes = node.get(<span class="string">&#x27;attributes&#x27;</span>, [])</span><br><span class="line">node_id = <span class="literal">None</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(node_attributes), <span class="number">2</span>):</span><br><span class="line"><span class="keyword">if</span> node_attributes[i] == <span class="string">&quot;id&quot;</span>:</span><br><span class="line">node_id = node_attributes[i + <span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> node_id:</span><br><span class="line">new_path = <span class="string">&quot;//*[@id=\&quot;&#123;&#125;\&quot;]&quot;</span>.<span class="built_in">format</span>(node_id)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">new_path = (path + <span class="string">&quot;/&quot;</span> + node[<span class="string">&#x27;localName&#x27;</span>]) <span class="keyword">if</span> node[<span class="string">&#x27;localName&#x27;</span>] <span class="keyword">else</span> path</span><br><span class="line"><span class="keyword">if</span> node[<span class="string">&#x27;backendNodeId&#x27;</span>] == backend_node_id:</span><br><span class="line"><span class="keyword">return</span> new_path</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> node.get(<span class="string">&#x27;children&#x27;</span>, []):</span><br><span class="line">child_path = _get_path(child, backend_node_id, new_path)</span><br><span class="line"><span class="keyword">if</span> child_path:</span><br><span class="line"><span class="keyword">return</span> child_path</span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h2 id="也许是完善？"><a href="#也许是完善？" class="headerlink" title="也许是完善？"></a>也许是完善？</h2><p>当然这个获取xpath的代码还不完全，当节点有其他attr时也可以以这些属性作为xpath，并且还需要考虑同级别下有相同节点，此时需要用序号来标识。<br>并且通过id获取xpath也不能确保准确，因为网站的编写者可能重复使用id。(<del>CV程序员</del>)<br>例如，如下的html文件，我们在devtools的element里选中第一个p元素后右键复制XPath后，显示的path是<code>//*[@id=&quot;1&quot;]</code>，但这明显是有问题的，虽然是网页编写者的问题，但我们为了兼容所有系统，可以使用完整的path作为真正的xpath。  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&#x27;1&#x27;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&#x27;2&#x27;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&#x27;1&#x27;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&#x27;2&#x27;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>基于以上观点，我们在这不使用带有attribute的xpath，只使用完整的xpath路径作为节点的唯一路径。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_path</span>(<span class="params">node, backend_node_id, path, idx=<span class="number">1</span></span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">递归获取结构</span></span><br><span class="line"><span class="string">:param node:</span></span><br><span class="line"><span class="string">:param backend_node_id:</span></span><br><span class="line"><span class="string">:param path</span></span><br><span class="line"><span class="string">:return:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">new_path = (path + <span class="string">&quot;/&quot;</span> + node[<span class="string">&#x27;localName&#x27;</span>]) <span class="keyword">if</span> node[<span class="string">&#x27;localName&#x27;</span>] <span class="keyword">else</span> path</span><br><span class="line"><span class="keyword">if</span> idx != <span class="number">1</span> <span class="keyword">and</span> new_path:</span><br><span class="line">new_path = new_path + <span class="string">&quot;[&#123;&#125;]&quot;</span>.<span class="built_in">format</span>(idx)</span><br><span class="line"><span class="keyword">if</span> node[<span class="string">&#x27;backendNodeId&#x27;</span>] == backend_node_id:</span><br><span class="line"><span class="keyword">return</span> new_path</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">children = node.get(<span class="string">&#x27;children&#x27;</span>, [])</span><br><span class="line">tag_map = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(children)):</span><br><span class="line">child = children[i]</span><br><span class="line"><span class="keyword">if</span> child[<span class="string">&#x27;localName&#x27;</span>] <span class="keyword">in</span> tag_map:</span><br><span class="line">tag_map[child[<span class="string">&#x27;localName&#x27;</span>]] += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">tag_map[child[<span class="string">&#x27;localName&#x27;</span>]] = <span class="number">1</span></span><br><span class="line">child_path = _get_path(child, backend_node_id, new_path, tag_map[child[<span class="string">&#x27;localName&#x27;</span>]])</span><br><span class="line"><span class="keyword">if</span> child_path:</span><br><span class="line"><span class="keyword">return</span> child_path</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>通过以上代码我们已经能初步实现步骤的自动化录制。  </p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文就网页自动化录制提出了自己的一些思路与代码实现，初步实现了自动化录制。当然，我相信仍旧有许多实际问题没有被我发现，只能等之后的具体开发才能发现会有什么问题。<br>其次，就airtest的功能来看，它认为节点的id不会重复，并且attribute大概率不会重复，因此它的xpath是多样的。<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/devtools/4.png" alt="4.png"><br>相较于airtest的录制功能，这篇文章最后代码使用的是完整的xpath路径，保证路径唯一。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近有个需求是做web自动化脚本录制，简单来说就是点击页面上的一个元素，就能把对应节点的xpath和自动化语法添加到脚本中。在airtest
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Python" scheme="https://re0.top/tags/Python/"/>
    
      <category term="自动化测试" scheme="https://re0.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>由于代码架构设计不佳而引发的异常消失</title>
    <link href="https://re0.top/2022/01/01/2022-first/"/>
    <id>https://re0.top/2022/01/01/2022-first/</id>
    <published>2022-01-01T10:00:00.000Z</published>
    <updated>2022-01-01T11:37:40.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>真的好久没写文章了，上一篇还是21年的6月写的。工作上事情再加上回来只想打游戏，这半年就没输出文章，中间其实有几次想过写写，但是不知道写点啥。  </p><p>打扫完房间，坐下打开电脑，正好原神预下载，也想想好久没写文章了，正好最近有个有意思的也是自己遇到问题，就边下载边码字了。  </p><p>今天是2022年的元旦，先祝看到这篇文章的朋友新年快乐吧。</p><h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>这篇文章聊聊finally关键字，这个关键字Python和Java程序员肯定都不陌生。相信很多程序员其实都看过很多文章说finally关键字里面最好不要有return关键字，这点肯定很多人都知道，鉴于可能有人不知道，这里还是讲讲(水字数石锤)。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="由多个return导致返回值缺失"><a href="#由多个return导致返回值缺失" class="headerlink" title="由多个return导致返回值缺失"></a>由多个return导致返回值缺失</h2><p>上文说，很多文章警告不要在finally中使用return，他们文章里给出的例子很简单，这里我以Python为例，假设有以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">finally</span>:</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>那么其实这个函数返回值是2，而不是1，容易引起误解，所以大多数情况下，我们不会再finally中写任何return，防止返回值与预期不一致。</p><h2 id="脚本执行架构设计"><a href="#脚本执行架构设计" class="headerlink" title="脚本执行架构设计"></a>脚本执行架构设计</h2><p>而这篇文章要讲的也是finally，但不是因为返回值不一致。要讲这个之前，我想先讲一讲为啥我会遇到这个问题。  </p><p>大概是21年10月份，我们的测试框架打算引入前置与后置功能，那这部分的实现就落在我身上了，领导也很看重，希望能实现一个健硕的执行架构，那我也看了一些执行框架源码，比如rebot，但是其实关键部分光看源码其实看不出所以然出来，所以我决定先写下第一行代码再说。  </p><p>熟悉测试的同学应该知道，测试脚本呢，其实分为三部分，一是环境的准备（setup），测试主体（main），资源回收（teardown），用户只关心的是测试主体是否成功。那基于我们的测试执行框架，其实这三部分并没有什么差别，是分为三个脚本去执行，因此就需要一个调度框架去控制执行的顺序。  </p><p>执行的代码我们可以简化为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute</span>(<span class="params">self, stage</span>):</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> stage == <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">​            <span class="built_in">print</span>(<span class="string">&quot;执行main&quot;</span>)</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">elif</span> stage == <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">​            <span class="built_in">print</span>(<span class="string">&quot;执行setup&quot;</span>)</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">elif</span> stage == <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">​            <span class="built_in">print</span>(<span class="string">&quot;执行teardown&quot;</span>)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">except</span>:</span><br><span class="line"></span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&quot;发生异常，记录，置该脚本状态为FAIL&quot;</span>)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">finally</span>:</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">​            <span class="built_in">print</span>(<span class="string">&quot;根据stage不同，回填不同阶段的日志到服务器上&quot;</span>)</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">except</span>:</span><br><span class="line"></span><br><span class="line">​            <span class="built_in">print</span>(<span class="string">&quot;回填日志失败，记一下错误&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>大概就是这个样子，这个就是最基础的执行方法，通过传入不同的stage，执行方法和回填日志。那调度方法可以简化为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_case</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">​        execute(<span class="number">0</span>)  <span class="comment"># 执行setup</span></span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> self.result == <span class="string">&quot;PASS&quot;</span>:</span><br><span class="line"></span><br><span class="line">​            execute(<span class="number">1</span>)  <span class="comment"># setup成功才执行main</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">finally</span>:</span><br><span class="line"></span><br><span class="line">​        execute(<span class="number">2</span>)  <span class="comment"># 无论如何都需要执行teardown</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然真实情况远没有那么简单，因为是一个执行树，所以需要递归调用，但这个地方不是重点，这里只讲最简单的架构。  </p><p>起初我对这个设计还是比较满意的，借助try和finally实现了对不同阶段的调用，之后我便考虑如何去停止正在执行的脚本。而关于停止，我设计了两套实现，其一是停止后，继续执行已执行过setup的脚本的teardown内容，其二是真正停止运行，不执行teardown。</p><p>我在类中声明了两个类变量，self.exit 和 self.real_exit，分别代表两种退出。其中当real_exit为True时，exit一定为True，但反过来不一定。因此上面的调度代码被我改为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_case</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">​        execute(<span class="number">0</span>)  <span class="comment"># 执行setup</span></span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> <span class="keyword">not</span> self.exit <span class="keyword">and</span> self.result == <span class="string">&quot;PASS&quot;</span>:</span><br><span class="line"></span><br><span class="line">​            execute(<span class="number">1</span>)  <span class="comment"># setup成功才执行main</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">finally</span>:</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> self.real_exit:</span><br><span class="line"></span><br><span class="line">​            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">​        execute(<span class="number">2</span>)  <span class="comment"># 无论如何都需要执行teardown</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>请注意，这段代码是有问题的。</strong> </p><p>这里先说说exit和real_exit的赋值，上面有说过，因为是执行树，其实这两个变量在使用前其实必须使用self.exit = self.parent.get_exit()，通过递归来获取最顶层的状态，这里暂且提一下，这个不是本文的重点。</p><p>请注意，这里我在finally中用了return关键字，乍一看没啥问题，我当初觉得也没啥问题。首先run_case这个方法是没有返回值的，执行结果全在类变量中，然后是execute这个方法，全程也是在try/except的代码块中的，因此当初我认为不会有什么问题。这里run_case方法上层其实还有一层，为用户实际执行的层次，可以简化为：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">job</span>):</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">​        job.run_case()</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">except</span>:</span><br><span class="line"></span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&quot;执行发生异常，做个标记&quot;</span>)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">finally</span>:</span><br><span class="line"></span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&quot;有异常就通知用户，没有就通知已完成执行&quot;</span>)</span><br><span class="line"></span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&quot;发送邮件&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>至此，这个执行调度架构也直接上线了。期间也没出现过什么离谱的问题，满意度还是比较高的。</p><h2 id="开始意识到不对"><a href="#开始意识到不对" class="headerlink" title="开始意识到不对"></a>开始意识到不对</h2><p>我们服务器是保留1个月的日志，所以有概率seaweed会爆满的，当爆满时，日志无法回填，但其实测试脚本还是会继续跑的。所以有用户与我反馈说能不能上传失败就停下脚本，这样很浪费时间，执行完也没报告看，还不如不执行。我觉得有道理，便开始了改造，这改造不要紧，结果发现了这个架构中的大问题，也是我写这篇文章的原因。  </p><p>由于日志回填是在execute方法中，因此我们改造这个方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute</span>(<span class="params">self, stage</span>):</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> stage == <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">​            <span class="built_in">print</span>(<span class="string">&quot;执行main&quot;</span>)</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">elif</span> stage == <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">​            <span class="built_in">print</span>(<span class="string">&quot;执行setup&quot;</span>)</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">elif</span> stage == <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">​            <span class="built_in">print</span>(<span class="string">&quot;执行teardown&quot;</span>)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">except</span>:</span><br><span class="line"></span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&quot;发生异常，记录，置该脚本状态为FAIL&quot;</span>)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">finally</span>:</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">​            <span class="built_in">print</span>(<span class="string">&quot;根据stage不同，回填不同阶段的日志到服务器上&quot;</span>)</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">except</span>:</span><br><span class="line"></span><br><span class="line">​            <span class="built_in">print</span>(<span class="string">&quot;回填日志失败，记一下错误&quot;</span>)</span><br><span class="line"></span><br><span class="line">​            self.upload_error_time += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">​            <span class="keyword">if</span> self.upload_error_time &gt;= <span class="number">3</span>:</span><br><span class="line"></span><br><span class="line">​                self.root_case.real_exit = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">​                <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;上传错误次数累计超过上限&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我在日志回填的时候，增加了简单的错误次数判断，那么如果顺利的话，当上传错误超过3次时，应该是这么一个流程：execute方法在finally中抛出了一个异常，由于没有捕获，抛给了它的调用方run_case，run_case是在try中接收了这个异常，但由于也没有捕获，又向上抛给了run方法，run方法捕获了这个异常，停止执行，并通知用户。</p><p>而之所以加入了self.root_case.real_exit，其实是为了不让run_case中finally执行，即不执行teardown。但我在写这篇文章的时候意识到，其实应该让teardown执行才对，不然环境没回收也是个问题，找个时间改下。当然这个也不是重点，因为我们就只想要上传失败3次后停下来，不想多执行其他的脚本了。</p><p>写完这个需求，我笑到，这个需求也是蛮简单的。但当我进行调试时，却发现事情的不对。首先我在回填日志时每次都抛出一个异常来模拟出现问题，这里便不多说。然后批量执行几个脚本，观察是否会如同预期一样，3次后直接抛出异常。这里要说的是，不管脚本的前置后置有没有内容，日志都会回填，我的执行树大概是这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root_case</span><br><span class="line">    folder</span><br><span class="line">        case1</span><br><span class="line">        case2</span><br><span class="line">        case3</span><br></pre></td></tr></table></figure><p>那么失败3次，就是root_case，folder，case1的setup都失败，此时发生异常退出。</p><p>但并没有像我预想的一样异常退出，而是正常退出？！我觉得可能是哪里有问题，又多执行了几次，但是还是这样。我就开始调试代码了。调试了很久，因为执行树是递归调用，所以调试很不容易，调了半个下午，这时候我才意识到我的异常被run_case中的finally中的return给吞噬了。</p><p>虽然run_case没有返回值，但是finally中的return还是出现了问题，这就是这次经历给我带来的教训，无论如何，不要在finally中写下return！不管是什么原因。</p><p>那么后来我便改成了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_case</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">​        execute(<span class="number">0</span>)  <span class="comment"># 执行setup</span></span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> <span class="keyword">not</span> self.exit <span class="keyword">and</span> self.result == <span class="string">&quot;PASS&quot;</span>:</span><br><span class="line"></span><br><span class="line">​            execute(<span class="number">1</span>)  <span class="comment"># setup成功才执行main</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">finally</span>:</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> <span class="keyword">not</span> self.real_exit:</span><br><span class="line"></span><br><span class="line">​            execute(<span class="number">2</span>)  <span class="comment"># 无论如何都需要执行teardown</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这时候异常就顺利向上抛出了。趁着没人发现这个bug，偷偷把它修了，哈哈。虽然没造成什么影响就是了，因为下层的一些会发生异常的操作方法，都会捕获异常。实际使用时并不会向上抛异常。</p><h1 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h1><p>这篇文章其实废话有点多，其实关键就一点，就是finally中不要写任何return，无论什么原因，除非你保证没有返回值或者下层绝对不会抛出异常。</p><p>除开这个，也讲了讲自己设计和编写的执行架构，我个人认为这个架构还是挺不错的，鉴于篇幅只讲了其中的一小部分，有机会的话可以来讲讲这个框架里我的callback设计，即执行单个脚本或者整个批次后进行一些调用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;真的好久没写文章了，上一篇还是21年的6月写的。工作上事情再加上回来只想打游戏，这半年就没输出文章，中间其实有几次想过写写，
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Python" scheme="https://re0.top/tags/Python/"/>
    
      <category term="架构" scheme="https://re0.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>zbot架构畅谈</title>
    <link href="https://re0.top/2021/06/08/zbot/"/>
    <id>https://re0.top/2021/06/08/zbot/</id>
    <published>2021-06-08T06:10:00.000Z</published>
    <updated>2021-06-08T06:53:49.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>zbot是由我个人编写的简易机器人框架，它依赖于mirai与mirai_api_http，目前实现了关键字回复与定时功能，<a href="https://github.com/zer0e/zbots">zbot项目地址</a>。  </p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>本文的目的是聊聊zbot的项目架构，这个项目应该是我第一个思考并运用架构知识所编写的框架应用，虽然功能简单，但其中架构部分却值得思考与拓展。<br>zbot主要由以下几部分组成：</p><ul><li>handler，主要用于处理消息或者定时处理</li><li>receiver，从mirai_api_http接收消息的websocket客户端</li><li>pluginLoader，负责从外部加载用户自定义插件到框架中</li><li>Api，封装mirai_api_http的部分功能供用户插件使用</li><li>registry，注册中心，负责插件注册，调度和转发请求 </li></ul><h2 id="借鉴主流RPC框架架构"><a href="#借鉴主流RPC框架架构" class="headerlink" title="借鉴主流RPC框架架构"></a>借鉴主流RPC框架架构</h2><p>zbot前期架构准备中，借鉴了主流RPC框架的架构，以dubbo框架为例，这是一张dubbo的架构图。<img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/zbot/dubbo1.jpg" alt="dubbo架构"><br>在dubbo中，provider，即服务提供方通过主动方式向注册中心注册服务；而消费端则是通过向注册中心获取已经注册的服务列表，需要时通过协议直接对服务提供方进行调用。这么做的好处是注册中心只负责了服务注册与发现，不转发请求，减小了注册中心的压力，这对整个架构是必须的。  </p><h2 id="更换架构"><a href="#更换架构" class="headerlink" title="更换架构"></a>更换架构</h2><p>虽然dubbo框架的架构方案十分不错，但考虑到以下几点</p><ul><li>需要设计私有协议</li><li>服务提供方必须提供其注册中心地址进行注册，但zbot插件必须是无配置或者少配置的，因为需要令插件无需配置就能运行在各个环境中</li><li>为了开箱即用，注册中心无需成为单独节点，如zk，而是直接整合进框架中</li><li>对提供方可能得编写单独依赖，如TCP支持，自动注册等等</li></ul><p><strong>zbot的目的是插件开发简单，并且开箱即用。</strong>综合以上几点，主流RPC框架的架构其实并不适用与zbot。随后我借助RPC框架的各个节点角色重新设计架构。以下是项目架构图。<img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/zbot/zbot.jpg" alt="zbot架构">   </p><h2 id="架构说明"><a href="#架构说明" class="headerlink" title="架构说明"></a>架构说明</h2><p>首先谈谈关键的插件部分，对应到RPC框架中就是服务提供方，那在zbot中，服务提供方不再通过主动方式去注册，而是通过pluginLoader对服务进行扫描，主要做法是读取框架配置与目录下的插件，再将开启的有效插件进行统一注册。那在后续的思考中，我认为zbot的架构中registry与pluginLoader应该合并为一个新的registry，由注册中心主动扫描并注册插件。但考虑到框架整体已经完成，并没有太大必要去整合架构，此处只是提出个人看法。  </p><hr><p>其次就是服务消费端的调用流程，在zbot中，服务消费端就是msghandler，他通过订阅注册中心的关键词列表，负责消息的处理。重点是，在RPC框架中，当需要消费提供者的服务时，是由消费端主要通过协议调用提供者，而在zbot中，则是消费端需要调用服务时，将消息与服务端的id转发至注册中心，由注册中心进行调用。<br>这么做的好处是消费端不用存储服务端的地址，前面提到，提供方需要简单开发，尽管通过依赖与注解或许能暴露服务端的接口，但需要占用端口，并且框架的开发难度也会加大。那么坏处就是注册中心的压力变大，不仅需要负责服务发现并且需要请求转发。  </p><hr><p>最后是调用方式，从消费端转发给注册中心，再从注册中心调用消费端，均采用异步方式，因为消费端不依赖与服务提供者，所以可以不用同步进行调用。这样可以防止服务提供方的故障，或者说避免API方面故障使得框架出现异常卡死。</p><h1 id="后续思考"><a href="#后续思考" class="headerlink" title="后续思考"></a>后续思考</h1><p>目前想到的点其实是插件热加载。如果以目前的架构来说，热加载只能让pluginLoader再次去加载插件，因此需要从头开始扫描。如果是主动服务注册的方式，那么热加载实现可能会更灵活。只能说各有利弊，前面也有提到，插件不能分离与框架，插件不应该独立运行，而是依托于整个框架。并且采用主动注册方式也就需要重新加载所有插件，令插件自行去注册。从这方面来看，zbot不管采用主动注册方式还是被动加载方式都没有什么差别。<br>目前的实现方案还是在zbot框架前套一个启动器，zbot包含以上几个部分，因为需要将这几个部分组合起来。在不影响现有代码的情况下，通过编写不同工厂方法能在原有zbot的基础上封装一个类似命令行的界面，reload命令实现重新加载插件与配置，这是目前的方案。至于实现日期，<del>咕咕咕</del>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;zbot是由我个人编写的简易机器人框架，它依赖于mirai与mirai_api_http，目前实现了关键字回复与定时功能，&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="架构" scheme="https://re0.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="Java" scheme="https://re0.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>对bsgamesdk的签名逆向分析</title>
    <link href="https://re0.top/2021/04/05/bsgamesdk-re/"/>
    <id>https://re0.top/2021/04/05/bsgamesdk-re/</id>
    <published>2021-04-05T06:10:00.000Z</published>
    <updated>2021-04-05T08:40:54.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近看到pcr查看个人信息的脚本，比较感兴趣就稍微研究了一下。之前很早的时候对pcr进行过抓包，没想到是基于http协议的，感觉日本那边的it技术比国内的稍微落后一点。<br>pcr接入的是bilibili游戏，要登录游戏得先登录b站账号，抓包之后发现登录过程还是比较简单的，首先是从服务器获取rsa公钥，然后把密码进行rsa加密，添加公共请求头就可以登录了。但是请求中存在的sign参数文档并没有公开。<br>虽然网上的脚本已经把逻辑写清楚，但是我还是决定深入sdk源码，查看签名的逻辑。  </p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>从<a href="http://open.biligame.com/wiki/">官网</a>上下载最新的SDK和demo，用AndroidStudio打开工程就可以准备开始了。  </p><h2 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h2><p>在左侧的external libraries点开demo项目所依赖的sdk。有classes.jar和r-classes.jar。r里面就只有与Alipay相关的东西，应该不是所要找的代码。<br>点开classes.jar，随便点开几个发现都被简单混淆了。随后翻到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classes.jar!\com\bsgamesdk\android\api</span><br></pre></td></tr></table></figure><p>这个包应该是与api请求相关的。<br>大部分类都被混淆了。只留下三个有名字的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BSGameSdkAuth</span><br><span class="line">BSGameSdkExceptionCode</span><br><span class="line">BSGameSdkHttpQueryMap</span><br></pre></td></tr></table></figure>  <p>一个一个看，Auth类基本上都是parse方法，对传入的参数进行json解析。ExceptionCode则是各类错误码和错误提示。<br>那重点可能会在HttpQueryMap中。  </p><h2 id="初露曙光"><a href="#初露曙光" class="headerlink" title="初露曙光"></a>初露曙光</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">a</span><span class="params">(String var1)</span> </span>&#123;</span><br><span class="line">    var1 = var1.replace(<span class="string">&quot;+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">    var1 = var1.replace(<span class="string">&quot;*&quot;</span>, <span class="string">&quot;%2A&quot;</span>);</span><br><span class="line">    var1 = var1.replace(<span class="string">&quot;%7E&quot;</span>, <span class="string">&quot;~&quot;</span>);</span><br><span class="line">    var1 = var1.replace(<span class="string">&quot;!&quot;</span>, <span class="string">&quot;%21&quot;</span>);</span><br><span class="line">    var1 = var1.replace(<span class="string">&quot;(&quot;</span>, <span class="string">&quot;%28&quot;</span>);</span><br><span class="line">    var1 = var1.replace(<span class="string">&quot;)&quot;</span>, <span class="string">&quot;%29&quot;</span>);</span><br><span class="line">    var1 = var1.replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;%27&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> var1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <p>首先是个转义方法，pass。接着看下一个方法：    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendToUri</span><span class="params">(Builder var1, String var2)</span> <span class="keyword">throws</span> UnsupportedEncodingException, NoSuchAlgorithmException </span>&#123;</span><br><span class="line">    BSGameSdkHttpQueryMap.a var3 = <span class="keyword">this</span>.getSignedQuery(var2);</span><br><span class="line">    Iterator var4 = <span class="keyword">this</span>.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">        Entry var5 = (Entry)var4.next();</span><br><span class="line">        String var6 = (String)var5.getKey();</span><br><span class="line">        String var7 = (String)var5.getValue();</span><br><span class="line">        var1.appendQueryParameter(var6, var7);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var1.appendQueryParameter(<span class="string">&quot;sign&quot;</span>, var3.b);</span><br><span class="line">    String var9 = var1.build().getEncodedQuery();</span><br><span class="line">    String var8 = <span class="keyword">this</span>.a(var9);</span><br><span class="line">    var1.encodedQuery(var8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <p>我们看到了sign，就是我们想要知道的，也就是sign的值应该是var3.b，而var3则是从getSignedQuery方法获得的。并且是一个<code>BSGameSdkHttpQueryMap.a</code>类，这是一个内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">    String a;</span><br><span class="line">    String b;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <p>接着看getSignedQuery方法。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> BSGameSdkHttpQueryMap.<span class="function">a <span class="title">getSignedQuery</span><span class="params">(String var1)</span> <span class="keyword">throws</span> UnsupportedEncodingException, NoSuchAlgorithmException </span>&#123;</span><br><span class="line">    BSGameSdkHttpQueryMap.a var2 = <span class="keyword">new</span> BSGameSdkHttpQueryMap.a();</span><br><span class="line">    StringBuilder var3 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    Iterator var4 = <span class="keyword">this</span>.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">        Entry var5 = (Entry)var4.next();</span><br><span class="line">        String var6 = (String)var5.getKey();</span><br><span class="line">        String var7 = (String)var5.getValue();</span><br><span class="line">        String var8 = URLEncoder.encode(var7, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        var8 = <span class="keyword">this</span>.a(var8);</span><br><span class="line">        var3.append(var6.toLowerCase(Locale.US));</span><br><span class="line">        var3.append(<span class="string">&#x27;=&#x27;</span>).append(var8).append(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> var13 = var3.length();</span><br><span class="line">    <span class="keyword">if</span> (var13 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        var3.deleteCharAt(var13 - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var2.a = var3.toString();</span><br><span class="line">    MessageDigest var14 = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">    var14.reset();</span><br><span class="line">    var14.update(var2.a.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    var14.update(var1.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    StringBuffer var15 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">byte</span>[] var16 = var14.digest();</span><br><span class="line">    <span class="keyword">byte</span>[] var17 = var16;</span><br><span class="line">    <span class="keyword">int</span> var9 = var16.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> var10 = <span class="number">0</span>; var10 &lt; var9; ++var10) &#123;</span><br><span class="line">        <span class="keyword">byte</span> var11 = var17[var10];</span><br><span class="line">        <span class="keyword">int</span> var12 = var11 &amp; <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">if</span> (var12 &lt; <span class="number">16</span>) &#123;</span><br><span class="line">            var15.append(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var15.append(Integer.toHexString(var12));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var2.b = var15.toString().toLowerCase(Locale.US);</span><br><span class="line">    <span class="keyword">return</span> var2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <p>先看前一部分，首先是对var4进行迭代，把所有的参数和值以<code>key=value&amp;</code>的方式进行拼接，然后去掉最后一个&amp;符号。<br>接着是调用MessageDigest对所有参数进行md5，但是注意</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var14.update(var2.a.getBytes(&quot;UTF-8&quot;));</span><br><span class="line">var14.update(var1.getBytes(&quot;UTF-8&quot;));</span><br></pre></td></tr></table></figure><p>var14除了对参数进行update外还对var1进行了update。值得一提的是，messagedigest进行多次update相当于两个拼接后再进行update。因此这个var1是关键，而var1又是appendToUri的var2，因此只需要寻找appendToUri的调用者就知道这个参数是什么了。<br>但是遗憾的是，ide对源码中的usage的支持不怎么样。因此到这里线索断了。  </p><h2 id="再辟新径"><a href="#再辟新径" class="headerlink" title="再辟新径"></a>再辟新径</h2><p>没办法，只能一个个看api包下的其他混淆类。这里因为是源码是用class文件编译出来的，所以高级搜索没法用。<br>幸运的是，我们在e类中找到了请求的api。因为在抓包的时候，我们发现客户端会对<code>/api/client/rsa</code>进行获取rsa公钥。我们在e类中发现了这个地址。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BSGameSdkAuth <span class="title">b</span><span class="params">(<span class="keyword">final</span> Context var1)</span> <span class="keyword">throws</span> BSGameSdkExceptionCode, HttpException, IOException </span>&#123;</span><br><span class="line">    c var2 = <span class="keyword">new</span> c&lt;BSGameSdkAuth&gt;() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> BSGameSdkAuth <span class="title">b</span><span class="params">(String var1x)</span> <span class="keyword">throws</span> BSGameSdkExceptionCode, HttpException, IOException </span>&#123;</span><br><span class="line">            Builder var2 = Uri.parse(var1x).buildUpon();</span><br><span class="line">            var2.path(<span class="string">&quot;/api/client/rsa&quot;</span>);</span><br><span class="line">            Map var3 = e.c(var1, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">this</span>.a(var3);</span><br><span class="line">            e.<span class="keyword">this</span>.a(var1, var3, var1x);</span><br><span class="line">            e.c(var3);</span><br><span class="line">            BSGameSdkAuth var4 = <span class="keyword">new</span> BSGameSdkAuth();</span><br><span class="line">            Uri var5 = var2.build();</span><br><span class="line">            HttpPost var6 = HttpDNSConfig.queryCachePost(var5.toString(), var3);</span><br><span class="line">            var6.addHeader(<span class="string">&quot;User-Agent&quot;</span>, <span class="string">&quot;Mozilla/5.0 BSGameSDK&quot;</span>);</span><br><span class="line">            String var7 = HttpManager.executeForString(var1, var6);</span><br><span class="line">            var4.parseRSAResponse(var7);</span><br><span class="line">            <span class="keyword">return</span> var4;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> (BSGameSdkAuth)var2.a(<span class="number">0</span>, a.s(), <span class="string">&quot;rsa&quot;</span>, (String)<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <p>主要还是看中间的几行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map var3 = e.c(var1, 1);</span><br><span class="line">this.a(var3);</span><br><span class="line">e.this.a(var1, var3, var1x);</span><br><span class="line">e.c(var3);</span><br></pre></td></tr></table></figure><p>先看e.c方法。cr^b进入方法。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">c</span><span class="params">(Context var0, <span class="keyword">int</span> var1)</span> </span>&#123;</span><br><span class="line">    a();</span><br><span class="line">    HashMap var2 = <span class="keyword">new</span> HashMap();</span><br><span class="line">    var2.put(<span class="string">&quot;game_id&quot;</span>, com.bsgamesdk.android.model.c.a);</span><br><span class="line">    var2.put(<span class="string">&quot;merchant_id&quot;</span>, com.bsgamesdk.android.model.c.f);</span><br><span class="line">    var2.put(<span class="string">&quot;version&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    var2.put(<span class="string">&quot;timestamp&quot;</span>, <span class="string">&quot;&quot;</span> + com.bsgamesdk.android.api.b.b());</span><br><span class="line">    var2.put(<span class="string">&quot;client_timestamp&quot;</span>, <span class="string">&quot;&quot;</span> + System.currentTimeMillis());</span><br><span class="line">    var2.put(<span class="string">&quot;server_id&quot;</span>, com.bsgamesdk.android.model.c.g);</span><br><span class="line">    var2.put(<span class="string">&quot;sdk_ver&quot;</span>, com.bsgamesdk.android.model.c.l);</span><br><span class="line">    var2.put(<span class="string">&quot;sdk_type&quot;</span>, com.bsgamesdk.android.model.c.s);</span><br><span class="line">    var2.put(<span class="string">&quot;c&quot;</span>, a.c());</span><br><span class="line">    var2.put(<span class="string">&quot;isRoot&quot;</span>, com.bsgamesdk.android.model.c.q);</span><br><span class="line">    var2.put(<span class="string">&quot;udid&quot;</span>, com.bsgamesdk.android.model.c.p);</span><br><span class="line">    var2.put(<span class="string">&quot;support_abis&quot;</span>, com.bsgamesdk.android.model.c.r);</span><br><span class="line">    var2.put(<span class="string">&quot;mac&quot;</span>, TextUtils.isEmpty(ab.d()) ? <span class="string">&quot;&quot;</span> : ab.d());</span><br><span class="line">    var2.put(<span class="string">&quot;imei&quot;</span>, TextUtils.isEmpty(ab.b(var0)) ? <span class="string">&quot;&quot;</span> : ab.b(var0));</span><br><span class="line">    var2.put(<span class="string">&quot;android_id&quot;</span>, TextUtils.isEmpty(l.b(var0)) ? <span class="string">&quot;&quot;</span> : l.b(var0));</span><br><span class="line">    <span class="keyword">boolean</span> var3 = com.bsgamesdk.android.b.b.checkIsLogined(var0);</span><br><span class="line">    <span class="keyword">boolean</span> var4 = com.bsgamesdk.android.b.b.checkIsTouristLogined(var0);</span><br><span class="line">    String var5 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    String var6 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (var3) &#123;</span><br><span class="line">        UserParcelable var7 = (<span class="keyword">new</span> m(var0)).c();</span><br><span class="line">        var5 = var7.uid_long + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        var6 = var7.access_token + <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var4) &#123;</span><br><span class="line">        TouristUserParceable var10 = (<span class="keyword">new</span> com.bsgamesdk.android.model.k(var0)).c();</span><br><span class="line">        var5 = var10.uid_long + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        var6 = var10.access_token + <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var2.put(<span class="string">&quot;uid&quot;</span>, var5);</span><br><span class="line">    var2.put(<span class="string">&quot;access_key&quot;</span>, var6);</span><br><span class="line">    var2.put(<span class="string">&quot;app_id&quot;</span>, com.bsgamesdk.android.model.c.a);</span><br><span class="line">    var2.put(<span class="string">&quot;sdk_log_type&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    var2.put(<span class="string">&quot;ver&quot;</span>, com.bsgamesdk.android.model.c.i);</span><br><span class="line">    var2.put(<span class="string">&quot;version_code&quot;</span>, com.bsgamesdk.android.model.c.j);</span><br><span class="line">    var2.put(<span class="string">&quot;channel_id&quot;</span>, com.bsgamesdk.android.model.c.c);</span><br><span class="line">    h.a(var2);</span><br><span class="line">    var2.put(<span class="string">&quot;platform_type&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">    var2.put(<span class="string">&quot;model&quot;</span>, h.c(var0));</span><br><span class="line">    var2.put(<span class="string">&quot;brand&quot;</span>, h.d(var0));</span><br><span class="line">    var2.put(<span class="string">&quot;net&quot;</span>, h.a(var0));</span><br><span class="line">    var2.put(<span class="string">&quot;operators&quot;</span>, h.b(var0));</span><br><span class="line">    var2.put(<span class="string">&quot;pf_ver&quot;</span>, h.e(var0));</span><br><span class="line">    var2.put(<span class="string">&quot;dp&quot;</span>, com.bsgamesdk.android.model.c.t);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String var11 = TextUtils.isEmpty(o.a(var0).c) ? <span class="string">&quot;&quot;</span> : o.a(var0).c;</span><br><span class="line">        String var8 = TextUtils.isEmpty(o.a(var0).d) ? <span class="string">&quot;&quot;</span> : o.a(var0).d;</span><br><span class="line">        var2.put(<span class="string">&quot;old_buvid&quot;</span>, var11);</span><br><span class="line">        var2.put(<span class="string">&quot;cur_buvid&quot;</span>, var8);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable var9) &#123;</span><br><span class="line">        var2.put(<span class="string">&quot;old_buvid&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        var2.put(<span class="string">&quot;cur_buvid&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        LogUtils.printThrowableStackTrace(var9);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(b)) &#123;</span><br><span class="line">        b = com.bsgamesdk.android.utils.a.a(var0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var2.put(<span class="string">&quot;apk_sign&quot;</span>, b);</span><br><span class="line">    var2.put(<span class="string">&quot;oaid&quot;</span>, TextUtils.isEmpty(com.bsgamesdk.android.model.c.z) ? <span class="string">&quot;&quot;</span> : com.bsgamesdk.android.model.c.z);</span><br><span class="line">    var2.put(<span class="string">&quot;fingerprint&quot;</span>, TextUtils.isEmpty(com.bsgamesdk.android.model.c.A) ? <span class="string">&quot;&quot;</span> : com.bsgamesdk.android.model.c.A);</span><br><span class="line">    <span class="keyword">return</span> var2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法中，参数var1是个遗留参数，并没有使用。应该只是为了重载方法。这个方法的作用就是添加各种参数，这些参数在抓包的时候param里面基本上都有。除了个别参数。和sign无关，往回看。接下来是两个this.a方法，也都是添加参数。<br>接下来是另一个c方法。<code>e.c(var3);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">c</span><span class="params">(Map&lt;String, String&gt; var0)</span> </span>&#123;</span><br><span class="line">    String var1 = d(var0);</span><br><span class="line">    var0.put(<span class="string">&quot;sign&quot;</span>, var1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <p>很好，这可能是我们需要的，继续跟进d方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">d</span><span class="params">(Map&lt;String, String&gt; var0)</span> </span>&#123;</span><br><span class="line">    String var1 = a(var0);</span><br><span class="line">    String var2 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    var2 = p.a(var1, com.bsgamesdk.android.model.c.b);</span><br><span class="line">    <span class="keyword">return</span> var2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <p>先看第一行<code>String var1 = a(var0);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">a</span><span class="params">(Map&lt;String, String&gt; var0)</span> </span>&#123;</span><br><span class="line">    ArrayList var1 = <span class="keyword">new</span> ArrayList(var0.keySet());</span><br><span class="line">    Collections.sort(var1);</span><br><span class="line">    String var2 = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> var3 = <span class="number">0</span>; var3 &lt; var1.size(); ++var3) &#123;</span><br><span class="line">        String var4 = (String)var1.get(var3);</span><br><span class="line">        <span class="keyword">if</span> (var4 != <span class="keyword">null</span> &amp;&amp; !var4.equalsIgnoreCase(<span class="string">&quot;item_name&quot;</span>) &amp;&amp; !var4.equalsIgnoreCase(<span class="string">&quot;item_desc&quot;</span>)) &#123;</span><br><span class="line">            String var5 = (String)var0.get(var4);</span><br><span class="line">            var2 = var2 + var5;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <p>逻辑很简单，对map的参数key进行排序，然后把value拼接到一起。<br>接着看<code>var2 = p.a(var1, com.bsgamesdk.android.model.c.b);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">a</span><span class="params">(String var0, String var1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String var2 = var0 + var1;</span><br><span class="line">        MessageDigest var3 = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">        var3.update(var2.getBytes(Charset.defaultCharset()));</span><br><span class="line">        <span class="keyword">byte</span>[] var4 = var3.digest();</span><br><span class="line">        <span class="keyword">return</span> a(var4);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException var5) &#123;</span><br><span class="line">        LogUtils.printExceptionStackTrace(var5);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <p>其实就是把两个参数拼接起来然后进行MD5摘要。这就是我们的sign。<br>总结：sign就是所有参数排序后保留value然后拼接<code>com.bsgamesdk.android.model.c.b</code>的值进行hash。<br>那新的问题来了，这个model.c.b的值又是什么呢？</p><h2 id="接近答案"><a href="#接近答案" class="headerlink" title="接近答案"></a>接近答案</h2><p>跟进model.c类，b是一个静态String，而b的赋予在c类的a方法中，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">(Context var0, String var1, String var2, String var3, String var4, String var5, String var6, <span class="keyword">boolean</span> var7, String var8)</span> </span>&#123;</span><br><span class="line">    f = var1;</span><br><span class="line">    a = var2;</span><br><span class="line">    g = var3;</span><br><span class="line">    d = var7;</span><br><span class="line">    i = f(var0);</span><br><span class="line">    j = g(var0);</span><br><span class="line">    k = var5;</span><br><span class="line">    l = var6;</span><br><span class="line">    m = var8;</span><br><span class="line">    b = var4;</span><br><span class="line">    c = d(var0);</span><br><span class="line">    e = com.bsgamesdk.android.utils.o.a(var0).a();</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <p>之后就没有了，既然反向不行，那就从正向开始。<br>我们找到demo的MainActivity，跟进官方的文档，必须在oncreate中调用BSGameSdk.initialize方法完成sdk的初始化。我们跟进initialize方法。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BSGameSdk <span class="title">initialize</span><span class="params">(<span class="keyword">boolean</span> var0, Activity var1, String var2, String var3, String var4, String var5, InitCallbackListener var6, ExitCallbackListener var7)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>) &#123;</span><br><span class="line">        com.bsgamesdk.android.utils.f.a(var1.getApplicationContext());</span><br><span class="line">        f = <span class="keyword">new</span> BSGameSdk(var0, var1, var2, var3, var4, var5, var6, var7);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>  <p>跟进BSGameSdk</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressLint(&#123;&quot;NewApi&quot;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">BSGameSdk</span><span class="params">(<span class="keyword">boolean</span> var1, Activity var2, String var3, String var4, String var5, String var6, <span class="keyword">final</span> InitCallbackListener var7, ExitCallbackListener var8)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    com.bsgamesdk.android.model.c.a(var2, var3, var4, var5, var6, var9.getSDK_NAME(), var9.getSDK_Version(), var9.isBiliSDK(), var9.getVersion());</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <p>我们找到了刚才model.c的中a方法的调用方。<br>a方法中我们需要的值是参数中的var4也就是a方法中的第5个参数。对应到BSGameSdk构造方法就是var6，而var6在这则是第6个参数，再往上走是initialize方法，第6个参数是var5，也是第6个参数。<br>最后是MainActivity调用方，第6个参数对应的是app_key，至此破案。  </p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我们从源码中得到了sign的计算方式，是一堆参数排序后取value，然后拼接app_key后进行md5摘要。刚开始的HttpQueryMap可能是针对get方法在其他地方使用到，毕竟进行了url转义，当然也可能是一个遗留类，我们不得而知。<br>这次源码分析还是比较顺利，主要还是源码没有强加密和混淆，使得分析更加容易些。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近看到pcr查看个人信息的脚本，比较感兴趣就稍微研究了一下。之前很早的时候对pcr进行过抓包，没想到是基于http协议的，感觉日本那边的i
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Java" scheme="https://re0.top/tags/Java/"/>
    
      <category term="Android" scheme="https://re0.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Spring Boot自动配置</title>
    <link href="https://re0.top/2020/12/13/autoConfiguration/"/>
    <id>https://re0.top/2020/12/13/autoConfiguration/</id>
    <published>2020-12-13T06:10:00.000Z</published>
    <updated>2020-12-13T09:41:54.263Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>好久没写技术性文章了，今天就来谈谈SpringBoot中最常见但是却很少人去了解的知识，那就是SpringBoot是如何让你免去如此多的xml配置的。<br>本人技术有限，文章如有错误请谅解。  </p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>用过SpringBoot的人都很清楚，它很方便，不用配置xml，开箱即用，那你是否想过SpringBoot是如何实现自动配置的呢？我也很好奇，那本文就深入源码看看SpringBoot都做了些什么来自动配置的吧。  </p><h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><p>那我们当然是新建一个项目啦，我们很清楚，springboot项目都用一个以@SpringBootApplication为注解的主类，这是我们项目的入口点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(FirstDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <p>那通过上面的导入，我们知道@SpringBootApplication来自autoconfigure包中，看名字就知道这是我们需要的自动配置相关的包。那我们跟进这个注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">    excludeFilters = &#123;@Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">), @Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">)&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>  <p>这个注解里面使用@AliasFor将多个注解组合，简单解释就是将它上面的注解合并成当前注解，即SpringBootApplication。换句话来说，@SpringBootApplication就相当于@SpringBootConfiguration，@EnableAutoConfiguration，@ComponentScan三个注解一起作用。<br>那其中@ComponentScan是我们比较熟悉的，用于扫描bean组件装配到ioc容器中，这里我们便不展开。<br>然后是@SpringBootConfiguration，跟进后我们发现其实就是@Configuration中的一种，也就是配置类，这里我们也不多讲。<br>本文的主角就是@EnableAutoConfiguration。</p><h2 id="深入-EnableAutoConfiguration"><a href="#深入-EnableAutoConfiguration" class="headerlink" title="深入@EnableAutoConfiguration"></a>深入@EnableAutoConfiguration</h2><p>我们跟进@EnableAutoConfiguration。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    String ENABLED_OVERRIDE_PROPERTY = <span class="string">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <p>有两个主要注解，@AutoConfigurationPackage和@Import({AutoConfigurationImportSelector.class})。<br>我们先来看看@AutoConfigurationPackage。</p><h3 id="AutoConfigurationPackage"><a href="#AutoConfigurationPackage" class="headerlink" title="@AutoConfigurationPackage"></a>@AutoConfigurationPackage</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import(&#123;Registrar.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;</span><br><span class="line">    String[] basePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] basePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <p>这里提一下，import注解是spring提供的，它的作用是将某个类实例化后加入ioc容器中。<br>那么我们就可以知道@AutoConfigurationPackage其实就是将Registrar.class实例化后加入ioc容器当中。继续跟进Registrar类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Registrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">DeterminableImports</span> </span>&#123;</span><br><span class="line">    Registrar() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        AutoConfigurationPackages.register(registry, (String[])(<span class="keyword">new</span> AutoConfigurationPackages.PackageImports(metadata)).getPackageNames().toArray(<span class="keyword">new</span> String[<span class="number">0</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">determineImports</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.singleton(<span class="keyword">new</span> AutoConfigurationPackages.PackageImports(metadata));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <p>我们发现是一个静态内部类，其中有两个方法registerBeanDefinitions和determineImports。我们分别在两个方法中加入断点，调试下。其中<code>(String[])(new AutoConfigurationPackages.PackageImports(metadata)).getPackageNames().toArray(new String[0])</code>返回的是@SpringBootApplication注解所在的类的包名，在这个项目中就是<code>com.example.first_demo</code>。<br>然后就是determineImports，在项目中没有触发断点，我们通过无敌的google大法知道返回的是一组代表要导入项的对象。这对本文的主题无多大关系，因此就略过。<br><strong>至此，@AutoConfigurationPackage的作用就是将主配置类所在的包及子包中的所有组件扫描到ioc容器当中。</strong></p><h3 id="Import-AutoConfigurationImportSelector-class"><a href="#Import-AutoConfigurationImportSelector-class" class="headerlink" title="@Import({AutoConfigurationImportSelector.class})"></a>@Import({AutoConfigurationImportSelector.class})</h3><p>重新回到@EnableAutoConfiguration，发现它将AutoConfigurationImportSelector添加到容器中。这应该就是自动配置的核心所在，我们跟进这个类。这个类中的方法很多，我们挑一些重要的来讲。<br>像getAutoConfigurationEntry方法，源码中还特意添加了注释。这个方法用于获取需要自动装配的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the &#123;<span class="doctag">@link</span> AutoConfigurationEntry&#125; based on the &#123;<span class="doctag">@link</span> AnnotationMetadata&#125;</span></span><br><span class="line"><span class="comment"> * of the importing &#123;<span class="doctag">@link</span> Configuration <span class="doctag">@Configuration</span>&#125; class.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> annotationMetadata the annotation metadata of the configuration class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the auto-configurations that should be imported</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AutoConfigurationEntry <span class="title">getAutoConfigurationEntry</span><span class="params">(AnnotationMetadata annotationMetadata)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">    &#125;</span><br><span class="line">    AnnotationAttributes attributes = getAttributes(annotationMetadata);</span><br><span class="line">    List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">    configurations = removeDuplicates(configurations);</span><br><span class="line">    Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class="line">    checkExcludedClasses(configurations, exclusions);</span><br><span class="line">    configurations.removeAll(exclusions);</span><br><span class="line">    configurations = getConfigurationClassFilter().filter(configurations);</span><br><span class="line">    fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AutoConfigurationEntry(configurations, exclusions);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <p>在这个方法中又有一个比较重要的方法，getCandidateConfigurations。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the auto-configuration class names that should be considered. By default</span></span><br><span class="line"><span class="comment"> * this method will load candidates using &#123;<span class="doctag">@link</span> SpringFactoriesLoader&#125; with</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #getSpringFactoriesLoaderFactoryClass()&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> metadata the source metadata</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> attributes the &#123;<span class="doctag">@link</span> #getAttributes(AnnotationMetadata) annotation</span></span><br><span class="line"><span class="comment"> * attributes&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a list of candidate configurations</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class="line">            getBeanClassLoader());</span><br><span class="line">    Assert.notEmpty(configurations, <span class="string">&quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;</span></span><br><span class="line">            + <span class="string">&quot;are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <p>这个方法返回所有候选配置类，即包括需要加载的和用户指定排除的。<br>在这个方法中使用了SpringFactoriesLoader.loadFactoryNames，SpringFactoriesLoader是Spring框架的一个内部工具类，用于加载类。继续跟进方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Load the fully qualified class names of factory implementations of the</span></span><br><span class="line"><span class="comment"> * given type from &#123;<span class="doctag">@value</span> #FACTORIES_RESOURCE_LOCATION&#125;, using the given</span></span><br><span class="line"><span class="comment"> * class loader.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;As of Spring Framework 5.3, if a particular implementation class name</span></span><br><span class="line"><span class="comment"> * is discovered more than once for the given factory type, duplicates will</span></span><br><span class="line"><span class="comment"> * be ignored.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> factoryType the interface or abstract class representing the factory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> classLoader the ClassLoader to use for loading resources; can be</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> null&#125; to use the default</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if an error occurs while loading factory names</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #loadFactories</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryType, <span class="meta">@Nullable</span> ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    ClassLoader classLoaderToUse = classLoader;</span><br><span class="line">    <span class="keyword">if</span> (classLoaderToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">        classLoaderToUse = SpringFactoriesLoader.class.getClassLoader();</span><br><span class="line">    &#125;</span><br><span class="line">    String factoryTypeName = factoryType.getName();</span><br><span class="line">    <span class="keyword">return</span> loadSpringFactories(classLoaderToUse).getOrDefault(factoryTypeName, Collections.emptyList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <p>这个方法返回加载类的全名，通过loadSpringFactories私用方法，我们详细来看这个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(ClassLoader classLoader) &#123;</span><br><span class="line">    Map&lt;String, List&lt;String&gt;&gt; result = cache.get(classLoader);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Enumeration&lt;URL&gt; urls = classLoader.getResources(FACTORIES_RESOURCE_LOCATION);</span><br><span class="line">        <span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">            URL url = urls.nextElement();</span><br><span class="line">            UrlResource resource = <span class="keyword">new</span> UrlResource(url);</span><br><span class="line">            Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class="line">                String factoryTypeName = ((String) entry.getKey()).trim();</span><br><span class="line">                String[] factoryImplementationNames =</span><br><span class="line">                        StringUtils.commaDelimitedListToStringArray((String) entry.getValue());</span><br><span class="line">                <span class="keyword">for</span> (String factoryImplementationName : factoryImplementationNames) &#123;</span><br><span class="line">                    result.computeIfAbsent(factoryTypeName, key -&gt; <span class="keyword">new</span> ArrayList&lt;&gt;())</span><br><span class="line">                            .add(factoryImplementationName.trim());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Replace all lists with unmodifiable lists containing unique elements</span></span><br><span class="line">        result.replaceAll((factoryType, implementations) -&gt; implementations.stream().distinct()</span><br><span class="line">                .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList)));</span><br><span class="line">cache.put(classLoader, result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Unable to load factories from location [&quot;</span> +</span><br><span class="line">FACTORIES_RESOURCE_LOCATION + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <p>那么简单看下源码我们可以得知，该方法就是读取每个类中的META-INF/spring.factories文件中设置的所有xxxAutoConfiguration类，并使用PropertiesLoaderUtils.loadProperties获取其所有属性值，将这些值作为自动配置类添加到ioc容器当中，相当于完成了配置，以前需要手动配置的东西，自动配置帮我们添加了默认值。<br>我们可以看看spring-boot-autoconfigure中的spring.factories。这些都是默认自动装配的。<br>简单贴一些。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br></pre></td></tr></table></figure>  <p>比如我们看看AopAutoConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.aop&quot;, name = &quot;auto&quot;, havingValue = &quot;true&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line">    <span class="meta">@ConditionalOnClass(Advice.class)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectJAutoProxyingConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line">        <span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = false)</span></span><br><span class="line">        <span class="meta">@ConditionalOnProperty(prefix = &quot;spring.aop&quot;, name = &quot;proxy-target-class&quot;, havingValue = &quot;false&quot;,</span></span><br><span class="line"><span class="meta">                matchIfMissing = false)</span></span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkDynamicAutoProxyConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line">        <span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line">        <span class="meta">@ConditionalOnProperty(prefix = &quot;spring.aop&quot;, name = &quot;proxy-target-class&quot;, havingValue = &quot;true&quot;,</span></span><br><span class="line"><span class="meta">                matchIfMissing = true)</span></span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibAutoProxyConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingClass(&quot;org.aspectj.weaver.Advice&quot;)</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty(prefix = &quot;spring.aop&quot;, name = &quot;proxy-target-class&quot;, havingValue = &quot;true&quot;,</span></span><br><span class="line"><span class="meta">            matchIfMissing = true)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassProxyingConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ClassProxyingConfiguration(BeanFactory beanFactory) &#123;</span><br><span class="line">            <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> BeanDefinitionRegistry) &#123;</span><br><span class="line">                BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;</span><br><span class="line">                AopConfigUtils.registerAutoProxyCreatorIfNecessary(registry);</span><br><span class="line">                AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <p>可以清楚地看到，springboot提供了默认配置类，并通过条件注解来加载配置到容器中。</p><h2 id="第三方jar自动配置"><a href="#第三方jar自动配置" class="headerlink" title="第三方jar自动配置"></a>第三方jar自动配置</h2><p>从上面我们已经可以知道springboot会扫描所有类的spring.factories，并从中读取自动配置类。就比如常用的mybatis，我们在项目中导入mybatis，并查看它的依赖。<br>一般来说，我们在springboot项目中都是使用mybatis-spring-boot-starter导入到pom文件中，我们查看这个包的依赖，其实就是导入mybatis，jdbc，还有mybatis-spring-boot-autoconfigure，看到autoconfigure，我们知道肯定就是这个包完成自动配置。<br>我们查看这个包的资源文件，果然发现了spring.factories文件。里面就几行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration</span><br></pre></td></tr></table></figure>  <p>这里默认配置类我就不贴了，就是通过条件注解将默认配置添加到spring中。</p><h2 id="条件注解"><a href="#条件注解" class="headerlink" title="条件注解"></a>条件注解</h2><p>上文提到了条件注解，它作用在类上就是满足一定条件时类才会进行装配，其中条件注解有：</p><ul><li>ConditionalOnBean 容器中存在某个bean时生效</li><li>ConditionalOnClass classpath中存在某类时生效</li><li>ConditionalOnCloudPlatform 当指定的云平台处于活动状态时生效</li><li>ConditionalOnExpression SpEL表达式结果为true时生效</li><li>ConditionalOnJava 指定的Java版本存在时生效</li><li>ConditionalOnJndi 指定的JNDI存在时生效</li><li>ConditionalOnMissingBean 容器中不存在某个bean时生效</li><li>ConditionalOnMissingClass classpath中不存在某类时生效</li><li>ConditionalOnNotWebApplication 非Web应用环境下生效</li><li>ConditionalOnProperty 参数设置或者值一致时生效</li><li>ConditionalOnResource 指定的文件存在时生效</li><li>ConditionalOnSingleCandidate 容器中该类型Bean只有一个或@Primary的只有一个时生效</li><li>ConditionalOnWarDeployment 使用WAR部署时生效</li><li>ConditionalOnWebApplication Web应用环境下生效</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>那本文简单从源码入手，讲解了springboot是如何自动配置的，@SpringBootApplication注解中包含了@EnableAutoConfiguration，这个注解帮助我们自动配置。<br>首先springboot在启动时扫描同一个包类的所有的组件，并检查各个jar包中是否存在META-INF/spring.factories 文件，然后如果第三方jar中存在这个文件，会根据文件中设置的自动装配类进行加载，使之生效。如此便实现了自动配置。<br>不过话说回来，说是自动配置，其实就是源码和第三方包中帮你把配置的功夫省下来了，节约不少时间，也能防止很多bug的出现。<br>那本文也留下很多没提到的，比如springboot怎么开始自动配置的，我们知道它如何装配，但是我们却不知道如何开始。这个也是个有趣的点，之后会写一写springboot的生命周期相关的文章。</p><h1 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h1><p>那本文写到这里就结束了，2020年马上也要过去了，时间是真的快，有空的话也会写写2020年的总结。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;好久没写技术性文章了，今天就来谈谈SpringBoot中最常见但是却很少人去了解的知识，那就是SpringBoot是如何让你免去如此多的xm
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Java" scheme="https://re0.top/tags/Java/"/>
    
      <category term="Spring" scheme="https://re0.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>回顾数据库事务隔离级别</title>
    <link href="https://re0.top/2020/11/01/transaction_isolation/"/>
    <id>https://re0.top/2020/11/01/transaction_isolation/</id>
    <published>2020-11-01T06:10:00.000Z</published>
    <updated>2020-11-02T07:24:22.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于数据库隔离级别，前前后后可能复习了好多遍，但是很经常就忘记，今天就简单整理下概念和实例，方便以后回顾。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h2><p>首先我们先明确事务是什么？为什么要有事务？<br>事务(Transaction)，其实就是一个操作序列，我们知道，操作数据库是什么一条条SQL语句来实现的，那么事务就是包含这些SQL操作的清单。<br>至于为什么要有事务，是因为事务是为了解决并发情况下如何保持数据一致性的问题。通过事务，我们能在并发情况下保持数据的一致性。    </p><h2 id="事务的四大特性"><a href="#事务的四大特性" class="headerlink" title="事务的四大特性"></a>事务的四大特性</h2><p>事务的四大特性简称ACID，分别为原子性(Atomicity)，一致性(Consistency)，隔离性(Isolation)，持久性(Durability)。<br>所谓原子性，是指事务中包含的所有操作必须全部成功或者全部失败。<br>一致性，是指事务执行前后，数据的状态是一致的。一般来说，就是指数据不会凭空产生或消失。就拿库存和订单来说，商品的订单增加必定伴随着库存的减少，两者涉及的商品总量是一致的。<br>隔离性，是指多个事务并发执行时，彼此之间要相互隔离，简单来说就是事务感受不到其他事务的存在。这就是我之后要讲的隔离级别。<br>持久性，是指事务一旦提交，那么对于数据库中数据的改变是永久性的。  </p><h2 id="使用事务"><a href="#使用事务" class="headerlink" title="使用事务"></a>使用事务</h2><h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3><p>通常情况下，对mysql命令行的所有语句都是自动提交的，可以简单理解成每条SQL语句都是一个独立的事务，在我们写SQL之前就开启了事务，当我们回车之后自动帮我们提交给数据库。<br>那这只是单条SQL语句，如果在命令行中要执行多条SQL语句的事务，需要使用begin和commit命令来显示开启事务。在事务提交之前，所有的修改都不会应用到数据上。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from user;</span><br><span class="line">+----+------+</span><br><span class="line">| id | name |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | abc  |</span><br><span class="line">|  2 | asd  |</span><br><span class="line">+----+------+</span><br><span class="line">2 rows in set</span><br><span class="line"></span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into user values (3,&quot;aaa&quot;);</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; select * from user;</span><br><span class="line">+----+------+</span><br><span class="line">| id | name |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | abc  |</span><br><span class="line">|  2 | asd  |</span><br><span class="line">|  3 | aaa  |</span><br><span class="line">+----+------+</span><br><span class="line">3 rows in set</span><br><span class="line"></span><br><span class="line">mysql&gt; commit;</span><br><span class="line">Query OK, 0 rows affected</span><br></pre></td></tr></table></figure><p>如果我们在commit之前打开另一个命令行进行查询，我们可以发现新插入的数据并没有在数据库中。  </p><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><p>那在Spring中我们要使用事务，简单来说就是使用@Transactional注解来实现，即在方法上标注注解就可以实现。简单写下：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDAO userDAO;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = userDAO.insert(user);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;显式抛出异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们在addUser方法中手动抛出异常，如果@Transactional注解指定了触发回滚的异常类型，那么如果抛出了该种异常，就会自动回滚(rollback)，数据不会插入到数据库中。<br>那么关于spring中的事务管理与深入学习，就留到之后的文章再讨论吧。  </p><h2 id="并发事务所出现的问题"><a href="#并发事务所出现的问题" class="headerlink" title="并发事务所出现的问题"></a>并发事务所出现的问题</h2><p>前面提到在并发事务时，事务是相互隔离的，但是隔离有性能代价的，隔离越彻底，那么性能就越差，所以数据库会提供不同级别的隔离策略，开发者需要考虑事务并发的安全性与性能上的差异，来选择合适的隔离级别。<br>那么事务并发会引发哪些数据上的不安全性呢？  </p><h3 id="丢失更新"><a href="#丢失更新" class="headerlink" title="丢失更新"></a>丢失更新</h3><p>丢失更新分为两类，一般称为第一类丢失更新和第二类丢失更新。<br>第一类丢失更新是指，在A事务回滚后，把已经提交的B事务的数据给覆盖掉了。例如A事务是扣款100元，而B事务是增加100元，在A事务已经修改余额但是还未提交或回滚时，B事务已经增加了100元。这时候A事务回滚，变为原来的钱，此时B事务增加的100元就消失了。<br>第二类丢失更新，是指在A事务提交后，把已经提交的B事务的数据给覆盖掉了。与第一类丢失更新类似，区别在于第一类是回滚，而第二类是提交。<br>丢失更新本质上和<strong>可重复读</strong>是同一类并发的问题，多个数据查询同一数据，都是基于自己的查询来更新数据，会造成最后一个提交或回滚的事务覆盖掉其他已经提交的事务。  </p><h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3><p>脏读的定义是读到未提交的数据。<br>这个好理解，假设原来有100元，现在A事务增加100元，余额变成200元，但此时还未提交，这时B事务读取到了事务A修改后的数据，即读取到余额为200元，然后把200元扣款成0元，并提交了数据。但最后A事务却进行了回滚，把余额重新变为100元。这样就相当于无缘无故增加了200块钱。<br>在默认隔离级别下，避免了脏读操作。  </p><h3 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h3><p>不可重复读是指读到了已经提交的更新数据，即一个事务中两次相同查询却返回了不同的<strong>更新数据</strong>。</p><h3 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h3><p>幻读与不可重复读类似。幻读是指在一个事务中的两次相同查询却查到了另一个事务已提交的<strong>新插入数据</strong>。<br>两者区别是不可重复读是由数据修改产生的，而幻读是数据插入或者删除产生的。  </p><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><p>那么为了解决上述的事务并发问题，Mysql中定义了四种隔离级别，分别是读未提交，读已提交，可重复读，可串行化。  </p><h3 id="读未提交-READ-UNCOMMITTED"><a href="#读未提交-READ-UNCOMMITTED" class="headerlink" title="读未提交(READ UNCOMMITTED)"></a>读未提交(READ UNCOMMITTED)</h3><p>在这种隔离级别下，事务A能读取到事务B修改但是未提交的数据，那么就会导致脏读，不可重复读和幻读问题。  </p><h3 id="读已提交-READ-COMMITTED"><a href="#读已提交-READ-COMMITTED" class="headerlink" title="读已提交(READ COMMITTED)"></a>读已提交(READ COMMITTED)</h3><p>这种隔离级别下，事务A只能在事务B修改并且提交之后才能读取到修改后的数据。<br>它解决了脏读问题，但是会发生不可重复读和幻读问题。  </p><h3 id="可重复读-REPEATABLE-READ"><a href="#可重复读-REPEATABLE-READ" class="headerlink" title="可重复读(REPEATABLE READ)"></a>可重复读(REPEATABLE READ)</h3><p>在这种隔离级别下，当事务B做出修改并提交后，只有事务A<strong>提交之后</strong>才能读到事务B修改的数据。<br>那可重复读解决了脏读和不可重复读问题，但是仍可能会发生幻读问题。<br>Q：Mysql中在update的时候会锁住当前行，但是为什么其他事务还能读到数据呢？<br>A：因为Mysql的innoDB有MVCC机制，可以使用快照读取数据，而不阻塞。那后面我会讲讲这个机制。  </p><h3 id="可串行化-SERIALIZABLE"><a href="#可串行化-SERIALIZABLE" class="headerlink" title="可串行化(SERIALIZABLE)"></a>可串行化(SERIALIZABLE)</h3><p>在这种隔离级别下，如果两个事务都是对数据进行修改，那么事务将以串行化的方式顺序执行，保证数据的安全。以下分四种情况讨论，假设事务A先于事务B：  </p><ul><li>如果事务A与事务B都是读取同一个数据，那这种情况下事务不会阻塞。因为没有读数据进行修改。</li><li>如果事务A先读取数据，这时事务B要修改这行数据，那么事务B会阻塞直到事务A提交。</li><li>如果事务A先修改数据，事务B要读取数据，那么事务B会阻塞直到事务A提交。  </li><li>如果事务A先修改数据，而事务B也要修改这行数据，那么事务B会等到事务A提交过后再进行修改。  </li></ul><p>那么综上所述，可串行化就是根据事务的先后顺序，来决定读取和修改数据的先后。可以简单理解成当前一个事务结束，后一个事务才开始，但是要注意的是，后一个事务其实早就开始了，只是被阻塞而已。<br>可串行化下，读取会获得<strong>表级的共享锁</strong>，因此读写相互就会阻塞。<br>那么在可串行化下，解决了脏读，不可重复读还有幻读问题，避免了并发事务中的读取与修改问题。  </p><h3 id="查看和修改事务隔离级别"><a href="#查看和修改事务隔离级别" class="headerlink" title="查看和修改事务隔离级别"></a>查看和修改事务隔离级别</h3><p>分别为系统隔离级别和会话隔离级别。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select @@global.tx_isolation,@@tx_isolation;</span><br><span class="line">+-----------------------+-----------------+</span><br><span class="line">| @@global.tx_isolation | @@tx_isolation  |</span><br><span class="line">+-----------------------+-----------------+</span><br><span class="line">| REPEATABLE-READ       | REPEATABLE-READ |</span><br><span class="line">+-----------------------+-----------------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br><span class="line">mysql&gt; set global transaction isolation level Repeatable Read;</span><br><span class="line">Query OK, 0 rows affected</span><br><span class="line"></span><br><span class="line">mysql&gt; set session transaction isolation level Repeatable Read;</span><br><span class="line">Query OK, 0 rows affected</span><br></pre></td></tr></table></figure><h2 id="mysql如何实现隔离级别"><a href="#mysql如何实现隔离级别" class="headerlink" title="mysql如何实现隔离级别"></a>mysql如何实现隔离级别</h2><h3 id="两段锁协议"><a href="#两段锁协议" class="headerlink" title="两段锁协议"></a>两段锁协议</h3><p>首先我们要明白数据库遵循的是两段锁协议，即事务分为两个阶段，加锁和解锁。<br>加锁阶段，就是在相应的操作前要申请对应的锁。如在读操作前要申请S锁(share共享锁)，此时其他事务可以继续添加S锁，但不能添加X锁；又如在写操作前要申请X锁(排他锁)，此时其他事务不能添加任何锁。如果加锁不成功那么事务会等待直到加锁成功。<br>解锁阶段，一般在事务的提交时，会同时释放这个事务所申请的所有锁。<br>那么两段锁协议无法避免死锁，但是能保证事务并发调度是串行化的(注意不是隔离级别)，在数据备份与恢复时十分重要。 </p><h3 id="读已提交与可重复读的加锁方式"><a href="#读已提交与可重复读的加锁方式" class="headerlink" title="读已提交与可重复读的加锁方式"></a>读已提交与可重复读的加锁方式</h3><p>前面有提到过，mysql当中有表锁和行锁，表锁锁住的是整张表，例如可串行化下就是使用表锁，而行锁则是锁住有限的数据行。  </p><h4 id="读已提交-RC"><a href="#读已提交-RC" class="headerlink" title="读已提交(RC)"></a>读已提交(RC)</h4><p>在读已提交这个隔离级别中，假设事务A与事务B都要修改同一条数据，但是事务A先于事务B，那么根据前面我们知道，读已提交就是事务B只能读到事务A已经修改的数据。那么当事务A修改数据后，但是并未提交时，根据两段锁协议，事务A会在修改之前申请X锁，在提交之后释放，那么事务A一直不commit，则会导致事务B一直拿不到锁，直到超时。  </p><p>那么这里有一个值得注意的地方。那就是mysql如何确定要获取哪个行的行级锁呢？答案就是索引。假设id为索引，那么<code>update user set name = &quot;123&quot; where id = 1;</code>这条语句会根据id来找到相应的行，并获取这个行的行级锁。如果SQL语句的条件不是根据索引，那么此时mysql会给整个表的行加行级锁。<br>那么更有意思的出现了，mysql锁住所有行之后，会再次进行过滤，发现条件不满足时，会直接将该行的行级锁给释放，这违反了二段锁协议。这样确定了最后只有满足条件的行上加了锁。（详情见《高性能Mysql》）  </p><h4 id="可重复读-RR"><a href="#可重复读-RR" class="headerlink" title="可重复读(RR)"></a>可重复读(RR)</h4><p>这个是Mysql中innodb默认的隔离级别。我们知道这个级别下，同一个事务中的相同查询只会查到相同的数据。假设事务A做了两次查询，但是事务B和事务C同时在两次查询中间修改了数据，但是却返回了相同的数据。<br>如果使用锁来实现，又是如何实现呢？很简单，既然不可重复读的重点是update和delete，那么我在读取数据时直接加X锁，其他事务无法修改这些数据，那么就可以实现可重复读了。但是幻读又是怎么解决的呢？前面也简单提到过，可串行化的隔离级别，本质上就是通过读锁和写锁实现，只不过读写锁互斥，这就解决了幻读问题。<br>上面所讲的，就是使用<strong>悲观锁</strong>来实现隔离级别的，但是mysql出于性能考虑，RR级别下是采用乐观锁为基础的MVCC协议来实现。  </p><h3 id="MVCC协议"><a href="#MVCC协议" class="headerlink" title="MVCC协议"></a>MVCC协议</h3><h4 id="悲观锁与乐观锁"><a href="#悲观锁与乐观锁" class="headerlink" title="悲观锁与乐观锁"></a>悲观锁与乐观锁</h4><p>在谈这个协议之前，我们先来讲讲悲观锁和乐观锁。<br>前面的文章我也提到过，悲观锁是指认为所有数据随时都可能被修改，而乐观锁则是认为数据并不是随时会更新，所以它只会在更新时判断数据是否已经进行了更新。<br>那么乐观锁大多数是基于版本号来实现的。即在数据行中添加一个新的数据段version，通过这个version来判断读取的数据和当前数据库中的数据是否是同一个，也就是是否已经被修改过。  </p><h4 id="innoDB中MVCC的实现"><a href="#innoDB中MVCC的实现" class="headerlink" title="innoDB中MVCC的实现"></a>innoDB中MVCC的实现</h4><p>MVCC，全称为Multi-Version Concurrency Control，即多版本并发控制。MVCC没有固定的规范，所以每个数据库的实现可能会不同，这里讲讲innoDB中的实现。<br>在innoDB当中，每行记录都会由两个隐藏的列，一个是创建版本号，另一个是删除版本号。创建版本号是指创建一个数据行的事务版本号(事务版本号：事务开始时的系统版本号；系统版本号：每开始一个事务，系统版本号就会递增)。(ps.搁着套娃呢)<br>删除版本号则是delete操作时的版本号。<br>在RR级别下，各种操作如下：</p><ul><li>insert操作时，记录当前事务版本号为当前行的创建版本号。</li><li>delete操作时，记录当前事务版本号到删除版本号。</li><li>update操作时，先记录当前事务版本号到删除版本号，再增加一条记录，保存当前事务版本号为创建版本号。  </li><li>select操作时，读取创建版本号&lt;=当前事务版本号，删除版本号为空或者&gt;当前事务版本号。即创建操作早于当前事务，删除操作晚于当前事务。</li></ul><p>那么通过MVCC协议，虽然会增加额外的存储空间，但是可以减少锁的使用，读取数据时不用加锁。<br>那这里又有一个有趣的点，那就是不管从书上还是网上，基本上是说RR级别解决了不可重复读，无法解决幻读。但是在mysql当中却是另一种情况。<br>假设事务A两次读取中间我们使用事务B增加一条数据，理论上来说事务A第二次读会读取到事务B中增加的行。<br>那么实验出结果，先是事务A读取一次数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user;</span><br><span class="line">+----+------+</span><br><span class="line">| id | name |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | abc  |</span><br><span class="line">|  2 | asd  |</span><br><span class="line">|  3 | aaa  |</span><br><span class="line">+----+------+</span><br><span class="line">3 rows in set</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>好，我们读取到三条数据。此时打开另一个命令行添加一条数据进去。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into user values (4,&quot;aaa&quot;);</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; select * from user;</span><br><span class="line">+----+------+</span><br><span class="line">| id | name |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | abc  |</span><br><span class="line">|  2 | asd  |</span><br><span class="line">|  3 | aaa  |</span><br><span class="line">|  4 | aaa  |</span><br><span class="line">+----+------+</span><br><span class="line">4 rows in set</span><br></pre></td></tr></table></figure><p>由于是自动提交，我没有开启新事务，这不要紧。接着我们返回事务A再次查询数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from user;</span><br><span class="line">+----+------+</span><br><span class="line">| id | name |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | abc  |</span><br><span class="line">|  2 | asd  |</span><br><span class="line">|  3 | aaa  |</span><br><span class="line">+----+------+</span><br><span class="line">3 rows in set</span><br></pre></td></tr></table></figure><p>发现依旧是三条数据。那么就很神奇了，mysql的RR级别似乎真的解决了幻读问题？？<br>那么我们就继续实验，我们知道目前数据库中存在四条数据，但是事务A读取的确实三条，那么此时我在事务A中修改新添加的数据行应该是失败的。那么我们就将事务A中的所有数据行修改下，看看它是否会影响到第四条数据。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update user set name = &quot;zer0e&quot;;</span><br><span class="line">Database changed</span><br><span class="line">Rows matched: 4  Changed: 4  Warnings: 0</span><br><span class="line">mysql&gt; select * from user;</span><br><span class="line">+----+-------+</span><br><span class="line">| id | name  |</span><br><span class="line">+----+-------+</span><br><span class="line">|  1 | zer0e |</span><br><span class="line">|  2 | zer0e |</span><br><span class="line">|  3 | zer0e |</span><br><span class="line">|  4 | zer0e |</span><br><span class="line">+----+-------+</span><br><span class="line">4 rows in set</span><br></pre></td></tr></table></figure>  <p>那么很明显，mysql直接提示有四条数据被修改，之后再读取就变成了四条数据，很显然幻读问题并没有真正解决。  </p><h4 id="快照读与当前读"><a href="#快照读与当前读" class="headerlink" title="快照读与当前读"></a>快照读与当前读</h4><p>那么到底为什么会出现上述情况？查阅资料后发现在RR级别下，通过MVCC协议，我们读取的数据变为可重复读，但是它可能是一个历史数据，那么我们称它为快照读，而读取到数据库最新数据的方式，我们称它为当前读。<br>select操作默认都是快照读，之后select都会返回这次快照读，因此实现了可重复读。<br>而对数据的更新操作(update,insert,delete)都是当前读，执行这几个操作会读取最新的记录，在事务中执行修改操作后会导致快照读变更。也就是我们所测试的那样。<br>如果我们要让select读取到当前读，我们可以手动进行加锁。<br>事务A先读取数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user;</span><br><span class="line">+----+-------+</span><br><span class="line">| id | name  |</span><br><span class="line">+----+-------+</span><br><span class="line">|  1 | zer0e |</span><br><span class="line">|  2 | zer0e |</span><br><span class="line">|  3 | zer0e |</span><br><span class="line">|  4 | zer0e |</span><br><span class="line">+----+-------+</span><br><span class="line">4 rows in set</span><br></pre></td></tr></table></figure> <p>此时事务B新增一条记录(5,”aaa”)，这里我就不写了，我们来看看事务A再次读取的结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from user;</span><br><span class="line">+----+-------+</span><br><span class="line">| id | name  |</span><br><span class="line">+----+-------+</span><br><span class="line">|  1 | zer0e |</span><br><span class="line">|  2 | zer0e |</span><br><span class="line">|  3 | zer0e |</span><br><span class="line">|  4 | zer0e |</span><br><span class="line">+----+-------+</span><br><span class="line">4 rows in set</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user lock in share mode;</span><br><span class="line">+----+-------+</span><br><span class="line">| id | name  |</span><br><span class="line">+----+-------+</span><br><span class="line">|  1 | zer0e |</span><br><span class="line">|  2 | zer0e |</span><br><span class="line">|  3 | zer0e |</span><br><span class="line">|  4 | zer0e |</span><br><span class="line">|  5 | aaa   |</span><br><span class="line">+----+-------+</span><br><span class="line">5 rows in set</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user for update;</span><br><span class="line">+----+-------+</span><br><span class="line">| id | name  |</span><br><span class="line">+----+-------+</span><br><span class="line">|  1 | zer0e |</span><br><span class="line">|  2 | zer0e |</span><br><span class="line">|  3 | zer0e |</span><br><span class="line">|  4 | zer0e |</span><br><span class="line">|  5 | aaa   |</span><br><span class="line">+----+-------+</span><br><span class="line">5 rows in set</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user;</span><br><span class="line">+----+-------+</span><br><span class="line">| id | name  |</span><br><span class="line">+----+-------+</span><br><span class="line">|  1 | zer0e |</span><br><span class="line">|  2 | zer0e |</span><br><span class="line">|  3 | zer0e |</span><br><span class="line">|  4 | zer0e |</span><br><span class="line">+----+-------+</span><br><span class="line">4 rows in set</span><br></pre></td></tr></table></figure>   <p>我们可以发现使用<code>for update</code>或者<code>lock in share mode</code>都可以获取到当前读。<br>所以综上，在RR级别下，幻读并未真正解决，而是因为快照读所以无法读取到最新数据。  </p><h3 id="解决幻读"><a href="#解决幻读" class="headerlink" title="解决幻读"></a>解决幻读</h3><p>那么在RR级别下innodb到底有没有解决幻读问题？通过什么解决？<br>答案是解决了，通过Next-Key锁来实现。</p><h4 id="Next-Key锁"><a href="#Next-Key锁" class="headerlink" title="Next-Key锁"></a>Next-Key锁</h4><p>Next-Key锁是行锁和间隙锁的合并，所谓间隙锁，就是在锁住当前行时，同时锁住当前索引的上下范围。<br>下面进行几项实验：  </p><h5 id="无主键表"><a href="#无主键表" class="headerlink" title="无主键表"></a>无主键表</h5><p>首先隔离级别定为RR，创建表t1，并插入几条间隔数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table t1(id int,key id(id))engine=innodb;</span><br><span class="line">Query OK, 0 rows affected</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t1 values(1),(3),(5);</span><br><span class="line">Query OK, 3 rows affected</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t1;</span><br><span class="line">+----+</span><br><span class="line">| id |</span><br><span class="line">+----+</span><br><span class="line">|  1 |</span><br><span class="line">|  3 |</span><br><span class="line">|  5 |</span><br><span class="line">+----+</span><br><span class="line">3 rows in set</span><br></pre></td></tr></table></figure>   <p>事务A通过for update锁住id=5的数据行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t1 where id=5 for update;</span><br><span class="line">+----+</span><br><span class="line">| id |</span><br><span class="line">+----+</span><br><span class="line">|  5 |</span><br><span class="line">+----+</span><br><span class="line">1 row in set</span><br></pre></td></tr></table></figure>   <p>此时开启事务B，添加一个数据行在id=5前后。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into t1 values(2);</span><br><span class="line">Query OK, 1 row affected</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t1 values(4);</span><br><span class="line">1049 - Unknown database &#x27;ate user set name = &quot;aaa&quot; where id = 5&#x27;</span><br><span class="line">terminated by user</span><br><span class="line">mysql&gt; use test;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; insert into t1 values(6);</span><br><span class="line"></span><br></pre></td></tr></table></figure> <p>我们会发现事务B会等待，直到事务A提交过后，事务B才插入成功。<br>那么Next-Key锁锁住的到底是多少行？其实它锁住的是它上下的一个范围。例如上述表中，对id=5的行进行加锁，那么innodb会把数据分为几个段，分别为(negative infinity,3]，(3,5]，(5,positive infinity]，都是左闭右开区间，那么对id=5的行添加行锁，同时会对(3,5]，(5,positive infinity]这两个区间添加gap锁(即间隙锁)，导致其他事务无法在这个区间进行更新操作。  </p><h5 id="有主键表"><a href="#有主键表" class="headerlink" title="有主键表"></a>有主键表</h5><p>上面的例子中没有主键，只是有一个普通索引而已。我们再来试一下有主键的例子。<br>创建表并插入几条数据：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table t2(id int primary key)engine = innodb;</span><br><span class="line">Query OK, 0 rows affected</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t2 values(1),(3),(5);</span><br><span class="line">Query OK, 3 rows affected</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure> <p>开启事务A并对id=5的行进行锁定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t2 where id = 5 for update;</span><br><span class="line">+----+</span><br><span class="line">| id |</span><br><span class="line">+----+</span><br><span class="line">|  5 |</span><br><span class="line">+----+</span><br><span class="line">1 row in set</span><br></pre></td></tr></table></figure> <p>然后尝试在事务B中插入数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into t2 values(4);</span><br><span class="line">Query OK, 1 row affected</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t2 values(6);</span><br><span class="line">Query OK, 1 row affected</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t2 where id = 5 for update;</span><br><span class="line">....</span><br></pre></td></tr></table></figure> <p>我们发现innodb并没有使用gap锁，而是只锁定了当前行。<br>那其实在innodb当中，<strong>行级锁是通过给索引上的索引项加锁来实现的，当查询的索引含有唯一属性时（主键索引，唯一索引），那么innodb会对next-key锁进行优化，使它降级为行级锁，锁住的不再是范围。</strong><br>所以如果把id不设置成主键，而是设置成唯一索引，也能达到相应的效果。  </p><h5 id="使用无索引字段"><a href="#使用无索引字段" class="headerlink" title="使用无索引字段"></a>使用无索引字段</h5><p>最后我们尝试下使用无索引字段来加锁会如何。<br>先创建表，并插入数据。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table t3(id int,name varchar(10),key id(id))engine=innodb;</span><br><span class="line">Query OK, 0 rows affected</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t3 values (1,&quot;a&quot;),(3,&quot;b&quot;),(5,&quot;c&quot;);</span><br><span class="line">Query OK, 3 rows affected</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br></pre></td></tr></table></figure> <p>开启事务A对name=”c”的行加锁。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t3 where name = &quot;c&quot; for update;</span><br><span class="line">+----+------+</span><br><span class="line">| id | name |</span><br><span class="line">+----+------+</span><br><span class="line">|  5 | c    |</span><br><span class="line">+----+------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br></pre></td></tr></table></figure> <p>在事务B中尝试加锁其他行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t3 where name = &quot;a&quot; for update;</span><br><span class="line">...</span><br><span class="line">mysql&gt; select * from t3 where name = &quot;b&quot; for update;</span><br><span class="line">...</span><br><span class="line">mysql&gt; insert into t3 values (4,&quot;d&quot;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure> <p>可以发现innodb其实对其他行都添加了锁，无法进行更新操作。那通过之前的结论，我们知道行级锁是通过索引加锁，条件中的列没有索引，因此innodb会给全表加上间隙锁。除非事务A提交，否则其他事务无法进行更新操作。  </p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>那之所以<a href="/2020/11/01/transaction_isolation/#innoDB%E4%B8%ADMVCC%E7%9A%84%E5%AE%9E%E7%8E%B0">前一个实验</a>“没有”解决幻读，原因在于快照读没有通过行级锁锁住当前行，表中也没有索引，条件语句中没有增加索引条件。我们可以通过添加索引并使用索引的当前读，来解决幻读问题。<br>所以在innodb当中，行级锁防止别的事务对当前行进行修改和删除，间隙锁防止其他事务新增数据，行级锁和间隙锁形成的next-key锁共同解决了RR级别下写的幻读问题。  </p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>那本篇的大致内容就写到这里了，本来只计划整理下基础知识，没想到越写越多，多整理了一个mysql中隔离级别的实现。这部分知识我之前是不太了解的，通过自己做下实验后，有种柳暗花明的感觉。也许这就是学习技术所带来的乐趣吧。  </p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://dev.mysql.com/doc/">mysql参考手册</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;对于数据库隔离级别，前前后后可能复习了好多遍，但是很经常就忘记，今天就简单整理下概念和实例，方便以后回顾。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Java" scheme="https://re0.top/tags/Java/"/>
    
      <category term="Mysql" scheme="https://re0.top/tags/Mysql/"/>
    
  </entry>
  
</feed>
