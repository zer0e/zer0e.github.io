<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zer0e&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://re0.top/"/>
  <updated>2024-08-16T08:54:36.870Z</updated>
  <id>https://re0.top/</id>
  
  <author>
    <name>Zer0e</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2024面试复盘13</title>
    <link href="https://re0.top/2024/08/15/2024-08-15-replay/"/>
    <id>https://re0.top/2024/08/15/2024-08-15-replay/</id>
    <published>2024-08-15T12:00:00.000Z</published>
    <updated>2024-08-16T08:54:36.870Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天zoom面试，亏我还那么期待，感觉好像面试官水平不咋样啊，面试完后一个小时直接发拒绝邮件了，我真是醉了，我感觉大部分回答的还可以吧，除了小部分不懂的问题，不会又是刷KPI的吧。艹！</p><p>全程基本都是八股文，有数据库相关，有java相关，我印象比较深的是一个explain的filesort没答上来，然后es的一个match和match_phrase好像答反了。不至于就挂掉啊，真奇怪。难道是我跟面试官说话的态度不好吗？好像有一两次我觉得他说的不对，反驳了一下。</p><p>算了，就不应该抱有期待的，就这样吧，复盘一下。</p><h1 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h1><h2 id="为什么用xxl-job？-scheduler和xxl-job"><a href="#为什么用xxl-job？-scheduler和xxl-job" class="headerlink" title="为什么用xxl-job？@scheduler和xxl-job"></a>为什么用xxl-job？@scheduler和xxl-job</h2><p>高可用部署+任务失败重试+多种调度方式+动态任务配置.</p><p><code>@Scheduled</code> 注解是 Spring 的一部分，集成简单，适合在 Spring 环境中进行定时任务调度。适合单个应用程序内部的定时任务管理，不支持分布式任务调度。</p><p>XXL-JOB 是一个分布式任务调度平台，提供了更加全面和强大的任务调度功能，适用于大规模分布式系统的任务调度需求。支持分布式部署，可以在多个服务器或实例上运行调度任务，适用于分布式系统和大规模应用。支持多种调度方式，包括简单任务、分片任务、定时任务等。</p><table><thead><tr><th>特性</th><th><code>@Scheduled</code></th><th>XXL-JOB</th></tr></thead><tbody><tr><td><strong>适用场景</strong></td><td>单个 Spring 应用程序内的定时任务</td><td>大规模分布式系统的任务调度</td></tr><tr><td><strong>任务调度方式</strong></td><td>基于 Cron 表达式、固定延迟、固定频率</td><td>支持简单任务、分片任务、定时任务等</td></tr><tr><td><strong>分布式支持</strong></td><td>不支持</td><td>支持</td></tr><tr><td><strong>管理界面</strong></td><td>不提供</td><td>提供图形化管理界面</td></tr><tr><td><strong>集成方式</strong></td><td>Spring 注解配置</td><td>需要集成客户端库并配置管理平台</td></tr><tr><td><strong>容错性</strong></td><td>低（单机环境下）</td><td>高（支持高可用部署和容错机制）</td></tr></tbody></table><h2 id="xxl-job如何控制单一任务只有一次执行"><a href="#xxl-job如何控制单一任务只有一次执行" class="headerlink" title="xxl-job如何控制单一任务只有一次执行"></a>xxl-job如何控制单一任务只有一次执行</h2><p>在任务开始执行前，任务执行器会尝试获取任务的锁。通常使用数据库中的记录或分布式锁机制来确保任务只有一个实例在执行。</p><p>任务执行器会在任务执行前更新任务状态，例如在数据库中标记任务为“正在执行”。这有助于防止任务被重复下发或执行。</p><h2 id="数据库的表锁和行锁"><a href="#数据库的表锁和行锁" class="headerlink" title="数据库的表锁和行锁"></a>数据库的表锁和行锁</h2><p>表锁是指对整个表施加锁定，确保在锁定期间，其他事务无法对该表进行修改或读取操作（具体行为取决于锁的类型）。表锁会锁定整个表，导致在锁定期间，其他事务无法访问该表。这可能会导致较大的并发访问瓶颈。</p><p>行锁是指对数据库表中的特定行施加锁定。行锁可以更细粒度地控制对表中数据的访问，通常在高并发环境中使用。行锁只锁定表中的特定行，允许其他事务访问表中的其他行。这可以提高并发性能和资源利用率。</p><table><thead><tr><th>特性</th><th>表锁</th><th>行锁</th></tr></thead><tbody><tr><td><strong>粒度</strong></td><td>锁定整个表</td><td>锁定特定行</td></tr><tr><td><strong>并发</strong></td><td>可能导致高并发访问瓶颈</td><td>提高并发性能</td></tr><tr><td><strong>实现复杂度</strong></td><td>简单易用</td><td>较复杂</td></tr><tr><td><strong>性能影响</strong></td><td>性能可能较差，尤其在高并发环境下</td><td>性能较好，适合高并发环境</td></tr></tbody></table><h4 id="行锁膨胀"><a href="#行锁膨胀" class="headerlink" title="行锁膨胀"></a>行锁膨胀</h4><p>当数据库中的锁定行数量非常多时，某些数据库系统可能会自动升级为表锁，以简化锁管理和避免过多的锁开销。这种情况被称为<strong>锁膨胀</strong>。</p><p>操作涉及整个表时，例如执行一个需要对整个表进行锁定的查询或更新，数据库系统可能会选择表锁以保证操作的完整性。例如在事务中执行了一条没有索引条件的查询，引发全表扫描，行锁 膨胀为表锁。</p><p>当行锁锁定的数据没有主键或唯一索引时，数据库系统可能会自动将行锁膨胀为表锁。</p><h2 id="数据库的死锁？回滚事务如何处理？"><a href="#数据库的死锁？回滚事务如何处理？" class="headerlink" title="数据库的死锁？回滚事务如何处理？"></a>数据库的死锁？回滚事务如何处理？</h2><p>看录像之后，发现答得不好。</p><h3 id="表级锁死锁"><a href="#表级锁死锁" class="headerlink" title="表级锁死锁"></a>表级锁死锁</h3><p>假设有两个事务，分别在操作两个表：表A和表B。<br>事务1试图先锁定表A，然后锁定表B。<br>而事务2试图先锁定表B，然后锁定表A。<br>用户A和用户B加锁的顺序如下：</p><ul><li>用户A–》表1（表锁）–》表2（表锁）</li><li>用户B–》表2（表锁）–》表1（表锁）</li></ul><p>如果这两个事务同时执行，它们将会相互等待对方释放锁，从而导致死锁。</p><p>这种死锁比较常见，是由于程序的BUG产生的，除了调整的程序的逻辑没有其它的办法。</p><ol><li>仔细分析程序的逻辑，对于数据库的多表操作时，尽量按照相同的顺序进行处理，</li><li>尽量避免同时锁定两个资源，如操作A和B两张表时，总是按先A后B的顺序处理， 必须同时锁定两个资源时，要保证在任何时刻都应该按照相同的顺序来锁定资源。</li></ol><h3 id="行级锁死锁"><a href="#行级锁死锁" class="headerlink" title="行级锁死锁"></a>行级锁死锁</h3><p><strong>原因1</strong>：</p><p>如果在事务中执行了一条没有索引条件的查询，引发全表扫描，行锁 膨胀 为表锁（ 或者等价于 表级锁）</p><p>多个这样的 锁表事务 执行后，就很容易产生死锁和阻塞，最终应用系统会越来越慢，发生阻塞或 死锁。</p><p><strong>解决方案</strong></p><ol><li>SQL语句中不要使用太复杂的关联多表的查询；</li><li>使用explain“执行计划”对SQL语句进行分析，对于有全表扫描和全表锁定的SQL语句，建立相应的索引进行优化。</li></ol><p><strong>原因2：</strong></p><p>两个事务分别想拿到对方持有的锁，互相等待，于是产生死锁</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Session_1执行：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">for</span> update;</span><br><span class="line">Session_2执行：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">where</span> id<span class="operator">=</span><span class="number">2</span> <span class="keyword">for</span> update;</span><br><span class="line">Session_1执行：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">where</span> id<span class="operator">=</span><span class="number">2</span> <span class="keyword">for</span> update;</span><br><span class="line">Session_2执行：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">for</span> update;</span><br></pre></td></tr></table></figure><p>这种情况下，mysql会自动检测死锁并回滚事务，按照AI的回答，mysql会自动分析回滚等待时间最长，回滚代价小，数据影响少的事务进行回滚。</p><h2 id="xxl任务执行失败时的处理"><a href="#xxl任务执行失败时的处理" class="headerlink" title="xxl任务执行失败时的处理"></a>xxl任务执行失败时的处理</h2><ul><li>“故障转移”发生在调度阶段，在执行器集群部署时，如果某一台执行器发生故障，该策略支持自动进行Failover切换到一台正常的执行器机器并且完成调度请求流程。</li><li>“失败重试”发生在”调度 + 执行”两个阶段，支持通过自定义任务失败重试次数，当任务失败时将会按照预设的失败重试次数主动进行重试；</li></ul><h2 id="mysql事务隔离级别？项目中使用的是什么？"><a href="#mysql事务隔离级别？项目中使用的是什么？" class="headerlink" title="mysql事务隔离级别？项目中使用的是什么？"></a>mysql事务隔离级别？项目中使用的是什么？</h2><ul><li><strong>READ-UNCOMMITTED(读取未提交)</strong> ：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。</li><li><strong>READ-COMMITTED(读取已提交)</strong> ：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。</li><li><strong>REPEATABLE-READ(可重复读)</strong> ：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。</li><li><strong>SERIALIZABLE(可串行化)</strong> ：最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。</li></ul><h3 id="mysql为什么使用RR级别？"><a href="#mysql为什么使用RR级别？" class="headerlink" title="mysql为什么使用RR级别？"></a>mysql为什么使用RR级别？</h3><p>Mysql在5.0这个版本以前，binlog只支持<code>STATEMENT</code>这种格式！</p><p>而这种格式在读已提交(Read Commited)这个隔离级别下主从复制是有bug的，因此Mysql将可重复读(Repeatable Read)作为默认的隔离级别</p><p>假设主节点两个事务A, B，并且隔离级别为RC，事务A先执行了删除操作，但是未提交事务；事务B执行了插入操作，先提交了事务。最后事务A提交事务。</p><p>此时主节点上查询应该是有数据的才对，因为delete早于insert。</p><p>但是由于提交时间不一样，所以bin log记录的顺序是先insert然后delete，导致从节点上无数据。</p><p>解决方案有两种！</p><ol><li>隔离级别设为可重复读(Repeatable Read),在该隔离级别下引入间隙锁。当Session 1执行delete语句时，会锁住间隙。那么，Ssession 2执行插入语句就会阻塞住！</li><li>将binglog的格式修改为row格式，此时是基于行的复制，自然就不会出现sql执行顺序不一样的问题！奈何这个格式在mysql5.1版本开始才引入。因此由于历史原因，mysql将默认的隔离级别设为可重复读(Repeatable Read)，保证主从复制不出问题！</li></ol><h3 id="项目中选了哪个隔离级别？为什么？"><a href="#项目中选了哪个隔离级别？为什么？" class="headerlink" title="项目中选了哪个隔离级别？为什么？"></a><strong>项目中选了哪个隔离级别？为什么？</strong></h3><p>项目中是不用读未提交(Read UnCommitted)和串行化(Serializable)两个隔离级别，原因有二</p><p>采用读未提交(Read UnCommitted),一个事务读到另一个事务未提交读数据，从逻辑上都说不过去！</p><p>采用串行化(Serializable)，每个次读操作都会加锁，快照读失效，一般是使用mysql自带分布式事务功能时才使用该隔离级别！</p><p>那为什么很多互联网大厂为选<strong>读已提交</strong>(Read Commited)作为事务隔离级别？</p><p><strong>原因1：在RR隔离级别下，存在间隙锁，导致出现死锁的几率比RC大的多！</strong></p><p>假设表数据如下，并执行sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> type  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span>  red  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> white <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span>  red  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> white <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> id <span class="operator">&lt;</span><span class="number">3</span> <span class="keyword">for</span> update;</span><br></pre></td></tr></table></figure><p>在RR隔离级别下，存在间隙锁，可以锁住(2,5)这个间隙，防止其他事务插入数据！<br>而在RC隔离级别下，不存在间隙锁，其他事务是可以插入数据！</p><p><strong>原因2：在RR隔离级别下，条件列未命中索引会锁表！而在RC隔离级别下，只锁行</strong>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update test <span class="keyword">set</span> type <span class="operator">=</span> <span class="string">&#x27;blue&#x27;</span> <span class="keyword">where</span> type <span class="operator">=</span> <span class="string">&#x27;white&#x27;</span>; </span><br></pre></td></tr></table></figure><p>在RC隔离级别下，其先走聚簇索引，进行全部扫描</p><p>但在实际中，MySQL做了优化，发现不满足后，会调用unlock_row方法，把不满足条件的记录放锁。</p><p>然而，在RR隔离级别下，走聚簇索引，进行全部扫描，最后会将整个表锁上。</p><p><strong>原因3：在RC隔离级别下，半一致性读(semi-consistent)特性增加了update操作的并发性</strong></p><p>在5.1.15的时候，innodb引入了一个概念叫做“semi-consistent”，减少了更新同一行记录时的冲突，减少锁等待。<br>所谓半一致性读就是，一个update语句，如果读到一行已经加锁的记录，此时InnoDB返回记录最近提交的版本，由MySQL上层判断此版本是否满足update的where条件。若满足(需要更新)，则MySQL会重新发起一次读操作，此时会读取行的最新版本(并加锁)！</p><p>假设有两个事务，事务1和事务2！<br>事务1执行:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update test <span class="keyword">set</span> type <span class="operator">=</span> <span class="string">&#x27;blue&#x27;</span> <span class="keyword">where</span> type <span class="operator">=</span> <span class="string">&#x27;red&#x27;</span>; </span><br></pre></td></tr></table></figure><p>先不Commit事务！</p><p>与此同时事务2执行:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update test <span class="keyword">set</span> type <span class="operator">=</span> <span class="string">&#x27;blue&#x27;</span> <span class="keyword">where</span> type <span class="operator">=</span> <span class="string">&#x27;white&#x27;</span>; </span><br></pre></td></tr></table></figure><p>事务 2尝试加锁的时候，发现行上已经存在锁，InnoDB会开启semi-consistent read，返回最新的committed版本(1,red),(2，white),(5,red),(7,white)。MySQL会重新发起一次读操作，此时会读取行的最新版本(并加锁)!<br>而在RR隔离级别下，事务2只能等待！</p><h3 id="在RC级别下，不可重复读问题需要解决么？"><a href="#在RC级别下，不可重复读问题需要解决么？" class="headerlink" title="在RC级别下，不可重复读问题需要解决么？"></a>在RC级别下，不可重复读问题需要解决么？</h3><p>不用解决，这个问题是可以接受的！毕竟你数据都已经提交了，读出来本身就没有太大问题！Oracle的默认隔离级别就是RC。</p><h2 id="可重复读实现原理"><a href="#可重复读实现原理" class="headerlink" title="可重复读实现原理"></a>可重复读实现原理</h2><p><code>可重复读（Repeatable Read）</code> 是 MySQL 的事务隔离级别之一，旨在保证在一个事务中多次读取相同数据时的结果一致性。为了实现这一点，MySQL 使用了 <strong>多版本并发控制（MVCC, Multi-Version Concurrency Control）</strong> 机制。</p><p>它是通过在每个数据行上维护多个版本的数据来实现的。当一个事务要对数据库中的数据进行修改时，MVCC 会为该事务创建一个数据快照，而不是直接修改实际的数据行。</p><p><code>MVCC</code> 的实现依赖于：<strong>隐藏字段、Read View、undo log</strong>。在内部实现中，<code>InnoDB</code> 通过数据行的 <code>DB_TRX_ID</code> 和 <code>Read View</code> 来判断数据的可见性，如不可见，则通过数据行的 <code>DB_ROLL_PTR</code> 找到 <code>undo log</code> 中的历史版本。每个事务读到的数据版本可能是不一样的，在同一个事务中，用户只能看到该事务创建 <code>Read View</code> 之前已经提交的修改和该事务本身做的修改</p><h3 id="隐藏字段"><a href="#隐藏字段" class="headerlink" title="隐藏字段"></a>隐藏字段</h3><p>在内部，<code>InnoDB</code> 存储引擎为每行数据添加了三个 <a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-multi-versioning.html">隐藏字段</a>：</p><ul><li><code>DB_TRX_ID（6字节）</code>：表示最后一次插入或更新该行的事务 id。此外，<code>delete</code> 操作在内部被视为更新，只不过会在记录头 <code>Record header</code> 中的 <code>deleted_flag</code> 字段将其标记为已删除</li><li><code>DB_ROLL_PTR（7字节）</code> 回滚指针，指向该行的 <code>undo log</code> 。如果该行未被更新，则为空</li><li><code>DB_ROW_ID（6字节）</code>：如果没有设置主键且该表没有唯一非空索引时，<code>InnoDB</code> 会使用该 id 来生成聚簇索引。</li></ul><h3 id="ReadView"><a href="#ReadView" class="headerlink" title="ReadView"></a>ReadView</h3><p><a href="https://github.com/facebook/mysql-8.0/blob/8.0/storage/innobase/include/read0types.h#L298">Read View</a> 主要是用来做可见性判断，里面保存了 “当前对本事务不可见的其他活跃事务”</p><p>主要有以下字段：</p><ul><li><code>m_low_limit_id</code>：目前出现过的最大的事务 ID+1，即下一个将被分配的事务 ID。大于等于这个 ID 的数据版本均不可见</li><li><code>m_up_limit_id</code>：活跃事务列表 <code>m_ids</code> 中最小的事务 ID，如果 <code>m_ids</code> 为空，则 <code>m_up_limit_id</code> 为 <code>m_low_limit_id</code>。小于这个 ID 的数据版本均可见</li><li><code>m_ids</code>：<code>Read View</code> 创建时其他未提交的活跃事务 ID 列表。创建 <code>Read View</code>时，将当前未提交事务 ID 记录下来，后续即使它们修改了记录行的值，对于当前事务也是不可见的。<code>m_ids</code> 不包括当前事务自己和已提交的事务（正在内存中）</li><li><code>m_creator_trx_id</code>：创建该 <code>Read View</code> 的事务 ID</li></ul><h3 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h3><p><code>undo log</code> 主要有两个作用：</p><ul><li>当事务回滚时用于将数据恢复到修改前的样子</li><li>另一个作用是 <code>MVCC</code> ，当读取记录时，若该记录被其他事务占用或当前版本对该事务不可见，则可以通过 <code>undo log</code> 读取之前的版本数据，以此实现非锁定读</li></ul><p><strong>在 <code>InnoDB</code> 存储引擎中 <code>undo log</code> 分为两种：<code>insert undo log</code> 和 <code>update undo log</code>：</strong></p><ol><li><code>insert undo log</code>：指在 <code>insert</code> 操作中产生的 <code>undo log</code>。因为 <code>insert</code> 操作的记录只对事务本身可见，对其他事务不可见，故该 <code>undo log</code> 可以在事务提交后直接删除。不需要进行 <code>purge</code> 操作</li><li><code>update undo log</code>：<code>update</code> 或 <code>delete</code> 操作中产生的 <code>undo log</code>。该 <code>undo log</code>可能需要提供 <code>MVCC</code> 机制，因此不能在事务提交时就进行删除。提交时放入 <code>undo log</code> 链表，等待 <code>purge线程</code> 进行最后的删除.</li></ol><h3 id="数据可见性算法"><a href="#数据可见性算法" class="headerlink" title="数据可见性算法"></a>数据可见性算法</h3><p>在 <code>InnoDB</code> 存储引擎中，创建一个新事务后，执行每个 <code>select</code> 语句前，都会创建一个快照（Read View），<strong>快照中保存了当前数据库系统中正处于活跃（没有 commit）的事务的 ID 号</strong>。其实简单的说保存的是系统中当前不应该被本事务看到的其他事务 ID 列表（即 m_ids）。当用户在这个事务中要读取某个记录行的时候，<code>InnoDB</code> 会将该记录行的 <code>DB_TRX_ID</code> 与 <code>Read View</code> 中的一些变量及当前事务 ID 进行比较，判断是否满足可见性条件。</p><h3 id="RC-和-RR-隔离级别下-MVCC-的差异"><a href="#RC-和-RR-隔离级别下-MVCC-的差异" class="headerlink" title="RC 和 RR 隔离级别下 MVCC 的差异"></a>RC 和 RR 隔离级别下 MVCC 的差异</h3><p>在事务隔离级别 <code>RC</code> 和 <code>RR</code> （InnoDB 存储引擎的默认事务隔离级别）下，<code>InnoDB</code> 存储引擎使用 <code>MVCC</code>（非锁定一致性读），但它们生成 <code>Read View</code> 的时机却不同</p><ul><li>在 RC 隔离级别下的 <strong><code>每次select</code></strong> 查询前都生成一个<code>Read View</code> (m_ids 列表)</li><li>在 RR 隔离级别下只在事务开始后 <strong><code>第一次select</code></strong> 数据前生成一个<code>Read View</code>（m_ids 列表）</li></ul><h2 id="声明式事务标记在private方法上"><a href="#声明式事务标记在private方法上" class="headerlink" title="声明式事务标记在private方法上"></a>声明式事务标记在private方法上</h2><p>无法生效，因为声明式事务是基于AOP实现的。Spring 生成的代理对象仅能拦截 <code>public</code> 方法，因为代理对象是 <code>public</code> 方法的拦截器，而无法直接拦截 <code>private</code> 方法。因此，<code>private</code> 方法上的 <code>@Transactional</code> 注解不会被 Spring 事务管理器识别和应用。</p><h2 id="explain分析有哪些指标"><a href="#explain分析有哪些指标" class="headerlink" title="explain分析有哪些指标"></a>explain分析有哪些指标</h2><p><strong><code>id</code></strong></p><ul><li><strong>描述</strong>：查询的唯一标识符，通常用于标识查询中的不同 SELECT 或 UNION 子句的执行顺序。</li><li><strong>意义</strong>：在复杂查询中，<code>id</code> 指标帮助你理解查询的执行顺序和逻辑结构。</li></ul><p> <strong><code>select_type</code></strong></p><ul><li><code>SIMPLE</code>：简单的查询，不包括子查询或 UNION。</li><li><code>PRIMARY</code>：最外层的 SELECT 查询。</li><li><code>UNION</code>：UNION 中的 SELECT 查询。</li><li><code>SUBQUERY</code>：子查询中的 SELECT 查询。</li><li><code>DERIVED</code>：派生表（子查询中的 SELECT）中的查询。</li></ul><p><strong><code>table</code></strong></p><p>显示查询涉及的表。</p><p><strong><code>type</code></strong></p><ul><li><code>system</code>：表只有一行，最优。</li><li><code>const</code>：用于匹配常量，效率很高。</li><li><code>eq_ref</code>：通过唯一索引进行匹配，效率高。</li><li><code>ref</code>：非唯一索引匹配，效率较高。</li><li><code>range</code>：范围查询（使用索引进行范围查找）。</li><li><code>index</code>：全索引扫描，效率低于使用索引的其他方式。</li><li><code>ALL</code>：全表扫描，最差，性能较低。</li></ul><p><strong><code>possible_keys</code></strong></p><p>列出查询中可能用到的索引。</p><p><strong><code>key</code></strong></p><p>实际使用的索引。了解查询中实际使用了哪个索引。与 <code>possible_keys</code> 对比，确定是否选择了最优的索引。</p><p><strong><code>key_len</code></strong></p><p>表示实际使用的索引的长度（字节数）。通过分析 <code>key_len</code>，可以了解使用的索引的有效性。较长的 <code>key_len</code> 可能意味着索引覆盖了更多的列。</p><p><strong><code>ref</code></strong></p><p>显示哪些列或常量用于索引查找。</p><p><strong><code>rows</code></strong></p><p>表示 MySQL 估算需要读取的行数。估算的行数可以帮助你了解查询的复杂性。较高的行数可能意味着查询会扫描大量数据，从而影响性能。</p><p><strong><code>filtered</code></strong></p><p>表示在读取的行中，多少百分比的行被过滤掉（即匹配条件的行）。</p><p><strong><code>extra</code></strong></p><ul><li><code>Using index</code>：查询只使用了索引，没有访问表数据，通常意味着索引覆盖了查询。</li><li><code>Using where</code>：查询使用了 WHERE 子句来过滤结果。</li><li><code>Using temporary</code>：查询使用了临时表，通常意味着查询需要复杂的处理，可能会影响性能。</li><li><code>Using filesort</code>：查询需要额外的排序操作，通常意味着性能较差。</li></ul><h2 id="extra的file-sort是什么情况？如何优化"><a href="#extra的file-sort是什么情况？如何优化" class="headerlink" title="extra的file sort是什么情况？如何优化"></a>extra的file sort是什么情况？如何优化</h2><p>当 <code>Using filesort</code> 出现时，意味着 MySQL 必须对结果集进行排序，但不能使用索引中的数据直接进行排序。因此，MySQL 使用临时文件来完成排序过程。</p><p><code>Using filesort</code> 发生在以下情况：</p><ol><li><strong>无法使用索引排序</strong>：如果查询中需要对结果集进行排序，但所用的索引不能满足排序需求，MySQL 会使用额外的排序步骤。即使使用了索引，排序顺序可能与查询中的排序要求不匹配。</li><li><strong>多个排序条件</strong>：当查询中有多个排序条件时，索引可能无法完全满足所有排序要求，从而需要额外的排序操作。</li><li><strong><code>ORDER BY</code> 不匹配索引顺序</strong>：即使有索引，如果 <code>ORDER BY</code> 子句中的排序顺序与索引的顺序不匹配，也会触发文件排序。</li></ol><p><strong>如何优化?</strong></p><p><strong>使用合适的索引</strong>：确保你的 <code>ORDER BY</code> 子句中的字段有适当的索引。如果排序字段与 WHERE 子句中的字段有共同的索引，那么 MySQL 可能会使用这个索引进行排序。</p><p><strong>优化查询</strong>: 如果排序不是必需的，可以考虑删除 <code>ORDER BY</code> 子句或优化排序条件，以减少对排序操作的需求。尽量简化排序字段。例如，如果只需对一个字段进行排序，确保只在该字段上创建索引，而不是包括多个字段。</p><p><strong>使用索引覆盖查询</strong>: 如果查询只涉及到索引中的字段，MySQL 可以使用覆盖索引来避免回表操作。在这种情况下，排序可以直接通过索引完成，无需额外的文件排序。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2 <span class="keyword">FROM</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">WHERE</span> column1 <span class="operator">=</span> <span class="string">&#x27;value&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column2;</span><br></pre></td></tr></table></figure><p>这里的 column1 和 column2 都应该在索引中，以便可以使用索引直接排序。</p><p><strong>调整配置参数</strong>: **调整 <code>sort_buffer_size</code>**：增加 <code>sort_buffer_size</code> 配置参数的值可以提高排序操作的效率，减少文件排序的频率。这是 MySQL 在排序操作中使用的内存缓冲区的大小。</p><h2 id="事务提交后，如何执行一些后置处理？如何知道事务已经提交？"><a href="#事务提交后，如何执行一些后置处理？如何知道事务已经提交？" class="headerlink" title="事务提交后，如何执行一些后置处理？如何知道事务已经提交？"></a>事务提交后，如何执行一些后置处理？如何知道事务已经提交？</h2><p>不查不知道，一查吓一跳，原来有这么多方法。</p><h3 id="使用-TransactionSynchronizationManager-和-TransactionSynchronization"><a href="#使用-TransactionSynchronizationManager-和-TransactionSynchronization" class="headerlink" title="使用 TransactionSynchronizationManager 和 TransactionSynchronization"></a>使用 <code>TransactionSynchronizationManager</code> 和 <code>TransactionSynchronization</code></h3><p>Spring 提供了 <code>TransactionSynchronizationManager</code> 和 <code>TransactionSynchronization</code> 机制，可以在事务提交后执行自定义逻辑。这是一种非常灵活的方法，可以在事务提交后注册回调方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.transaction.support.TransactionSynchronization;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.support.TransactionSynchronizationManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTransactionSynchronization</span> <span class="keyword">implements</span> <span class="title">TransactionSynchronization</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeCommit</span><span class="params">(<span class="keyword">boolean</span> readOnly)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCommit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 执行事务提交后的处理逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;事务已经提交&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 事务完成后的处理</span></span><br><span class="line">        <span class="keyword">if</span> (status == STATUS_COMMITTED) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;事务提交完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == STATUS_ROLLED_BACK) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;事务回滚&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeCompletion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">suspend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在需要执行后置处理的地方注册 <code>TransactionSynchronization</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.transaction.support.TransactionSynchronizationManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myTransactionalMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 业务逻辑</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 注册 TransactionSynchronization</span></span><br><span class="line">        TransactionSynchronizationManager.registerSynchronization(<span class="keyword">new</span> MyTransactionSynchronization());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-Transactional-注解的-afterCommit-和-afterRollback-属性"><a href="#使用-Transactional-注解的-afterCommit-和-afterRollback-属性" class="headerlink" title="使用 @Transactional 注解的 afterCommit 和 afterRollback 属性"></a><strong>使用 <code>@Transactional</code> 注解的 <code>afterCommit</code> 和 <code>afterRollback</code> 属性</strong></h3><p>还真没用过。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTransactionalService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myTransactionalMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 业务逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(afterCommit = &quot;postCommit&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myTransactionalMethodWithCallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 业务逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postCommit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 事务提交后的处理逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;事务提交后处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-ApplicationListener-监听事务事件"><a href="#使用-ApplicationListener-监听事务事件" class="headerlink" title="使用 ApplicationListener 监听事务事件"></a>使用 <code>ApplicationListener</code> 监听事务事件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.event.TransactionPhase;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.event.TransactionalEventListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.event.TransactionPhase;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.support.TransactionSynchronizationManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTransactionEventListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleAfterCommit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 事务提交后的处理逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;事务已经提交，执行后置处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TransactionalEventListener(phase = TransactionPhase.AFTER_ROLLBACK)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleAfterRollback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 事务回滚后的处理逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;事务回滚&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册监听器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MyTransactionEventListener <span class="title">myTransactionEventListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyTransactionEventListener();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-TransactionCallback"><a href="#使用-TransactionCallback" class="headerlink" title="使用 TransactionCallback"></a>使用 <code>TransactionCallback</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.TransactionStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.support.TransactionCallback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.support.TransactionCallbackWithoutResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.support.TransactionTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TransactionTemplate transactionTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span><span class="params">(PlatformTransactionManager transactionManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.transactionTemplate = <span class="keyword">new</span> TransactionTemplate(transactionManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myTransactionalMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        transactionTemplate.execute(<span class="keyword">new</span> TransactionCallbackWithoutResult() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doInTransactionWithoutResult</span><span class="params">(TransactionStatus status)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 业务逻辑</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 事务提交后的处理</span></span><br><span class="line">                System.out.println(<span class="string">&quot;事务已经提交，执行后置处理&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="深度分页查询优化"><a href="#深度分页查询优化" class="headerlink" title="深度分页查询优化"></a>深度分页查询优化</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># MySQL 在无法利用索引的情况下跳过<span class="number">1000000</span>条记录后，再获取<span class="number">10</span>条记录</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_order <span class="keyword">ORDER</span> <span class="keyword">BY</span> id LIMIT <span class="number">1000000</span>, <span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="基于游标的分页"><a href="#基于游标的分页" class="headerlink" title="基于游标的分页"></a>基于游标的分页</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> id <span class="operator">&gt;</span> ? <span class="keyword">ORDER</span> <span class="keyword">BY</span> id LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>在第一次查询中，<code>?</code> 是初始的游标值（例如，0），在后续查询中，它是上一次查询的最后一条记录的 <code>id</code>。</p><p>这种优化方式限制比较大，且一般项目的 ID 也没办法保证完全连续。</p><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>阿里巴巴《Java 开发手册》中也有对应的描述：</p><blockquote><p>利用延迟关联或者子查询优化超多分页场景。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 通过子查询来获取 id 的起始值，把 limit <span class="number">1000000</span> 的条件转移到子查询</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_order <span class="keyword">WHERE</span> id <span class="operator">&gt;=</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> t_order limit <span class="number">1000000</span>, <span class="number">1</span>) LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>不过，子查询的结果会产生一张新表，会影响性能，应该尽量避免大量使用子查询。并且，这种方法只适用于 ID 是正序的。在复杂分页场景，往往需要通过过滤条件，筛选到符合条件的 ID，此时的 ID 是离散且不连续的。</p><h3 id="延迟关联"><a href="#延迟关联" class="headerlink" title="延迟关联"></a>延迟关联</h3><p>延迟关联的优化思路，跟子查询的优化思路其实是一样的：都是把条件转移到主键索引树，减少回表的次数。不同点是，延迟关联使用了 INNER JOIN（内连接） 包含子查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t1.<span class="operator">*</span> <span class="keyword">FROM</span> t_order t1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> t_order limit <span class="number">1000000</span>, <span class="number">10</span>) t2</span><br><span class="line"><span class="keyword">ON</span> t1.id <span class="operator">=</span> t2.id;</span><br></pre></td></tr></table></figure><p>除了使用 INNER JOIN 之外，还可以使用逗号连接子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t1.<span class="operator">*</span> <span class="keyword">FROM</span> t_order t1,</span><br><span class="line">(<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> t_order limit <span class="number">1000000</span>, <span class="number">10</span>) t2</span><br><span class="line"><span class="keyword">WHERE</span> t1.id <span class="operator">=</span> t2.id;</span><br></pre></td></tr></table></figure><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>索引中已经包含了所有需要获取的字段的查询方式称为覆盖索引。</p><p><strong>避免 InnoDB 表进行索引的二次查询，也就是回表操作:</strong> InnoDB 是以聚集索引的顺序来存储的，对于 InnoDB 来说，二级索引在叶子节点中所保存的是行的主键信息，如果是用二级索引查询数据的话，在查找到相应的键值后，还要通过主键进行二次查询才能获取我们真实所需要的数据。而在覆盖索引中，二级索引的键值中可以获取所有的数据，避免了对主键的二次查询（回表），减少了 IO 操作，提升了查询效率。</p><p><strong>可以把随机 IO 变成顺序 IO 加快查询效率:</strong> 由于覆盖索引是按键值的顺序存储的，对于 IO 密集型的范围查找来说，对比随机从磁盘读取每一行的数据 IO 要少的多，因此利用覆盖索引在访问时也可以把磁盘的随机读取的 IO 转变成索引查找的顺序 IO。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 如果只需要查询 id, code, type 这三列，可建立 code 和 type 的覆盖索引</span><br><span class="line"><span class="keyword">SELECT</span> id, code, type <span class="keyword">FROM</span> t_order</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> code</span><br><span class="line">LIMIT <span class="number">1000000</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>不过，当查询的结果集占表的总行数的很大一部分时，可能就不会走索引了，自动转换为全表扫描。当然了，也可以通过 <code>FORCE INDEX</code> 来强制查询优化器走索引，但这种提升效果一般不明显。</p><h2 id="什么是倒排索引"><a href="#什么是倒排索引" class="headerlink" title="什么是倒排索引"></a>什么是倒排索引</h2><p>倒排索引 也被称作反向索引（inverted index），是用于提高数据检索速度的一种数据结构，空间消耗比较大。倒排索引首先将检索文档进行分词得到多个词语/词条，然后将词语和文档 ID 建立关联，从而提高检索效率。</p><p>倒排索引使用 词语/词条（Term） 来作为索引关键字，并同时记录了哪些 文档（Document） 中有这个词语。</p><h2 id="match-query和term-query"><a href="#match-query和term-query" class="headerlink" title="match query和term query"></a>match query和term query</h2><p>说实话没用过。。。</p><p><code>match</code> 查询用于全文搜索，通常用于检索文档中包含某个单词或短语的文档。<code>match</code> 查询会经过分词（Tokenization）过程，将查询词分解成多个词项，然后进行搜索。这意味着 <code>match</code> 查询适合处理用户输入的自然语言文本。</p><p><code>term</code> 查询用于精确匹配，通常用于检索字段中确切匹配的值。这意味着 <code>term</code> 查询不会经过分析或分词过程，适合用于关键词、标识符或固定的值。</p><h2 id="使用redis分布式锁如何解决主从同步问题"><a href="#使用redis分布式锁如何解决主从同步问题" class="headerlink" title="使用redis分布式锁如何解决主从同步问题"></a>使用redis分布式锁如何解决主从同步问题</h2><p><strong>确保写操作在主节点</strong>：所有的分布式锁操作（包括获取和释放锁）都应该在主节点上执行。这样可以保证在任何时候，锁的状态都是最新的。</p><p><strong>避免在从节点上执行锁操作</strong>：在设计系统时，确保所有的锁操作请求都不会被重定向到从节点。这可以通过客户端库来实现，或者在应用层面进行控制。</p><p><strong>使用 RedLock 算法</strong>：RedLock 是一种设计用于 Redis 的分布式锁获取算法，它通过在多个 Redis 节点上尝试获取锁来提高锁的安全性。如果 Redis 集群使用了主从复制，RedLock 算法可以确保锁的安全性。</p><p><strong>监控主从复制延迟</strong>：监控主从复制的延迟情况，如果延迟过高，可能需要考虑优化复制性能或重新评估锁的超时时间。</p><p>redission中也进行了一些处理</p><ol><li><strong>多节点锁获取</strong>：Redisson 通过在所有的 Redis 服务器上尝试获取锁来实现这一点。即使在主从复制的环境中，这样也能确保锁的安全性</li><li><strong>自动检测和配置主从节点</strong>：Redisson 提供了自动检测和配置主从节点的功能，这有助于设置主从复制并保持数据一致性</li></ol><h2 id="redis分布式锁保证安全性？不会被其他线程操作？"><a href="#redis分布式锁保证安全性？不会被其他线程操作？" class="headerlink" title="redis分布式锁保证安全性？不会被其他线程操作？"></a>redis分布式锁保证安全性？不会被其他线程操作？</h2><ul><li><strong>使用 <code>SET</code> 命令的 <code>NX</code> 选项</strong>：这确保了只有当 key 不存在时，才能设置成功，从而避免了多个客户端同时获取锁。</li><li><strong>设置合理的超时时间</strong>：使用 <code>EX</code> 或 <code>PX</code> 选项设置超时时间，确保即使客户端出现问题，锁也能在一定时间后自动释放。</li></ul><p>分布式锁的值可以设置成UUID或者服务标识+线程标识，只要确保唯一。释放锁时，需要先判断现值与获取锁时的标识是否一致。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&#x27;get&#x27;</span>, KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>] <span class="keyword">then</span> <span class="keyword">return</span> redis.call(<span class="string">&#x27;del&#x27;</span>, KEYS[<span class="number">1</span>]) <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="mybatis缓存机制"><a href="#mybatis缓存机制" class="headerlink" title="mybatis缓存机制"></a>mybatis缓存机制</h2><p>MyBatis 提供了两种缓存机制：<strong>一级缓存</strong>（本地缓存）和 <strong>二级缓存</strong>（全局缓存）。</p><p>一级缓存是 MyBatis 的本地缓存，每次 SQL 查询会在当前 <code>SqlSession</code> 中缓存查询结果。一级缓存的生命周期与 <code>SqlSession</code> 绑定，即 <code>SqlSession</code> 在关闭时缓存会被清空。</p><p><strong>作用范围</strong>：每个 <code>SqlSession</code> 具有自己的一级缓存，缓存的数据只能在当前 <code>SqlSession</code> 内部访问。</p><p><strong>自动生效</strong>：MyBatis 默认启用一级缓存，不需要额外配置。</p><p><strong>缓存清空</strong>：在以下情况下一级缓存会被清空：</p><ul><li><code>SqlSession</code> 的 <code>commit()</code> 或 <code>rollback()</code> 操作。</li><li>执行了 <code>clearCache()</code> 方法。</li><li>执行了增、删、改操作（因为这些操作可能影响到缓存的有效性）。</li></ul><p>二级缓存是 MyBatis 的全局缓存，缓存的生命周期与 <code>SqlSessionFactory</code> 绑定，跨多个 <code>SqlSession</code> 实例共享。适用于多个 <code>SqlSession</code> 使用相同的数据源的情况。</p><p><strong>作用范围</strong>：多个 <code>SqlSession</code> 可以共享二级缓存，缓存的数据可以被不同的 <code>SqlSession</code> 访问。</p><p><strong>需要配置</strong>：二级缓存需要在 MyBatis 配置文件中启用，并为每个 <code>Mapper</code> 映射器配置缓存。</p><p><strong>缓存清空</strong>：当执行增、删、改操作时，相关的缓存会被清空。</p><p><strong>脏数据问题</strong>：二级缓存可能导致脏数据问题，因为多个 SqlSession 可能共享相同的缓存数据。如果一个 SqlSession 更新了数据但没有及时清空或更新缓存，其他 SqlSession 可能会读取到旧的数据。</p><h3 id="缓存失效条件"><a href="#缓存失效条件" class="headerlink" title="缓存失效条件"></a>缓存失效条件</h3><ul><li><strong>一级缓存</strong>：在 SqlSession 执行插入、更新或删除操作后，默认会清空一级缓存。</li><li><strong>二级缓存</strong>：在执行插入、更新或删除操作后，如果配置了相应的映射语句的 <code>flushCache</code> 属性为 <code>true</code>，则会清空涉及的命名空间的二级缓存。</li></ul><h2 id="mybatis什么时候读取会产生脏数据"><a href="#mybatis什么时候读取会产生脏数据" class="headerlink" title="mybatis什么时候读取会产生脏数据"></a>mybatis什么时候读取会产生脏数据</h2><p><strong>多会话并发操作</strong>：在多线程或多会话环境中，如果一个会话（SqlSession）读取了数据并将其缓存，而另一个会话对相同的数据进行了修改并提交了事务，那么第一个会话的缓存就会变成脏数据。</p><p><strong>缓存未设置为只读</strong>：MyBatis的二级缓存默认是只读的（<code>readOnly</code>属性为<code>true</code>），这意味着缓存的数据不会被修改。如果错误地将缓存设置为可写（<code>readOnly</code>属性为<code>false</code>），那么缓存的数据可能会被修改，导致脏数据。</p><p><strong>事务管理不当</strong>: 事务的隔离级别可能不够高，导致其他事务能看到未提交的数据。MyBatis 的一级缓存和二级缓存都受事务管理的影响，事务的隔离级别可能导致缓存中的数据与数据库中的实际数据不一致。</p><p><strong>缓存键不准确</strong>：如果缓存键的生成逻辑不正确，可能会导致不同的数据请求被错误地映射到同一个缓存键，从而覆盖彼此的数据，产生脏数据。</p><p>从AI回答中挑了几个可能原因。</p><h2 id="sql监控插件如何实现"><a href="#sql监控插件如何实现" class="headerlink" title="sql监控插件如何实现"></a>sql监控插件如何实现</h2><h3 id="使用-MyBatis-自定义拦截器"><a href="#使用-MyBatis-自定义拦截器" class="headerlink" title="使用 MyBatis 自定义拦截器"></a>使用 MyBatis 自定义拦截器</h3><p>MyBatis 提供了拦截器机制，可以拦截执行 SQL 的关键点，例如 <code>Executor</code>、<code>StatementHandler</code>、<code>ResultSetHandler</code> 等。通过自定义拦截器，可以在 SQL 执行前后记录时间，并计算执行耗时。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.Executor;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.MappedStatement;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Intercepts(&#123;</span></span><br><span class="line"><span class="meta">        @Signature(type = Executor.class, method = &quot;query&quot;, args = &#123;MappedStatement.class, Object.class&#125;),</span></span><br><span class="line"><span class="meta">        @Signature(type = Executor.class, method = &quot;update&quot;, args = &#123;MappedStatement.class, Object.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlTimeInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> invocation.proceed();  <span class="comment">// 执行SQL</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">long</span> executionTime = endTime - startTime;</span><br><span class="line"></span><br><span class="line">            MappedStatement mappedStatement = (MappedStatement) invocation.getArgs()[<span class="number">0</span>];</span><br><span class="line">            String sqlId = mappedStatement.getId();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;SQL [&quot;</span> + sqlId + <span class="string">&quot;] 执行耗时: &quot;</span> + executionTime + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 可配置属性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后注册这个拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.boot.autoconfigure.MybatisProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MybatisProperties mybatisProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactory</span><span class="params">(javax.sql.DataSource dataSource)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        org.apache.ibatis.session.Configuration configuration = <span class="keyword">new</span> org.apache.ibatis.session.Configuration();</span><br><span class="line">        configuration.setDataSource(dataSource);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册自定义拦截器</span></span><br><span class="line">        SqlTimeInterceptor sqlTimeInterceptor = <span class="keyword">new</span> SqlTimeInterceptor();</span><br><span class="line">        configuration.addInterceptor(sqlTimeInterceptor);</span><br><span class="line"></span><br><span class="line">        org.mybatis.spring.SqlSessionFactoryBean sessionFactoryBean = <span class="keyword">new</span> org.mybatis.spring.SqlSessionFactoryBean();</span><br><span class="line">        sessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">        sessionFactoryBean.setConfiguration(configuration);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-MyBatis-Plus-内置功能"><a href="#使用-MyBatis-Plus-内置功能" class="headerlink" title="使用 MyBatis-Plus 内置功能"></a>使用 MyBatis-Plus 内置功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.PerformanceInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PerformanceInterceptor <span class="title">performanceInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PerformanceInterceptor performanceInterceptor = <span class="keyword">new</span> PerformanceInterceptor();</span><br><span class="line">        performanceInterceptor.setMaxTime(<span class="number">1000</span>); <span class="comment">// 设置SQL最大执行时间，超过将抛出异常</span></span><br><span class="line">        performanceInterceptor.setFormat(<span class="keyword">true</span>);  <span class="comment">// 格式化SQL输出</span></span><br><span class="line">        <span class="keyword">return</span> performanceInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mq如何保证顺序性"><a href="#mq如何保证顺序性" class="headerlink" title="mq如何保证顺序性"></a>mq如何保证顺序性</h2><p>Kafka通过分区（partition）来保证消息的顺序性。在Kafka中，消息在每个分区内是按顺序存储的，消费者在读取消息时也是按照这个顺序读取的。只要消息被写入同一个分区，Kafka就能保证这些消息在消费时是按照生产的顺序被处理的。</p><p>如果希望保证某些消息的顺序性（例如，某个用户的所有操作日志必须按顺序处理），可以使用消息键（key）来控制消息的分区选择。Kafka根据消息键对分区数取模（hashing），将具有相同键的消息放入同一个分区，从而保证了这些消息在分区内的顺序。</p><p>消费者组中的每个消费者消费一个或多个分区，从而保证了这些消息在单个消费者内的顺序。</p><p>在RabbitMQ中，消息在队列中是按顺序存储的，消费者从队列中消费消息时，消息的消费顺序与生产顺序一致。因此，使用一个队列并确保一个消费者处理队列中的消息时，可以保证消息的顺序性。</p><p>如果多个消费者同时从同一个队列中消费，RabbitMQ会以轮询方式分配消息，这可能导致顺序被打乱。因此，如果需要严格的顺序，应该使用单个消费者。</p><p><strong>通过设计不同的队列来处理顺序性。</strong>例如，如果有多种类型的消息需要保持顺序，可以为每种类型创建单独的队列，并保证每个队列由一个消费者处理。</p><h2 id="队列能有多少消费者"><a href="#队列能有多少消费者" class="headerlink" title="队列能有多少消费者"></a>队列能有多少消费者</h2><p>这个问题我面试之后挺气的。面试官说我topic和队列搞混了，他应该认为分区是队列的概念。查了一下，其实当成队列也没毛病，是我孤陋寡闻了。</p><p>可以简单理解成kafka分区就是队列。</p><h3 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h3><p><strong>单个消费者组内的消费者数量</strong>：受限于<code>topic</code>的分区数量，最多可以有与分区数相同的消费者并行消费。如果消费者数量超过分区数，多余的消费者将处于空闲状态。</p><p><strong>多个消费者组</strong>：Kafka允许同一个<code>topic</code>有多个消费者组，每个消费者组的消费者数与分区数的关系相同。多个消费者组可以独立并行消费同一个<code>topic</code>，从而允许无限制数量的消费者整体上并行消费。</p><h3 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h3><p><strong>理论上，RabbitMQ能支持的消费者数量没有固定的上限</strong>。但实际可支持的消费者数量取决于服务器的资源（CPU、内存、网络带宽）、RabbitMQ的配置以及消息处理的速度。</p><h2 id="线程池如何设置核心线程数和最大线程数"><a href="#线程池如何设置核心线程数和最大线程数" class="headerlink" title="线程池如何设置核心线程数和最大线程数"></a>线程池如何设置核心线程数和最大线程数</h2><p>核心线程数：</p><ol><li>CPU密集型任务：<code>核心线程数 = CPU核心数 + 1</code></li><li>I/O密集型任务：<code>核心线程数 = CPU核心数 * 2</code> 或 <code>核心线程数 = CPU核心数 * (1 + 任务等待时间/任务执行时间)</code>。</li></ol><p>最大线程数：</p><p>最大线程数是线程池中允许存在的最大线程数。当任务数超过核心线程数并且队列已满时，线程池会创建新线程，直到达到最大线程数。如果线程数达到了最大值，新的任务将被拒绝。最大线程数应该足够大，以应对高峰负载时的需求，但也不宜过大，以免系统资源耗尽导致性能下降。</p><p>对于大多数I/O密集型应用，<code>最大线程数</code>通常设置为<code>核心线程数</code>的2倍或3倍。</p><p>对于CPU密集型应用，<code>最大线程数</code>可以设置为<code>核心线程数</code>或略大一些。</p><h2 id="在一个线程池中，核心线程数为3，最大线程数为10，此时有五个任务提交，会有多少个线程产生"><a href="#在一个线程池中，核心线程数为3，最大线程数为10，此时有五个任务提交，会有多少个线程产生" class="headerlink" title="在一个线程池中，核心线程数为3，最大线程数为10，此时有五个任务提交，会有多少个线程产生"></a>在一个线程池中，核心线程数为3，最大线程数为10，此时有五个任务提交，会有多少个线程产生</h2><p>这题原来我答错了。要复习一下线程池的处理逻辑。</p><ol><li>如果当前运行的线程数小于核心线程数，那么就会新建一个线程来执行任务。</li><li>如果当前运行的线程数等于或大于核心线程数，但是小于最大线程数，那么就把该任务放入到任务队列里等待执行。</li><li>如果向任务队列投放任务失败（任务队列已经满了），但是当前运行的线程数是小于最大线程数的，就新建一个线程来执行任务。</li><li>如果当前运行的线程数已经等同于最大线程数了，新建线程将会使当前运行的线程超出最大线程数，那么当前任务会被拒绝，拒绝策略会调用<code>RejectedExecutionHandler.rejectedExecution()</code>方法。</li></ol><p>gpt给我的解答是：</p><h3 id="情景1：使用无界队列（如LinkedBlockingQueue）"><a href="#情景1：使用无界队列（如LinkedBlockingQueue）" class="headerlink" title="情景1：使用无界队列（如LinkedBlockingQueue）"></a>情景1：使用无界队列（如<code>LinkedBlockingQueue</code>）</h3><ul><li><strong>核心线程数（3）</strong>：首先，线程池会尝试使用核心线程来处理任务。如果核心线程数未达到上限，那么新任务会直接创建新线程来执行，直到核心线程数达到3。</li><li><strong>最大线程数（10）</strong>：如果所有核心线程都在工作，而队列没有容量限制，那么新任务会被放入队列中，而不会创建新的线程。</li><li><strong>五个任务提交的处理方式</strong>：<ol><li>线程池会创建3个核心线程来处理前3个任务。</li><li>剩余的两个任务会被放入队列，等待空闲线程来处理。</li></ol></li><li><strong>最终结果</strong>：线程池将会有3个活跃线程在处理任务。</li></ul><h3 id="情景2：使用直接提交策略（如SynchronousQueue）"><a href="#情景2：使用直接提交策略（如SynchronousQueue）" class="headerlink" title="情景2：使用直接提交策略（如SynchronousQueue）"></a>情景2：使用直接提交策略（如<code>SynchronousQueue</code>）</h3><ul><li><strong>直接提交策略</strong>：使用<code>SynchronousQueue</code>时，每个任务必须被立即处理或执行，如果没有空闲线程来处理新任务，则会创建新的线程，直到达到最大线程数。</li><li><strong>五个任务提交的处理方式</strong>：<ol><li>线程池会创建3个核心线程来处理前3个任务。</li><li>剩余的两个任务由于没有空闲线程可用，线程池会创建2个非核心线程（达到最大线程数5）来处理这两个任务。</li></ol></li><li><strong>最终结果</strong>：线程池将会有5个活跃线程在处理任务。</li></ul><p>我对比了一下，gpt说的没有错。SynchronousQueue是没有容量的。所以会直接创建线程去处理。</p><h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>复盘下来，好像确实有比较多的问题答得不好，比如mybatis相关，还有最后一个线程池相关我也记错了。</p><p>在此向两位面试官道歉，虽然面试过程中并没有特别不愉快，但是一个小时后就发拒绝邮件使我变得暴躁，把原因都归结于你们的不专业上，但是复盘之后发现是自己水平不够，很多问题即使有文档帮助依旧回答的不够好。在此郑重道歉。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;今天zoom面试，亏我还那么期待，感觉好像面试官水平不咋样啊，面试完后一个小时直接发拒绝邮件了，我真是醉了，我感觉大部分回答的还可以吧，除了
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="随想" scheme="https://re0.top/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="面经" scheme="https://re0.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>2024面试复盘12</title>
    <link href="https://re0.top/2024/08/14/2024-08-14-replay/"/>
    <id>https://re0.top/2024/08/14/2024-08-14-replay/</id>
    <published>2024-08-14T12:00:00.000Z</published>
    <updated>2024-08-14T12:28:21.626Z</updated>
    
    <content type="html"><![CDATA[<h2 id="bin-log-redo-log-undo-log"><a href="#bin-log-redo-log-undo-log" class="headerlink" title="bin log, redo log, undo log"></a>bin log, redo log, undo log</h2><p>MySQL 日志 主要包括错误日志、查询日志、慢查询日志、事务日志、二进制日志几大类。其中，比较重要的还要属二进制日志 binlog（归档日志）和事务日志 redo log（重做日志）和 undo log（回滚日志）。</p><h3 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h3><p>redo log（重做日志）是 InnoDB 存储引擎独有的，它让 MySQL 拥有了崩溃恢复能力。</p><p>比如 MySQL 实例挂了或宕机了，重启时，InnoDB 存储引擎会使用 redo log 恢复数据，保证数据的持久性与完整性。</p><p>MySQL 中数据是以页为单位，你查询一条记录，会从硬盘把一页的数据加载出来，加载出来的数据叫数据页，会放入到 <code>Buffer Pool</code> 中。</p><p>后续的查询都是先从 <code>Buffer Pool</code> 中找，没有命中再去硬盘加载，减少硬盘 IO 开销，提升性能。</p><p>更新表数据的时候，也是如此，发现 <code>Buffer Pool</code> 里存在要更新的数据，就直接在 <code>Buffer Pool</code> 里更新。</p><p>然后会把“在某个数据页上做了什么修改”记录到重做日志缓存（<code>redo log buffer</code>）里，接着刷盘到 redo log 文件里。</p><p>理想情况，事务一提交就会进行刷盘操作，但实际上，刷盘的时机是根据策略来进行的。</p><p>InnoDB 将 redo log 刷到磁盘上有几种情况：</p><ol><li>事务提交：当事务提交时，log buffer 里的 redo log 会被刷新到磁盘（可以通过<code>innodb_flush_log_at_trx_commit</code>参数控制，后文会提到）。</li><li>log buffer 空间不足时：log buffer 中缓存的 redo log 已经占满了 log buffer 总容量的大约一半左右，就需要把这些日志刷新到磁盘上。</li><li>事务日志缓冲区满：InnoDB 使用一个事务日志缓冲区（transaction log buffer）来暂时存储事务的重做日志条目。当缓冲区满时，会触发日志的刷新，将日志写入磁盘。</li><li>Checkpoint（检查点）：InnoDB 定期会执行检查点操作，将内存中的脏数据（已修改但尚未写入磁盘的数据）刷新到磁盘，并且会将相应的重做日志一同刷新，以确保数据的一致性。</li><li>后台刷新线程：InnoDB 启动了一个后台线程，负责周期性（每隔 1 秒）地将脏页（已修改但尚未写入磁盘的数据页）刷新到磁盘，并将相关的重做日志一同刷新。</li><li>正常关闭服务器：MySQL 关闭的时候，redo log 都会刷入到磁盘里去。</li></ol><p>总之，InnoDB 在多种情况下会刷新重做日志，以保证数据的持久性和一致性。</p><p>我们要注意设置正确的刷盘策略<code>innodb_flush_log_at_trx_commit</code> 。根据 MySQL 配置的刷盘策略的不同，MySQL 宕机之后可能会存在轻微的数据丢失问题。</p><p><code>innodb_flush_log_at_trx_commit</code> 的值有 3 种，也就是共有 3 种刷盘策略：</p><ul><li><strong>0</strong>：设置为 0 的时候，表示每次事务提交时不进行刷盘操作。这种方式性能最高，但是也最不安全，因为如果 MySQL 挂了或宕机了，可能会丢失最近 1 秒内的事务。</li><li><strong>1</strong>：设置为 1 的时候，表示每次事务提交时都将进行刷盘操作。这种方式性能最低，但是也最安全，因为只要事务提交成功，redo log 记录就一定在磁盘里，不会有任何数据丢失。</li><li><strong>2</strong>：设置为 2 的时候，表示每次事务提交时都只把 log buffer 里的 redo log 内容写入 page cache（文件系统缓存）。page cache 是专门用来缓存文件的，这里被缓存的文件就是 redo log 文件。这种方式的性能和安全性都介于前两者中间。</li></ul><p>刷盘策略<code>innodb_flush_log_at_trx_commit</code> 的默认值为 1，设置为 1 的时候才不会丢失任何数据。为了保证事务的持久性，我们必须将其设置为 1。</p><p>另外，InnoDB 存储引擎有一个后台线程，每隔<code>1</code> 秒，就会把 <code>redo log buffer</code> 中的内容写到文件系统缓存（<code>page cache</code>），然后调用 <code>fsync</code> 刷盘。</p><h4 id="一个没有提交事务的-redo-log-记录，也可能会刷盘。"><a href="#一个没有提交事务的-redo-log-记录，也可能会刷盘。" class="headerlink" title="一个没有提交事务的 redo log 记录，也可能会刷盘。"></a>一个没有提交事务的 redo log 记录，也可能会刷盘。</h4><p>因为在事务执行过程 redo log 记录是会写入<code>redo log buffer</code> 中，这些 redo log 记录会被后台线程刷盘。</p><h4 id="日志文件组"><a href="#日志文件组" class="headerlink" title="日志文件组"></a>日志文件组</h4><p>硬盘上存储的 redo log 日志文件不只一个，而是以一个<strong>日志文件组</strong>的形式出现的，每个的<code>redo</code>日志文件大小都是一样的。</p><p>比如可以配置为一组<code>4</code>个文件，每个文件的大小是 <code>1GB</code>，整个 redo log 日志文件组可以记录<code>4G</code>的内容。</p><p>在这个<strong>日志文件组</strong>中还有两个重要的属性，分别是 <code>write pos、checkpoint</code></p><ul><li><strong>write pos</strong> 是当前记录的位置，一边写一边后移</li><li><strong>checkpoint</strong> 是当前要擦除的位置，也是往后推移</li></ul><p>每次刷盘 redo log 记录到<strong>日志文件组</strong>中，<code>write pos</code> 位置就会后移更新。</p><p>每次 MySQL 加载<strong>日志文件组</strong>恢复数据时，会清空加载过的 redo log 记录，并把 <code>checkpoint</code> 后移更新。</p><p><code>write pos</code> 和 <code>checkpoint</code> 之间的还空着的部分可以用来写入新的 redo log 记录。</p><p>如果 <code>write pos</code> 追上 <code>checkpoint</code> ，表示<strong>日志文件组</strong>满了，这时候不能再写入新的 redo log 记录，MySQL 得停下来，清空一些记录，把 <code>checkpoint</code> 推进一下。</p><p>在 MySQL 8.0.30 之前可以通过 <code>innodb_log_files_in_group</code> 和 <code>innodb_log_file_size</code> 配置日志文件组的文件数和文件大小，但在 MySQL 8.0.30 及之后的版本中，这两个变量已被废弃，即使被指定也是用来计算 <code>innodb_redo_log_capacity</code> 的值。而日志文件组的文件数则固定为 32，文件大小则为 <code>innodb_redo_log_capacity / 32</code> 。</p><h3 id="bin-log"><a href="#bin-log" class="headerlink" title="bin log"></a>bin log</h3><p>redo log 它是物理日志，记录内容是“在某个数据页上做了什么修改”，属于 InnoDB 存储引擎。</p><p>而 binlog 是逻辑日志，记录内容是语句的原始逻辑，类似于“给 ID=2 这一行的 c 字段加 1”，属于<code>MySQL Server</code> 层。</p><p>不管用什么存储引擎，只要发生了表数据更新，都会产生 binlog 日志。</p><p>可以说 MySQL 数据库的<strong>数据备份、主备、主主、主从</strong>都离不开 binlog，需要依靠 binlog 来同步数据，保证数据一致性。</p><p>binlog 会记录所有涉及更新数据的逻辑操作，并且是顺序写。</p><p>binlog 日志有三种格式，可以通过<code>binlog_format</code>参数指定。</p><ul><li><strong>statement</strong></li><li><strong>row</strong></li><li><strong>mixed</strong></li></ul><p>指定<code>statement</code>，记录的内容是<code>SQL</code>语句原文，比如执行一条<code>update T set update_time=now() where id=1</code>，记录的内容如下。</p><p>同步数据时，会执行记录的<code>SQL</code>语句，但是有个问题，<code>update_time=now()</code>这里会获取当前系统时间，直接执行会导致与原库的数据不一致。</p><p>为了解决这种问题，我们需要指定为<code>row</code>，记录的内容不再是简单的<code>SQL</code>语句了，还包含操作的具体数据。</p><p><code>row</code>格式记录的内容看不到详细信息，要通过<code>mysqlbinlog</code>工具解析出来。</p><p><code>update_time=now()</code>变成了具体的时间<code>update_time=1627112756247</code>，条件后面的@1、@2、@3 都是该行数据第 1 个~3 个字段的原始值（<strong>假设这张表只有 3 个字段</strong>）。</p><p>这样就能保证同步数据的一致性，通常情况下都是指定为<code>row</code>，这样可以为数据库的恢复与同步带来更好的可靠性。</p><p>但是这种格式，需要更大的容量来记录，比较占用空间，恢复与同步时会更消耗 IO 资源，影响执行速度。</p><p>所以就有了一种折中的方案，指定为<code>mixed</code>，记录的内容是前两者的混合。</p><p>MySQL 会判断这条<code>SQL</code>语句是否可能引起数据不一致，如果是，就用<code>row</code>格式，否则就用<code>statement</code>格式。</p><h4 id="写入机制"><a href="#写入机制" class="headerlink" title="写入机制"></a>写入机制</h4><p>binlog 的写入时机也非常简单，事务执行过程中，先把日志写到<code>binlog cache</code>，事务提交的时候，再把<code>binlog cache</code>写到 binlog 文件中。</p><p>因为一个事务的 binlog 不能被拆开，无论这个事务多大，也要确保一次性写入，所以系统会给每个线程分配一个块内存作为<code>binlog cache</code>。</p><p>我们可以通过<code>binlog_cache_size</code>参数控制单个线程 binlog cache 大小，如果存储内容超过了这个参数，就要暂存到磁盘（<code>Swap</code>）。</p><p><code>write</code>和<code>fsync</code>的时机，可以由参数<code>sync_binlog</code>控制，默认是<code>1</code>。</p><p>为<code>0</code>的时候，表示每次提交事务都只<code>write</code>，由系统自行判断什么时候执行<code>fsync</code>。</p><p>虽然性能得到提升，但是机器宕机，<code>page cache</code>里面的 binlog 会丢失。</p><p>为了安全起见，可以设置为<code>1</code>，表示每次提交事务都会执行<code>fsync</code>，就如同 <strong>redo log 日志刷盘流程</strong> 一样。</p><p>最后还有一种折中方式，可以设置为<code>N(N&gt;1)</code>，表示每次提交事务都<code>write</code>，但累积<code>N</code>个事务后才<code>fsync</code>。</p><p>在出现 IO 瓶颈的场景里，将<code>sync_binlog</code>设置成一个比较大的值，可以提升性能。</p><p>同样的，如果机器宕机，会丢失最近<code>N</code>个事务的 binlog 日志。</p><h4 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h4><p>redo log（重做日志）让 InnoDB 存储引擎拥有了崩溃恢复能力。</p><p>binlog（归档日志）保证了 MySQL 集群架构的数据一致性。</p><p>虽然它们都属于持久化的保证，但是侧重点不同。</p><p>在执行更新语句过程，会记录 redo log 与 binlog 两块日志，以基本的事务为单位，redo log 在事务执行过程中可以不断写入，而 binlog 只有在提交事务时才写入，所以 redo log 与 binlog 的写入时机不一样。</p><p>回到正题，redo log 与 binlog 两份日志之间的逻辑不一致，会出现什么问题？</p><p>我们以<code>update</code>语句为例，假设<code>id=2</code>的记录，字段<code>c</code>值是<code>0</code>，把字段<code>c</code>值更新成<code>1</code>，<code>SQL</code>语句为<code>update T set c=1 where id=2</code>。</p><p>假设执行过程中写完 redo log 日志后，binlog 日志写期间发生了异常，会出现什么情况呢？</p><p>由于 binlog 没写完就异常，这时候 binlog 里面没有对应的修改记录。因此，之后用 binlog 日志恢复数据时，就会少这一次更新，恢复出来的这一行<code>c</code>值是<code>0</code>，而原库因为 redo log 日志恢复，这一行<code>c</code>值是<code>1</code>，最终数据不一致。</p><p>为了解决两份日志之间的逻辑一致问题，InnoDB 存储引擎使用<strong>两阶段提交</strong>方案。</p><p>原理很简单，将 redo log 的写入拆成了两个步骤<code>prepare</code>和<code>commit</code>，这就是<strong>两阶段提交</strong>。</p><p>使用<strong>两阶段提交</strong>后，写入 binlog 时发生异常也不会有影响，因为 MySQL 根据 redo log 日志恢复数据时，发现 redo log 还处于<code>prepare</code>阶段，并且没有对应 binlog 日志，就会回滚该事务。</p><h3 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h3><p>每一个事务对数据的修改都会被记录到 undo log ，当执行事务过程中出现错误或者需要执行回滚操作的话，MySQL 可以利用 undo log 将数据恢复到事务开始之前的状态。</p><p>undo log 属于逻辑日志，记录的是 SQL 语句，比如说事务执行一条 DELETE 语句，那 undo log 就会记录一条相对应的 INSERT 语句。同时，undo log 的信息也会被记录到 redo log 中，因为 undo log 也要实现持久性保护。并且，undo-log 本身是会被删除清理的，例如 INSERT 操作，在事务提交之后就可以清除掉了；UPDATE/DELETE 操作在事务提交不会立即删除，会加入 history list，由后台线程 purge 进行清理。</p><p>undo log 是采用 segment（段）的方式来记录的，每个 undo 操作在记录的时候占用一个 <strong>undo log segment</strong>（undo 日志段），undo log segment 包含在 <strong>rollback segment</strong>（回滚段）中。事务开始时，需要为其分配一个 rollback segment。每个 rollback segment 有 1024 个 undo log segment，这有助于管理多个并发事务的回滚需求。</p><p>通常情况下， <strong>rollback segment header</strong>（通常在回滚段的第一个页）负责管理 rollback segment。rollback segment header 是 rollback segment 的一部分，通常在回滚段的第一个页。<strong>history list</strong> 是 rollback segment header 的一部分，它的主要作用是记录所有已经提交但还没有被清理（purge）的事务的 undo log。这个列表使得 purge 线程能够找到并清理那些不再需要的 undo log 记录。</p><p>另外，<code>MVCC</code> 的实现依赖于：<strong>隐藏字段、Read View、undo log</strong>。在内部实现中，InnoDB 通过数据行的 <code>DB_TRX_ID</code> 和 <code>Read View</code> 来判断数据的可见性，如不可见，则通过数据行的 <code>DB_ROLL_PTR</code> 找到 undo log 中的历史版本。每个事务读到的数据版本可能是不一样的，在同一个事务中，用户只能看到该事务创建 <code>Read View</code> 之前已经提交的修改和该事务本身做的修改。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>MySQL InnoDB 引擎使用 <strong>redo log(重做日志)</strong> 保证事务的<strong>持久性</strong>，使用 <strong>undo log(回滚日志)</strong> 来保证事务的<strong>原子性</strong>。</p><p>MySQL 数据库的<strong>数据备份、主备、主主、主从</strong>都离不开 binlog，需要依靠 binlog 来同步数据，保证数据一致性。</p><h2 id="和-equals的区别"><a href="#和-equals的区别" class="headerlink" title="== 和 equals的区别"></a>== 和 equals的区别</h2><ul><li>对于基本数据类型来说，<code>==</code> 比较的是值。</li><li>对于引用数据类型来说，<code>==</code> 比较的是对象的内存地址。</li></ul><p><strong><code>equals()</code></strong> 不能用于判断基本数据类型的变量，只能用来判断两个对象是否相等。<code>equals()</code>方法存在于<code>Object</code>类中，而<code>Object</code>类是所有类的直接或间接父类，因此所有的类都有<code>equals()</code>方法。</p><p><code>equals()</code> 方法存在两种使用情况：</p><ul><li><strong>类没有重写 <code>equals()</code>方法</strong>：通过<code>equals()</code>比较该类的两个对象时，等价于通过“==”比较这两个对象，使用的默认是 <code>Object</code>类<code>equals()</code>方法。</li><li><strong>类重写了 <code>equals()</code>方法</strong>：一般我们都重写 <code>equals()</code>方法来比较两个对象中的属性是否相等；若它们的属性相等，则返回 true(即，认为这两个对象相等)。</li></ul><h2 id="为什么重写-equals-时必须重写-hashCode-方法？"><a href="#为什么重写-equals-时必须重写-hashCode-方法？" class="headerlink" title="为什么重写 equals() 时必须重写 hashCode() 方法？"></a>为什么重写 equals() 时必须重写 hashCode() 方法？</h2><p>因为两个相等的对象的 <code>hashCode</code> 值必须是相等。也就是说如果 <code>equals</code> 方法判断两个对象是相等的，那这两个对象的 <code>hashCode</code> 值也要相等。</p><p>如果重写 <code>equals()</code> 时没有重写 <code>hashCode()</code> 方法的话就可能会导致 <code>equals</code> 方法判断是相等的两个对象，<code>hashCode</code> 值却不相等。</p><h2 id="索引是怎么使用？失效时机？"><a href="#索引是怎么使用？失效时机？" class="headerlink" title="索引是怎么使用？失效时机？"></a>索引是怎么使用？失效时机？</h2><p>索引是一种用于加速数据库表中数据检索的结构。它类似于书籍中的目录，通过对数据的关键列建立索引，可以快速定位所需的数据行，而无需全表扫描。</p><p><strong>类型</strong>：</p><ul><li><strong>B-Tree 索引</strong>：最常见的索引类型，适用于大多数查询操作。</li><li><strong>Hash 索引</strong>：基于哈希表，适用于精确匹配查询。</li><li><strong>Full-Text 索引</strong>：用于全文搜索。</li><li><strong>R-Tree 索引</strong>：用于空间数据类型（如 GIS 数据）的查询。</li></ul><p><strong>优点</strong>：</p><ul><li>使用索引可以大大加快数据的检索速度（大大减少检索的数据量）, 减少 IO 次数，这也是创建索引的最主要的原因。</li><li>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。</li></ul><p><strong>缺点</strong>：</p><ul><li>创建索引和维护索引需要耗费许多时间。当对表中的数据进行增删改的时候，如果数据有索引，那么索引也需要动态的修改，会降低 SQL 执行效率。</li><li>索引需要使用物理文件存储，也会耗费一定空间。</li></ul><p>但是，<strong>使用索引一定能提高查询性能吗?</strong></p><p>大多数情况下，索引查询都是比全表扫描要快的。但是如果数据库的数据量不大，那么使用索引也不一定能够带来很大提升。</p><h3 id="索引失效场景"><a href="#索引失效场景" class="headerlink" title="索引失效场景"></a>索引失效场景</h3><p>创建了组合索引，但查询条件未遵守最左匹配原则;</p><p>在索引列上进行计算、函数、类型转换等操作;</p><p>以 % 开头的 LIKE 查询比如 <code>LIKE &#39;%abc&#39;;</code>;</p><p>查询条件中使用 OR，且 OR 的前后条件中有一个列没有索引，涉及的索引都不会被使用到;</p><p>IN 的取值范围较大时会导致索引失效，走全表扫描(NOT IN 和 IN 的失效场景相同);</p><p>发生隐式转换；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="number">123</span>;  <span class="comment">-- 假设 username 是字符串类型，索引失效</span></span><br></pre></td></tr></table></figure><p>查询条件使用 <code>!=</code> 或 <code>&lt;&gt;</code></p><p>使用 <code>IS NULL</code> 或 <code>IS NOT NULL</code></p><p>排序操作（ORDER BY）中混合使用 ASC 和 DESC</p><p>表中的数据量很少</p><h2 id="mysql中的锁"><a href="#mysql中的锁" class="headerlink" title="mysql中的锁"></a>mysql中的锁</h2><h3 id="乐观锁与悲观锁"><a href="#乐观锁与悲观锁" class="headerlink" title="乐观锁与悲观锁"></a>乐观锁与悲观锁</h3><p><strong>乐观锁</strong> 基于乐观的假设，认为多个事务并发修改数据时不会发生冲突。它通常不直接使用数据库的锁机制，而是通过版本号或时间戳等机制来实现。</p><p>在数据库表中添加一个 <code>version</code> 字段，表示数据的版本。当事务读取数据时，也会读取这个 <code>version</code>。在提交更新时，事务会检查当前数据库中的 <code>version</code> 是否与自己读取时的一致。如果一致，才会更新数据，并将 <code>version</code> 加1；如果不一致，表示有其他事务已经修改了该数据，当前事务需要进行重试或处理冲突。</p><p><strong>悲观锁</strong> 采取悲观的态度，假设并发修改数据时会发生冲突。因此，在操作数据之前，会先锁住数据，以防止其他事务对其进行修改。悲观锁通常通过数据库的锁机制来实现。    </p><p>使用 <code>SELECT ... FOR UPDATE</code> 或 <code>LOCK IN SHARE MODE</code> 语句显式地对数据行进行加锁。在使用 <code>FOR UPDATE</code> 时，该行数据会被锁住，其他事务在同一行上执行 <code>SELECT FOR UPDATE</code> 或更新操作时会被阻塞，直到锁被释放。</p><p>在事务中执行更新、删除操作时，MySQL 会自动为相关数据行加锁。</p><h3 id="表级锁和行级锁"><a href="#表级锁和行级锁" class="headerlink" title="表级锁和行级锁"></a>表级锁和行级锁</h3><p><strong>表级锁：</strong> MySQL 中锁定粒度最大的一种锁（全局锁除外），是针对非索引字段加的锁，对当前操作的整张表加锁，实现简单，资源消耗也比较少，加锁快，不会出现死锁。不过，触发锁冲突的概率最高，高并发下效率极低。表级锁和存储引擎无关，MyISAM 和 InnoDB 引擎都支持表级锁。</p><p><strong>行级锁：</strong> MySQL 中锁定粒度最小的一种锁，是 <strong>针对索引字段加的锁</strong> ，只针对当前操作的行记录进行加锁。 行级锁能大大减少数据库操作的冲突。其加锁粒度最小，并发度高，但加锁的开销也最大，加锁慢，会出现死锁。行级锁和存储引擎有关，是在存储引擎层面实现的。</p><p>InnoDB 的行锁是针对索引字段加的锁，表级锁是针对非索引字段加的锁。当我们执行 <code>UPDATE</code>、<code>DELETE</code> 语句时，如果 <code>WHERE</code>条件中字段没有命中唯一索引或者索引失效的话，就会导致扫描全表对表中的所有行记录进行加锁。这个在我们日常工作开发中经常会遇到，一定要多多注意！！</p><h3 id="行锁有哪些"><a href="#行锁有哪些" class="headerlink" title="行锁有哪些"></a>行锁有哪些</h3><p><strong>记录锁（Record Lock）</strong>：也被称为记录锁，属于单个行记录上的锁。</p><p><strong>间隙锁（Gap Lock）</strong>：锁定一个范围，不包括记录本身。</p><p><strong>临键锁（Next-Key Lock）</strong>：Record Lock+Gap Lock，锁定一个范围，包含记录本身，主要目的是为了解决幻读问题（MySQL 事务部分提到过）。记录锁只能锁住已经存在的记录，为了避免插入新记录，需要依赖间隙锁。</p><p>在 InnoDB 默认的隔离级别 REPEATABLE-READ 下，行锁默认使用的是 Next-Key Lock。但是，如果操作的索引是唯一索引或主键，InnoDB 会对 Next-Key Lock 进行优化，将其降级为 Record Lock，即仅锁住索引本身，而不是范围。</p><h3 id="共享锁和排他锁"><a href="#共享锁和排他锁" class="headerlink" title="共享锁和排他锁"></a>共享锁和排他锁</h3><p>不论是表级锁还是行级锁，都存在共享锁（Share Lock，S 锁）和排他锁（Exclusive Lock，X 锁）这两类：</p><ul><li><strong>共享锁（S 锁）</strong>：又称读锁，事务在读取记录的时候获取共享锁，允许多个事务同时获取（锁兼容）。</li><li><strong>排他锁（X 锁）</strong>：又称写锁/独占锁，事务在修改记录的时候获取排他锁，不允许多个事务同时获取。如果一个记录已经被加了排他锁，那其他事务不能再对这条事务加任何类型的锁（锁不兼容）。</li></ul><table><thead><tr><th align="left"></th><th align="left">S 锁</th><th>X 锁</th></tr></thead><tbody><tr><td align="left">S 锁</td><td align="left">不冲突</td><td>冲突</td></tr><tr><td align="left">X 锁</td><td align="left">冲突</td><td>冲突</td></tr></tbody></table><p>由于 MVCC 的存在，对于一般的 <code>SELECT</code> 语句，InnoDB 不会加任何锁。不过， 你可以通过以下语句显式加共享锁或排他锁。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 共享锁 可以在 MySQL <span class="number">5.7</span> 和 MySQL <span class="number">8.0</span> 中使用</span><br><span class="line"><span class="keyword">SELECT</span> ... LOCK <span class="keyword">IN</span> SHARE MODE;</span><br><span class="line"># 共享锁 可以在 MySQL <span class="number">8.0</span> 中使用</span><br><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FOR</span> SHARE;</span><br><span class="line"># 排他锁</span><br><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FOR</span> UPDATE;</span><br></pre></td></tr></table></figure><h3 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h3><p>如果需要用到表锁的话，如何判断表中的记录没有行锁呢，一行一行遍历肯定是不行，性能太差。我们需要用到一个叫做意向锁的东东来快速判断是否可以对某个表使用表锁。</p><p>意向锁是表级锁，共有两种：</p><ul><li><strong>意向共享锁（Intention Shared Lock，IS 锁）</strong>：事务有意向对表中的某些记录加共享锁（S 锁），加共享锁前必须先取得该表的 IS 锁。</li><li><strong>意向排他锁（Intention Exclusive Lock，IX 锁）</strong>：事务有意向对表中的某些记录加排他锁（X 锁），加排他锁之前必须先取得该表的 IX 锁。</li></ul><p><strong>意向锁是由数据引擎自己维护的，用户无法手动操作意向锁，在为数据行加共享/排他锁之前，InooDB 会先获取该数据行所在在数据表的对应意向锁。</strong></p><p>意向锁之间是互相兼容的。</p><table><thead><tr><th></th><th>IS 锁</th><th>IX 锁</th></tr></thead><tbody><tr><td>IS 锁</td><td>兼容</td><td>兼容</td></tr><tr><td>IX 锁</td><td>兼容</td><td>兼容</td></tr></tbody></table><p>意向锁和共享锁和排它锁互斥（这里指的是表级别的共享锁和排他锁，意向锁不会与行级的共享锁和排他锁互斥）。</p><table><thead><tr><th></th><th>IS 锁</th><th>IX 锁</th></tr></thead><tbody><tr><td>S 锁</td><td>兼容</td><td>互斥</td></tr><tr><td>X 锁</td><td>互斥</td><td>互斥</td></tr></tbody></table><h3 id="快照读和当前读"><a href="#快照读和当前读" class="headerlink" title="快照读和当前读"></a>快照读和当前读</h3><p><strong>快照读</strong>（一致性非锁定读）就是单纯的 <code>SELECT</code> 语句，但不包括下面这两类 <code>SELECT</code> 语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FOR</span> UPDATE</span><br><span class="line"># 共享锁 可以在 MySQL <span class="number">5.7</span> 和 MySQL <span class="number">8.0</span> 中使用</span><br><span class="line"><span class="keyword">SELECT</span> ... LOCK <span class="keyword">IN</span> SHARE MODE;</span><br><span class="line"># 共享锁 可以在 MySQL <span class="number">8.0</span> 中使用</span><br><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FOR</span> SHARE;</span><br></pre></td></tr></table></figure><p>快照即记录的历史版本，每行记录可能存在多个历史版本（多版本技术）。</p><p>快照读的情况下，如果读取的记录正在执行 UPDATE/DELETE 操作，读取操作不会因此去等待记录上 X 锁的释放，而是会去读取行的一个快照。</p><p>只有在事务隔离级别 RC(读取已提交) 和 RR（可重读）下，InnoDB 才会使用一致性非锁定读：</p><ul><li>在 RC 级别下，对于快照数据，一致性非锁定读总是读取被锁定行的最新一份快照数据。</li><li>在 RR 级别下，对于快照数据，一致性非锁定读总是读取本事务开始时的行数据版本。</li></ul><p>快照读比较适合对于数据一致性要求不是特别高且追求极致性能的业务场景。</p><p><strong>当前读</strong> （一致性锁定读）就是给行记录加 X 锁或 S 锁。</p><p>当前读的一些常见 SQL 语句类型如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 对读的记录加一个X锁</span><br><span class="line">SELECT...FOR UPDATE</span><br><span class="line"># 对读的记录加一个S锁</span><br><span class="line">SELECT...LOCK <span class="keyword">IN</span> SHARE MODE</span><br><span class="line"># 对读的记录加一个S锁</span><br><span class="line">SELECT...FOR SHARE</span><br><span class="line"># 对修改的记录加一个X锁</span><br><span class="line">INSERT...</span><br><span class="line">UPDATE...</span><br><span class="line">DELETE...</span><br></pre></td></tr></table></figure><h3 id="自增锁"><a href="#自增锁" class="headerlink" title="自增锁"></a>自增锁</h3><p>关系型数据库设计表的时候，通常会有一列作为自增主键。InnoDB 中的自增主键会涉及一种比较特殊的表级锁— <strong>自增锁（AUTO-INC Locks）</strong> 。</p><p>更准确点来说，不仅仅是自增主键，<code>AUTO_INCREMENT</code>的列都会涉及到自增锁，毕竟非主键也可以设置自增长。</p><p>如果一个事务正在插入数据到有自增列的表时，会先获取自增锁，拿不到就可能会被阻塞住。这里的阻塞行为只是自增锁行为的其中一种，可以理解为自增锁就是一个接口，其具体的实现有多种。具体的配置项为 <code>innodb_autoinc_lock_mode</code> （MySQL 5.1.22 引入），可以选择的值如下</p><table><thead><tr><th align="left">innodb_autoinc_lock_mode</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">传统模式</td></tr><tr><td align="left">1</td><td align="left">连续模式（MySQL 8.0 之前默认）</td></tr><tr><td align="left">2</td><td align="left">交错模式(MySQL 8.0 之后默认)</td></tr></tbody></table><p>交错模式下，所有的“INSERT-LIKE”语句（所有的插入语句，包括：<code>INSERT</code>、<code>REPLACE</code>、<code>INSERT…SELECT</code>、<code>REPLACE…SELECT</code>、<code>LOAD DATA</code>等）都不使用表级锁，使用的是轻量级互斥锁实现，多条插入语句可以并发执行，速度更快，扩展性也更好。</p><p>不过，如果你的 MySQL 数据库有主从同步需求并且 Binlog 存储格式为 Statement 的话，不要将 InnoDB 自增锁模式设置为交叉模式，不然会有数据不一致性问题。这是因为并发情况下插入语句的执行顺序就无法得到保障。</p><h2 id="zookeeper为什么可以实现强一致性的分布式锁"><a href="#zookeeper为什么可以实现强一致性的分布式锁" class="headerlink" title="zookeeper为什么可以实现强一致性的分布式锁"></a>zookeeper为什么可以实现强一致性的分布式锁</h2><p>ZooKeeper 提供了强顺序一致性，这意味着客户端对同一个 ZooKeeper 节点的更新操作是按照顺序执行的，并且所有客户端都能看到相同的更新顺序。通过这种顺序一致性，ZooKeeper 可以确保所有客户端在同一时间看到的数据状态是一致的。</p><p>ZooKeeper 提供了临时顺序节点的功能。客户端在创建一个临时顺序节点时，会获得一个全局唯一且递增的序号，这个节点在客户端会话结束时（比如客户端崩溃或与 ZooKeeper 的连接断开）会自动删除。利用这一特性，可以实现分布式锁。</p><p><strong>避免死锁与竞争</strong></p><ul><li><strong>自动删除节点</strong>：由于使用的是临时顺序节点，当客户端因故障与 ZooKeeper 断开连接时，ZooKeeper 会自动删除该客户端创建的节点，避免锁资源被永久占用，从而防止死锁的发生。</li><li><strong>竞争公平性</strong>：因为所有节点都是按顺序创建的，锁的获取是基于节点的顺序号，先创建的节点先获得锁，这保证了锁的公平性，不会因为客户端的网络延迟等原因导致锁的争夺不公平。</li></ul><p>ZooKeeper 使用的是 <strong>Zab（ZooKeeper Atomic Broadcast）协议</strong> 作为其核心的分布式一致性算法。</p><p>Zab 协议在 ZooKeeper 中主要用于以下两个目的：</p><ul><li><strong>Leader 选举</strong>：在 ZooKeeper 集群中选出一个主节点（Leader），其余节点作为从节点（Followers）。所有写请求都通过 Leader 处理，再由 Leader 将更新广播给 Followers。</li><li><strong>原子广播（Atomic Broadcast）</strong>：确保所有节点以相同的顺序应用相同的更新，保持数据的一致性。</li></ul><h3 id="Zab-协议的核心流程"><a href="#Zab-协议的核心流程" class="headerlink" title="Zab 协议的核心流程"></a><strong>Zab 协议的核心流程</strong></h3><ol><li><strong>Leader 选举</strong>：当 ZooKeeper 集群启动或现任 Leader 出现故障时，Zab 协议会启动 Leader 选举过程。集群中的所有节点会根据各自的投票信息选出一个新的 Leader。选举过程中，节点会根据各自的 <code>ZXID</code>（事务 ID）来决定投票，<code>ZXID</code> 更大的节点具有更高的优先级。</li><li><strong>同步数据</strong>：当新的 Leader 被选出后，Leader 会与 Followers 同步数据，确保所有节点的状态一致。这通常涉及将 Followers 的数据状态更新到最新的事务版本。</li><li><strong>原子广播</strong>：在广播模式下，所有的写请求都被发送到 Leader 处理。Leader 将这些写请求封装成事务提案（Proposal），并将其以原子广播的方式发送给所有 Followers。所有 Followers 都必须对提案进行确认（Ack），一旦 Leader 收到了半数以上节点的确认，它就会将事务提交，并通知所有节点应用该事务。</li><li><strong>保证一致性</strong>：Zab 协议通过严格的顺序更新和多节点确认机制，确保即使在节点崩溃或网络分区等情况下，ZooKeeper 集群仍然能够保证数据的一致性和可用性。</li></ol><h2 id="缓存击穿，穿透，雪崩"><a href="#缓存击穿，穿透，雪崩" class="headerlink" title="缓存击穿，穿透，雪崩"></a>缓存击穿，穿透，雪崩</h2><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>缓存击穿中，请求的 key 对应的是 <strong>热点数据</strong> ，该数据 <strong>存在于数据库中，但不存在于缓存中（通常是因为缓存中的那份数据已经过期）</strong> 。这就可能会导致瞬时大量的请求直接打到了数据库上，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。</p><p>举个例子：秒杀进行过程中，缓存中的某个秒杀商品的数据突然过期，这就导致瞬时大量对该商品的请求直接落到数据库上，对数据库造成了巨大的压力。</p><p><strong>永不过期</strong>（不推荐）：设置热点数据永不过期或者过期时间比较长。</p><p><strong>提前预热</strong>（推荐）：针对热点数据提前预热，将其存入缓存中并设置合理的过期时间比如秒杀场景下的数据在秒杀结束之前不过期。</p><p><strong>加锁</strong>（看情况）：在缓存失效后，通过设置互斥锁确保只有一个请求去查询数据库并更新缓存。</p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>缓存穿透说简单点就是大量请求的 key 是不合理的，<strong>根本不存在于缓存中，也不存在于数据库中</strong> 。这就导致这些请求直接到了数据库上，根本没有经过缓存这一层，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。</p><p>解决方法如下</p><p><strong>缓存无效 key</strong></p><p>如果缓存和数据库都查不到某个 key 的数据就写一个到 Redis 中去并设置过期时间，具体命令如下：<code>SET key value EX 10086</code> 。这种方式可以解决请求的 key 变化不频繁的情况，如果黑客恶意攻击，每次构建不同的请求 key，会导致 Redis 中缓存大量无效的 key 。很明显，这种方案并不能从根本上解决此问题。如果非要用这种方式来解决穿透问题的话，尽量将无效的 key 的过期时间设置短一点比如 1 分钟。</p><p><strong>布隆过滤器</strong></p><p>布隆过滤器是一个非常神奇的数据结构，通过它我们可以非常方便地判断一个给定数据是否存在于海量数据中。我们可以把它看作由二进制向量（或者说位数组）和一系列随机映射函数（哈希函数）两部分组成的数据结构。相比于我们平时常用的 List、Map、Set 等数据结构，它占用空间更少并且效率更高，但是缺点是其返回的结果是概率性的，而不是非常准确的。</p><p>具体是这样做的：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走下面的流程。</p><p><strong>接口限流</strong></p><p>根据用户或者 IP 对接口进行限流，对于异常频繁的访问行为，还可以采取黑名单机制，例如将异常 IP 列入黑名单。</p><p>后面提到的缓存击穿和雪崩都可以配合接口限流来解决，毕竟这些问题的关键都是有很多请求落到了数据库上造成数据库压力过大。</p><h3 id="缓存穿透和缓存击穿有什么区别"><a href="#缓存穿透和缓存击穿有什么区别" class="headerlink" title="缓存穿透和缓存击穿有什么区别"></a>缓存穿透和缓存击穿有什么区别</h3><p>缓存穿透中，请求的 key 既不存在于缓存中，也不存在于数据库中。</p><p>缓存击穿中，请求的 key 对应的是 <strong>热点数据</strong> ，该数据 <strong>存在于数据库中，但不存在于缓存中（通常是因为缓存中的那份数据已经过期）</strong> </p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p><strong>缓存在同一时间大面积的失效，导致大量的请求都直接落到了数据库上，对数据库造成了巨大的压力。</strong> 这就好比雪崩一样，摧枯拉朽之势，数据库的压力可想而知，可能直接就被这么多请求弄宕机了。</p><p><strong>有哪些解决办法</strong>？</p><p><strong>针对 Redis 服务不可用的情况：</strong></p><ol><li><strong>Redis 集群</strong>：采用 Redis 集群，避免单机出现问题整个缓存服务都没办法使用。Redis Cluster 和 Redis Sentinel 是两种最常用的 Redis 集群实现方案，详细介绍可以参考：<a href="https://javaguide.cn/database/redis/redis-cluster.html">Redis 集群详解(付费)open in new window</a>。</li><li><strong>多级缓存</strong>：设置多级缓存，例如本地缓存+Redis 缓存的二级缓存组合，当 Redis 缓存出现问题时，还可以从本地缓存中获取到部分数据。</li></ol><p><strong>针对大量缓存同时失效的情况：</strong></p><ol><li><strong>设置随机失效时间</strong>（可选）：为缓存设置随机的失效时间，例如在固定过期时间的基础上加上一个随机值，这样可以避免大量缓存同时到期，从而减少缓存雪崩的风险。</li><li><strong>提前预热</strong>（推荐）：针对热点数据提前预热，将其存入缓存中并设置合理的过期时间比如秒杀场景下的数据在秒杀结束之前不过期。</li><li><strong>持久缓存策略</strong>（看情况）：虽然一般不推荐设置缓存永不过期，但对于某些关键性和变化不频繁的数据，可以考虑这种策略。</li></ol><h2 id="聚簇索引与非聚簇索引"><a href="#聚簇索引与非聚簇索引" class="headerlink" title="聚簇索引与非聚簇索引"></a>聚簇索引与非聚簇索引</h2><p>聚簇索引（Clustered Index）即索引结构和数据一起存放的索引，并不是一种单独的索引类型。InnoDB 中的主键索引就属于聚簇索引。</p><p>在 MySQL 中，InnoDB 引擎的表的 <code>.ibd</code>文件就包含了该表的索引和数据，对于 InnoDB 引擎表来说，该表的索引(B+树)的每个非叶子节点存储索引，叶子节点存储索引和索引对应的数据。</p><p><strong>优点</strong>：</p><ul><li><strong>查询速度非常快</strong>：聚簇索引的查询速度非常的快，因为整个 B+树本身就是一颗多叉平衡树，叶子节点也都是有序的，定位到索引的节点，就相当于定位到了数据。相比于非聚簇索引， 聚簇索引少了一次读取数据的 IO 操作。</li><li><strong>对排序查找和范围查找优化</strong>：聚簇索引对于主键的排序查找和范围查找速度非常快。</li></ul><p><strong>缺点</strong>：</p><ul><li><strong>依赖于有序的数据</strong>：因为 B+树是多路平衡树，如果索引的数据不是有序的，那么就需要在插入时排序，如果数据是整型还好，否则类似于字符串或 UUID 这种又长又难比较的数据，插入或查找的速度肯定比较慢。</li><li><strong>更新代价大</strong>：如果对索引列的数据被修改时，那么对应的索引也将会被修改，而且聚簇索引的叶子节点还存放着数据，修改代价肯定是较大的，所以对于主键索引来说，主键一般都是不可被修改的。</li></ul><p>非聚簇索引(Non-Clustered Index)即索引结构和数据分开存放的索引，并不是一种单独的索引类型。二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。</p><p>非聚簇索引的叶子节点并不一定存放数据的指针，因为二级索引的叶子节点就存放的是主键，根据主键再回表查数据。</p><p><strong>优点</strong>：</p><p>更新代价比聚簇索引要小 。非聚簇索引的更新代价就没有聚簇索引那么大了，非聚簇索引的叶子节点是不存放数据的。</p><p><strong>缺点</strong>：</p><ul><li><strong>依赖于有序的数据</strong>:跟聚簇索引一样，非聚簇索引也依赖于有序的数据</li><li><strong>可能会二次查询(回表)</strong>:这应该是非聚簇索引最大的缺点了。 当查到索引对应的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询。</li></ul><p><strong>非聚簇索引不一定回表查询。</strong></p><p>用户准备使用 SQL 查询用户名，而用户名字段正好建立了索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> name<span class="operator">=</span><span class="string">&#x27;guang19&#x27;</span>;</span><br></pre></td></tr></table></figure><p>那么这个索引的 key 本身就是 name，查到对应的 name 直接返回就行了，无需回表查询。</p><h2 id="什么是回表"><a href="#什么是回表" class="headerlink" title="什么是回表"></a>什么是回表</h2><p>它描述了在使用非聚簇索引（或辅助索引）进行查询时，需要再通过主键索引（或聚簇索引）去获取完整的行数据的过程。</p><h2 id="redis键过长会有什么影响？"><a href="#redis键过长会有什么影响？" class="headerlink" title="redis键过长会有什么影响？"></a>redis键过长会有什么影响？</h2><p>懵了一下，故意刁难人吧，哪个正常人会把key弄得很长？</p><ol><li><p>内存占用增加</p></li><li><p>网络带宽消耗增加</p></li><li><p>查询性能下降。在 Redis 中，键的比较是通过逐字节比较的方式进行的，因此键越长，比较操作的时间就越长。在高并发和大量键的情况下，这种额外的比较时间会影响查询性能。</p></li><li><p>持久化和数据加载时间增加</p></li><li><p>键空间效率低。Redis 使用的是字典数据结构（hash table）来存储键值对，过长的键可能导致 hash 冲突的概率增加，进而影响 Redis 的哈希性能。</p></li></ol><h2 id="redis中hash结构有哪些使用场景"><a href="#redis中hash结构有哪些使用场景" class="headerlink" title="redis中hash结构有哪些使用场景"></a>redis中hash结构有哪些使用场景</h2><ol><li>存储用户信息。用户的基本信息（如用户名、邮箱、年龄等）可以通过哈希结构存储在一个键中:</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user:<span class="number">1001</span> -&gt; &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;email&quot;</span>: <span class="string">&quot;alice@example.com&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;30&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>会话管理。例如存储session。</li></ol><h2 id="SpringCloud组件有哪些"><a href="#SpringCloud组件有哪些" class="headerlink" title="SpringCloud组件有哪些"></a>SpringCloud组件有哪些</h2><ul><li>Spring Cloud Config</li><li>Spring Cloud Netflix：Spring Cloud Netflix是对Netflix开发的一套分布式服务框架的封装，包括服务的发现和注册，负载均衡、断路器、REST客户端、请求路由等。它是Spring Cloud的一部分。包括 Eureka、Ribbon、Hystrix、Zuul、Gateway。</li><li>Spring Cloud Gateway</li><li>Spring Cloud OpenFeign</li><li>Spring Cloud Sleuth： 分布式追踪工具，用于在微服务架构中跟踪请求的流转路径，支持与 Zipkin、Jaeger 等分布式追踪系统集成。</li><li>Spring Cloud Bus：用于将消息总线连接到多个分布式系统的节点，通常与 Spring Cloud Config 结合使用，实现配置的动态刷新。</li></ul><p>国内常用的SpringCloudAlibaba组件有：</p><ul><li>Nacos: 提供服务发现、配置管理、动态 DNS 和服务健康检查的功能。Nacos 是 Spring Cloud Alibaba 中的核心组件，用于替代 Spring Cloud Netflix 的 Eureka 和 Spring Cloud Config。</li><li>Sentinel: 提供流量控制、熔断降级、系统负载保护等功能。Sentinel 是一个高可用保护的流量管理工具，能够对微服务进行全面的保护。</li><li>RocketMQ: 分布式消息中间件，支持高吞吐量、低延迟和高可用的消息传递。Spring Cloud Alibaba 提供了对 RocketMQ 的集成，方便微服务之间的消息通信。</li><li>Dubbo: 高性能的 RPC 框架，支持微服务间的远程调用。Dubbo 提供了服务治理、服务监控等功能，并与 Spring Cloud 集成，实现微服务的无缝对接。</li><li>Seata: 分布式事务管理框架，支持微服务架构中的分布式事务，能够在多服务、多数据库的场景下保证事务的最终一致性。</li></ul><p>在阿里云上商用的组件还有：</p><ul><li>Alibaba Cloud OSS: 阿里云的对象存储服务，提供大规模、高可用的云存储解决方案。Spring Cloud Alibaba 提供了与 OSS 的集成，使开发者能够方便地在微服务中使用对象存储。</li><li>Alibaba Cloud SMS: 阿里云的短信服务，支持通过 API 发送短信验证码、通知等。Spring Cloud Alibaba 集成了短信服务，方便在微服务中使用短信功能。</li><li>Alibaba Cloud ACM (Application Configuration Management): 应用配置管理服务，类似于 Nacos 的配置管理功能，但更加侧重于企业级应用的配置管理。Spring Cloud Alibaba 集成了 ACM，提供了配置管理的高级功能。</li><li>Alibaba Cloud SchedulerX: 分布式任务调度平台，支持高可用、高并发的任务调度。SchedulerX 可以用于定时任务、分布式任务和调度任务的管理。</li><li>Alibaba Cloud MNS (Message Notification Service): 消息通知服务，支持大规模的异步消息通知。Spring Cloud Alibaba 提供了对 MNS 的集成，使开发者能够轻松实现消息通知功能。</li><li>Alibaba Cloud ARMS (Application Real-Time Monitoring Service): 应用实时监控服务，提供了对分布式系统的全方位监控，包括性能监控、日志分析、报警等。Spring Cloud Alibaba 集成了 ARMS，支持对微服务的实时监控。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;bin-log-redo-log-undo-log&quot;&gt;&lt;a href=&quot;#bin-log-redo-log-undo-log&quot; class=&quot;headerlink&quot; title=&quot;bin log, redo log, undo log&quot;&gt;&lt;/a&gt;bin log, 
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="随想" scheme="https://re0.top/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="面经" scheme="https://re0.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>2024面试复盘11</title>
    <link href="https://re0.top/2024/08/12/2024-08-12-replay/"/>
    <id>https://re0.top/2024/08/12/2024-08-12-replay/</id>
    <published>2024-08-12T12:00:00.000Z</published>
    <updated>2024-08-14T11:08:22.733Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一周没写复盘了。上周主要是滴滴的一面，一个小公司的一面，还有个网易的线下面试。网易那个其实都在问简历的东西，方向不是很匹配，大概是凉了。今天是小公司的二面，可能面试官觉得之前做的东西不是业务开发，所以感觉机会也小。这次把两次面试一起复盘了。</p><h1 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h1><h2 id="TCP和UDP"><a href="#TCP和UDP" class="headerlink" title="TCP和UDP"></a>TCP和UDP</h2><table><thead><tr><th>TCP</th><th>UDP</th><th></th></tr></thead><tbody><tr><td>是否面向连接</td><td>是</td><td>否</td></tr><tr><td>是否可靠</td><td>是</td><td>否</td></tr><tr><td>是否有状态</td><td>是</td><td>否</td></tr><tr><td>传输效率</td><td>较慢</td><td>较快</td></tr><tr><td>传输形式</td><td>字节流</td><td>数据报文段</td></tr><tr><td>首部开销</td><td>20 ～ 60 bytes</td><td>8 bytes</td></tr><tr><td>是否提供广播或多播服务</td><td>否</td><td>是</td></tr></tbody></table><p><strong>UDP 一般用于即时通信</strong>，比如：语音、 视频、直播等等。这些场景对传输数据的准确性要求不是特别高，比如你看视频即使少个一两帧，实际给人的感觉区别也不大。</p><p><strong>TCP 用于对传输准确性要求特别高的场景</strong>，比如文件传输、发送和接收邮件、远程登录等等。</p><h2 id="ES作用？为什么不用mysql？mysql模糊查询？"><a href="#ES作用？为什么不用mysql？mysql模糊查询？" class="headerlink" title="ES作用？为什么不用mysql？mysql模糊查询？"></a>ES作用？为什么不用mysql？mysql模糊查询？</h2><p>ElasticSearch 是一个开源的 分布式、RESTful 搜索和分析引擎，可以用来解决使用数据库进行模糊搜索时存在的性能问题，适用于所有类型的数据，包括文本、数字、地理空间、结构化和非结构化数据。</p><p>Elasticsearch 使用倒排索引来支持快速的全文搜索和复杂的查询操作。这使得 ES 能够高效地处理大量的非结构化数据（如日志）。ES 能够对多个字段进行模糊搜索、词语匹配、词干提取等复杂查询，并且性能优越。</p><p>MySQL 的主要索引结构是 B-Tree 索引，适合处理结构化数据和简单查询。但对于全文搜索、复杂查询和模糊匹配，性能较差。</p><p>虽然 MySQL 也支持全文索引（如 InnoDB 和 MyISAM 引擎），但其搜索功能和性能不如 Elasticsearch 强大，特别是在处理大量日志数据时。</p><p>mysql模糊查询有三种情况：</p><p>前缀匹配 (<code>LIKE &#39;keyword%&#39;</code>)：查找以 <code>keyword</code> 开头的记录，这种情况下如果 <code>column_name</code> 有索引，MySQL 可以有效利用索引。</p><p>后缀匹配 (<code>LIKE &#39;%keyword&#39;</code>)：查找以 <code>keyword</code> 结尾的记录，通常索引无法生效。</p><p>全匹配 (<code>LIKE &#39;%keyword%&#39;</code>)：查找包含 <code>keyword</code> 的记录，索引也通常无法生效。</p><p>对于 MySQL 的 InnoDB 或 MyISAM 引擎，如果要进行更高效的模糊查询，尤其是针对大文本数据，可以使用全文索引。全文索引适用于自然语言文本的查找，但它主要适用于针对整词的搜索，而不是部分匹配。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_table <span class="keyword">WHERE</span> <span class="keyword">MATCH</span>(column_name) AGAINST(<span class="string">&#x27;keyword&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="字典树，KMP，AC自动机"><a href="#字典树，KMP，AC自动机" class="headerlink" title="字典树，KMP，AC自动机"></a>字典树，KMP，AC自动机</h2><p>聊到mysql搜索的时候面试官突然说到这个，好久了，这里复习一下。</p><p>字典树（Trie），也称为前缀树或单词查找树，是一种用于存储字符串集的数据结构，特别适合处理字符串前缀相关的问题。字典树的结构类似于一棵多叉树，每个节点代表字符串中的一个字符，通过节点之间的链接表示字符串的前缀关系。</p><h3 id="字典树的基本特性"><a href="#字典树的基本特性" class="headerlink" title="字典树的基本特性"></a>字典树的基本特性</h3><ol><li><strong>根节点不包含字符</strong>，它仅用于表示一个空字符串。</li><li><strong>每个节点都表示一个字符</strong>，通过路径从根节点到某个节点，可以组成一个字符串。</li><li><strong>每个节点的所有子节点表示不同的字符</strong>，即所有子节点不重复。</li><li><strong>路径上的每个节点都对应一个前缀</strong>，从根节点到某个节点的路径表示一个字符串的前缀或完整字符串。</li></ol><p>假设我们有一组单词集：<code>[&quot;cat&quot;, &quot;cap&quot;, &quot;bat&quot;, &quot;bad&quot;]</code>，它的字典树可能是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">     root</span><br><span class="line">     /  \</span><br><span class="line">    c    b</span><br><span class="line">   / \   / \</span><br><span class="line">  a   a a   a</span><br><span class="line"> /   /   \   \</span><br><span class="line">t   p     d   t</span><br></pre></td></tr></table></figure><h3 id="字典树的优缺点"><a href="#字典树的优缺点" class="headerlink" title="字典树的优缺点"></a>字典树的优缺点</h3><ul><li><strong>优点</strong>：<ul><li><strong>高效的前缀查找</strong>：对于前缀匹配和字符串查找，字典树可以在 O(m) 时间复杂度内完成操作，其中 m 是字符串的长度。</li><li><strong>结构清晰</strong>：字典树的结构非常直观，特别适合处理字符串。</li></ul></li><li><strong>缺点</strong>：<ul><li><strong>空间消耗大</strong>：由于每个节点都需要存储多个子节点的引用，字典树的空间消耗较大，尤其在字符集较大的情况下。</li><li><strong>不适合处理变长字符串</strong>：对于非常长的字符串，字典树的深度会很大，导致操作效率下降。</li></ul></li></ul><h3 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h3><p>Knuth-Morris-Pratt 算法，用于在一个字符串中快速查找另一个字符串（即模式匹配问题）。查找单个模式的时间复杂度是 O(n)，其中 n 是主字符串的长度。</p><p><strong>KMP算法</strong>：主要用于单个模式字符串在一个主字符串中的查找，适用于模式匹配问题。</p><p><strong>字典树</strong>：用于存储和快速查询多个字符串，特别适合处理前缀查询、多模式匹配、自动补全等问题。</p><h3 id="AC自动机"><a href="#AC自动机" class="headerlink" title="AC自动机"></a>AC自动机</h3><p>AC自动机，全称 <strong>Aho-Corasick 自动机</strong>，是一种多模式字符串匹配算法。它结合了 <strong>字典树（Trie）</strong> 和 <strong>KMP算法</strong> 的思想，用于在一个文本中同时查找多个模式字符串。AC自动机在网络安全、文本检索、DNA序列分析等领域有广泛应用。</p><p>AC自动机的构建和使用分为以下几个步骤：</p><ol><li>构建字典树（Trie）把所有模式字符串插入到字典树中，构建一棵多叉树。</li><li>构建失败指针（Failure Pointer）在字典树的基础上，构建每个节点的失败指针。失败指针指向当前匹配失败时，应该转移到的下一个状态（即节点）。如果某个状态下的字符匹配失败，则通过失败指针跳转到另一个状态继续匹配，直到匹配成功或回到根节点。</li><li>匹配过程。在文本中进行匹配时，从根节点开始，逐个字符遍历文本。如果当前字符匹配成功，则进入下一个状态。如果匹配失败，则通过失败指针进行状态转移，继续匹配。</li></ol><p>说实话这次面试官是个算法工程师，所以对算法比较在行。说实话我对算法不是很熟悉。</p><h2 id="HTTP和RPC"><a href="#HTTP和RPC" class="headerlink" title="HTTP和RPC"></a>HTTP和RPC</h2><p>HTTP （超文本传输协议）是一种<strong>应用层协议</strong>。</p><p><strong>使用场景</strong>：</p><ul><li><strong>Web 浏览器与服务器之间的通信</strong>：加载网页、提交表单、下载文件等。</li><li><strong>RESTful API</strong>：使用 HTTP 协议进行跨平台、跨语言的服务调用。</li></ul><p>RPC 是一种<strong>分布式计算协议</strong>，它使得一个程序可以像调用本地函数一样，调用位于远程服务器上的函数或过程。RPC 的目的是隐藏网络通信的细节，让开发者可以专注于业务逻辑。</p><table><thead><tr><th>特性</th><th>HTTP</th><th>RPC</th></tr></thead><tbody><tr><td><strong>层次</strong></td><td>应用层协议</td><td>分布式计算协议</td></tr><tr><td><strong>通信模型</strong></td><td>请求-响应</td><td>请求-响应（远程调用）</td></tr><tr><td><strong>数据格式</strong></td><td>通常为纯文本（如 JSON、HTML）</td><td>通常为二进制或自定义协议格式</td></tr><tr><td><strong>状态性</strong></td><td>无状态</td><td>通常有状态</td></tr><tr><td><strong>透明性</strong></td><td>明显的请求和响应分离</td><td>远程调用看起来像本地调用</td></tr><tr><td><strong>适用场景</strong></td><td>Web 开发、API 调用</td><td>微服务通信、分布式系统</td></tr></tbody></table><p>HTTP 更适合于 Web 应用和简单的 API 调用，而 RPC 更适用于复杂的分布式系统和微服务架构。</p><h2 id="redis作用"><a href="#redis作用" class="headerlink" title="redis作用"></a>redis作用</h2><p>这个不再多说了。之前复习过好几次了。</p><p>其他问题都是项目介绍，就不展开了。</p><h2 id="MongoDB用过吗？存什么数据？"><a href="#MongoDB用过吗？存什么数据？" class="headerlink" title="MongoDB用过吗？存什么数据？"></a>MongoDB用过吗？存什么数据？</h2><p>MongoDB 是一个基于 <strong>分布式文件存储</strong> 的开源 NoSQL 数据库系统，由 <strong>C++</strong> 编写的。MongoDB 提供了 <strong>面向文档</strong> 的存储方式，操作起来比较简单和容易，支持“<strong>无模式</strong>”的数据建模，可以存储比较复杂的数据类型，是一款非常流行的 <strong>文档类型数据库</strong> 。</p><h3 id="适合存储的数据类型"><a href="#适合存储的数据类型" class="headerlink" title="适合存储的数据类型"></a><strong>适合存储的数据类型</strong></h3><ul><li><strong>非结构化数据</strong>：MongoDB 使用 BSON（Binary JSON）格式来存储数据，能够处理复杂的嵌套结构和多样化的数据类型，包括文档、数组、嵌套对象等。</li><li><strong>动态模式的数据</strong>：对于数据模型经常变化的应用，MongoDB 允许文档之间的字段不一致，使得模式可以灵活调整。</li><li><strong>大规模的数据</strong>：MongoDB 支持水平扩展（sharding），能够处理大规模的数据存储需求。</li></ul><p>例如存储和管理不同类型的内容（如文章、评论、用户信息）以及内容的元数据。</p><p><strong>灵活的数据模型</strong>：不同的内容可能有不同的字段和结构，如文章有标题、正文、作者等字段，评论有评论者、内容、时间等字段。MongoDB 的文档模型允许每个内容类型有不同的结构。</p><p><strong>嵌套文档</strong>：可以在一个文档中嵌套评论，避免了复杂的联接操作。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;article_123&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Introduction to MongoDB&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;MongoDB is a NoSQL database...&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;comments&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;user&quot;</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;Great article!&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;date&quot;</span>: <span class="string">&quot;2024-08-10&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;user&quot;</span>: <span class="string">&quot;Bob&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;Very informative.&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;date&quot;</span>: <span class="string">&quot;2024-08-11&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又比如存储和处理来自大量设备的数据，如传感器数据、设备状态和日志。</p><p><strong>高吞吐量和可扩展性</strong>：支持大规模数据写入，适合物联网场景中的实时数据采集。</p><p><strong>时间序列数据</strong>：能够处理时间序列数据，支持高效的插入和查询操作。</p><h2 id="mysql数据结构"><a href="#mysql数据结构" class="headerlink" title="mysql数据结构"></a>mysql数据结构</h2><p>BTree 索引：MySQL 里默认和最常用的索引类型。只有叶子节点存储 value，非叶子节点只有指针和 key。存储引擎 MyISAM 和 InnoDB 实现 BTree 索引都是使用 B+Tree，但二者实现方式不一样（前面已经介绍了）。</p><p>哈希索引：类似键值对的形式，一次即可定位。</p><p>RTree 索引：一般不会使用，仅支持 geometry 数据类型，优势在于范围查找，效率较低，通常使用搜索引擎如 ElasticSearch 代替。</p><p>全文索引：对文本的内容进行分词，进行搜索。目前只有 <code>CHAR</code>、<code>VARCHAR</code> ，<code>TEXT</code> 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。</p><h3 id="B-树-amp-B-树两者有何异同呢？"><a href="#B-树-amp-B-树两者有何异同呢？" class="headerlink" title="B 树&amp; B+树两者有何异同呢？"></a><strong>B 树&amp; B+树两者有何异同呢？</strong></h3><ul><li>B 树的所有节点既存放键(key) 也存放数据(data)，而 B+树只有叶子节点存放 key 和 data，其他内节点只存放 key。</li><li>B 树的叶子节点都是独立的;B+树的叶子节点有一条引用链指向与它相邻的叶子节点。</li><li>B 树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而 B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。</li><li>在 B 树中进行范围查询时，首先找到要查找的下限，然后对 B 树进行中序遍历，直到找到查找的上限；而 B+树的范围查询，只需要对链表进行遍历即可。</li></ul><p>B+树与 B 树相比，具备更少的 IO 次数、更稳定的查询效率和更适于范围查询这些优势。</p><h3 id="B-树为什么快"><a href="#B-树为什么快" class="headerlink" title="B+树为什么快"></a>B+树为什么快</h3><ol><li><strong>树的高度较低</strong>。B+树是一种自平衡的多路查找树，所有的叶子节点都在同一层。这意味着从根节点到任一叶子节点的路径长度（即树的高度）是相同的。</li><li><strong>顺序存储叶子节点</strong>。B+树的所有数据都存储在叶子节点中，且所有叶子节点通过指针连接在一起形成一个有序链表。当需要进行范围查询（如查找某个区间内的所有数据）时，B+树可以从找到的起始叶子节点开始，顺序扫描后续的叶子节点，大大提高了查询效率。</li><li><strong>分裂与合并减少磁盘I/O</strong>。在B+树中，节点分裂和合并的操作次数相对较少，因为每个节点可以包含多个元素。当插入或删除元素时，不会频繁触发树的重平衡操作，这减少了磁盘I/O操作的频率。由于树的高度较低，搜索过程中的磁盘I/O次数较少，而磁盘I/O通常是数据库系统中的瓶颈，因此 B+ 树能够显著提高查找速度。</li><li><strong>所有键值在叶子节点上</strong>。在 B+ 树中，所有实际数据（键值对）都存储在叶子节点上，中间节点只存储键值用于指引搜索路径。这意味着每次查找最终都会访问到叶子节点，避免了不必要的键值访问，简化了搜索路径。</li></ol><h3 id="前缀查找与全文检索"><a href="#前缀查找与全文检索" class="headerlink" title="前缀查找与全文检索"></a>前缀查找与全文检索</h3><p><strong>前缀查找</strong>和<strong>全文检索</strong>是两种不同的查询方式。前缀查找通常是基于<strong>B+树索引</strong>（如 BTREE 索引）的查询方式，通过匹配字符串的前缀来进行快速定位。例如，<code>WHERE column LIKE &#39;abc%&#39;</code> 这样的查询就是典型的前缀查找。</p><p>全文检索（Full-Text Search）是一种基于全文索引的查询方式，专门用于查找大文本中的关键词。MySQL 提供的 FULLTEXT 索引可以支持自然语言模式和布尔模式下的全文检索。</p><p>前缀查找通常比全文检索快，因为它只需在索引中定位前缀即可，而全文检索需要更复杂的计算和匹配操作。不过，这也取决于数据的规模和具体的查询条件。</p><p>全文检索更灵活，可以查找文本中的任意位置，而前缀查找只能匹配字符串的开头部分。</p><p>如果你只需要匹配字符串的前缀（如用户名查找），前缀查找更合适且更快；但如果你需要在大文本中查找关键词（如文章搜索），全文检索则更适合，尽管速度可能略慢。</p><h2 id="mysql调优"><a href="#mysql调优" class="headerlink" title="mysql调优"></a>mysql调优</h2><p>这个其实需要具体问题具体分析，前面也有一些复盘提过这个。</p><h2 id="Redis线程模型"><a href="#Redis线程模型" class="headerlink" title="Redis线程模型"></a>Redis线程模型</h2><p>对于读写命令来说，Redis 一直是单线程模型。不过，在 Redis 4.0 版本之后引入了多线程来执行一些大键值对的异步删除操作， Redis 6.0 版本之后引入了多线程来处理网络请求（提高网络 IO 读写性能）。</p><p><strong>Redis 基于 Reactor 模式设计开发了一套高效的事件处理模型</strong> （Netty 的线程模型也基于 Reactor 模式，Reactor 模式不愧是高性能 IO 的基石），这套事件处理模型对应的是 Redis 中的文件事件处理器（file event handler）。由于文件事件处理器（file event handler）是单线程方式运行的，所以我们一般都说 Redis 是单线程模型。</p><p><strong>既然是单线程，那怎么监听大量的客户端连接呢？</strong></p><p>Redis 通过 <strong>IO 多路复用程序</strong> 来监听来自客户端的大量连接（或者说是监听多个 socket），它会将感兴趣的事件及类型（读、写）注册到内核中并监听每个事件是否发生。</p><p>这样的好处非常明显：<strong>I/O 多路复用技术的使用让 Redis 不需要额外创建多余的线程来监听客户端的大量连接，降低了资源的消耗</strong>（和 NIO 中的 <code>Selector</code> 组件很像）。</p><p>虽然说 Redis 是单线程模型，但实际上，<strong>Redis 在 4.0 之后的版本中就已经加入了对多线程的支持。</strong></p><p>不过，Redis 4.0 增加的多线程主要是针对一些大键值对的删除操作的命令，使用这些命令就会使用主线程之外的其他线程来“异步处理”，从而减少对主线程的影响。</p><p>为此，Redis 4.0 之后新增了几个异步命令：</p><ul><li><code>UNLINK</code>：可以看作是 <code>DEL</code> 命令的异步版本。</li><li><code>FLUSHALL ASYNC</code>：用于清空所有数据库的所有键，不限于当前 <code>SELECT</code> 的数据库。</li><li><code>FLUSHDB ASYNC</code>：用于清空当前 <code>SELECT</code> 数据库中的所有键。</li></ul><p><strong>Redis6.0 引入多线程主要是为了提高网络 IO 读写性能</strong>，因为这个算是 Redis 中的一个性能瓶颈（Redis 的瓶颈主要受限于内存和网络）。</p><p>虽然，Redis6.0 引入了多线程，但是 Redis 的多线程只是在网络数据的读写这类耗时操作上使用了，执行命令仍然是单线程顺序执行。</p><h2 id="Redis如何做主从同步"><a href="#Redis如何做主从同步" class="headerlink" title="Redis如何做主从同步"></a>Redis如何做主从同步</h2><ol><li>当从节点启动并配置为从主节点复制数据时，从节点会向主节点发送 <code>PSYNC</code> 命令，表示希望与主节点同步。</li><li>如果从节点是第一次与主节点同步，主节点会执行全量同步。如果从节点曾经同步过，但与主节点的连接中断了一段时间，主节点会尝试进行增量同步（如果从节点的复制偏移量与主节点匹配）。</li><li>主节点生成当前内存数据的快照（RDB 文件），并将该快照发送给从节点。从节点接收快照文件并将其加载到内存中，完成数据同步。在快照传输的同时，主节点会继续记录新的写操作，并在快照传输完成后将这些增量操作也发送给从节点。</li><li>当主节点判断从节点可以进行增量同步时，主节点只将从节点缺失的那部分命令发送给从节点。从节点执行这些命令，从而使自身的数据与主节点保持一致。</li><li>从节点与主节点保持长连接，主节点会实时将所有写命令传播给从节点，使得从节点的数据保持与主节点同步。</li></ol><h2 id="mq的选型"><a href="#mq的选型" class="headerlink" title="mq的选型"></a>mq的选型</h2><p>首先要明确业务需求，包括但不限于以下几点：</p><p>消息的吞吐量：预估系统每秒钟需要处理的消息数量。<br>消息的延迟要求：消息传递的实时性要求如何，是否可以容忍延迟。<br>消息持久化：是否需要消息的持久化存储，以便系统故障时能够恢复。<br>消息的顺序性：消息是否需要保证严格的顺序性。<br>消息的可靠性：是否需要确保消息不丢失、不重复。<br>可扩展性：系统未来可能需要的扩展能力。<br>与现有技术栈的兼容性：是否与现有的技术栈兼容，或者团队是否擅长使用。</p><h3 id="Apache-Kafka"><a href="#Apache-Kafka" class="headerlink" title="Apache Kafka"></a>Apache Kafka</h3><p><strong>特点</strong>：</p><ul><li>高吞吐量，支持大规模数据传输。</li><li>适合处理流式数据，如日志、事件数据的实时处理。</li><li>数据持久化存储，支持消息重放。</li><li>强大的分区机制，支持消息的水平扩展。</li><li>有时会存在消息延迟，尤其是在高吞吐场景下。</li></ul><p><strong>适用场景</strong>：</p><ul><li>实时数据处理、日志收集和分析、事件驱动架构、流处理等。</li><li>大数据相关的应用场景。</li></ul><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><p><strong>特点</strong>：</p><ul><li>支持丰富的消息路由规则（如发布/订阅、点对点、路由键）。</li><li>高可靠性，支持消息确认机制、持久化、镜像队列等。</li><li>支持复杂的消息路由和协议（如 AMQP、STOMP、MQTT）。</li><li>吞吐量较 Kafka 低，但延迟较低。</li></ul><p><strong>适用场景</strong>：</p><ul><li>金融系统、订单处理、需要复杂路由逻辑的场景。</li><li>高可靠性、高一致性要求的应用。</li></ul><h2 id="kafka如何实现负载均衡"><a href="#kafka如何实现负载均衡" class="headerlink" title="kafka如何实现负载均衡"></a>kafka如何实现负载均衡</h2><p>这个我可能理解错了，我以为说的是部署如何实现负载均衡。其实应该是使用上的消息负载均衡。</p><h3 id="主题（Topic）与分区（Partition）"><a href="#主题（Topic）与分区（Partition）" class="headerlink" title="主题（Topic）与分区（Partition）"></a><strong>主题（Topic）与分区（Partition）</strong></h3><ul><li><strong>分区的概念</strong>：Kafka 将每个主题（Topic）分成多个分区（Partition），每个分区都是一个有序的消息队列。消息会被分发到不同的分区中，每个分区只能被一个消费者组中的一个消费者消费。</li><li><strong>负载均衡的基础</strong>：分区是实现负载均衡的基本单位。Kafka 通过将消息分配到不同的分区来实现消息的分布，而消费者组内的消费者则通过消费不同的分区来实现负载均衡。</li></ul><h3 id="生产者端的负载均衡"><a href="#生产者端的负载均衡" class="headerlink" title="生产者端的负载均衡"></a><strong>生产者端的负载均衡</strong></h3><ul><li>分区选择策略：生产者在发送消息时，需要决定消息发送到哪个分区。Kafka 提供了几种分区选择策略：<ul><li><strong>轮询策略（Round-Robin）</strong>：消息被轮询地发送到每一个分区。这种方式简单而均匀。</li><li><strong>基于键的分区策略</strong>：如果消息携带了一个键，Kafka 会根据这个键的哈希值来选择分区。这样可以保证相同键的消息总是被发送到相同的分区，实现消息的有序性。</li><li><strong>自定义分区器</strong>：用户可以实现自己的分区器逻辑，控制消息如何分布到不同的分区。</li></ul></li></ul><h3 id="消费者端的负载均衡"><a href="#消费者端的负载均衡" class="headerlink" title="消费者端的负载均衡"></a><strong>消费者端的负载均衡</strong></h3><ul><li><strong>消费者组</strong>：Kafka 通过消费者组实现消费负载的自动均衡。每个消费者组由多个消费者实例组成，每个消费者实例负责消费一部分分区。<ul><li><strong>消费者组的分区分配</strong>：Kafka 会自动将分区分配给消费者组中的消费者。默认的分配策略是均匀分配（Range Assignor）或轮询分配（RoundRobin Assignor）。如果消费者的数量发生变化（如新消费者加入或消费者退出），Kafka 会重新平衡分区分配，以确保每个消费者分配到的分区数量大致相等。</li></ul></li><li><strong>再平衡（Rebalance）</strong>：当消费者组中的消费者发生变化时（如新增消费者、消费者故障退出等），Kafka 会触发再平衡操作。再平衡过程会重新分配分区，以确保新的消费者组中的每个消费者都能公平地消费分区。再平衡过程中，消费者可能会暂停消费一段时间，直到新的分配完成。</li></ul><h2 id="kafka场景题"><a href="#kafka场景题" class="headerlink" title="kafka场景题"></a>kafka场景题</h2><p>同一个topic，两个不同的消费者组，一个消费到5，第二个消费者组没有消费者，此时第二个消费者组进来一个消费者，此时应该消费什么？</p><p>没遇到过这种场景，蒙了一下，还蒙错了。不同消费者组其实是相互独立的。</p><h3 id="不同消费者组的消费行为"><a href="#不同消费者组的消费行为" class="headerlink" title="不同消费者组的消费行为"></a><strong>不同消费者组的消费行为</strong></h3><ul><li><strong>相互独立</strong>：不同的消费者组是相互独立的，每个消费者组都会消费主题中的所有消息。也就是说，Kafka 会为每个消费者组维护独立的消费偏移量（offset），每个消费者组会从自己的偏移量开始消费消息。</li><li><strong>重复消费</strong>：由于不同的消费者组独立消费消息，每个消费者组中的消费者实例都会消费主题中的全部消息。因此，同一个主题的不同消费者组会<strong>重复消费</strong>这些消息。</li></ul><p>假设有一个主题 <code>TopicA</code>，它有 2 个分区，存在两个消费者组 <code>Group1</code> 和 <code>Group2</code>，每个消费者组中各有 2 个消费者实例。</p><ul><li><strong>Group1</strong> 的两个消费者实例分别消费 <code>TopicA</code> 的两个分区中的消息。</li><li><strong>Group2</strong> 的两个消费者实例也会分别消费 <code>TopicA</code> 的两个分区中的消息。</li></ul><h2 id="算法1：topK问题"><a href="#算法1：topK问题" class="headerlink" title="算法1：topK问题"></a>算法1：topK问题</h2><p>之前写过文章。就回答了三种算法。</p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>快排时间复杂度O(nlogn)</p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>使用一个大小为 K 的最小堆来维护当前遇到的前 K 个最大元素。</p><p>时间复杂度O(N log K)。其中 <code>N</code> 是元素的总数，<code>K</code> 是需要找出的最大元素数量。</p><h3 id="快速选择法"><a href="#快速选择法" class="headerlink" title="快速选择法"></a>快速选择法</h3><p>基于快速排序的思想，使用分治法找到前 K 个元素。使用快速排序的分区（partition）方法，每次将集合划分成两部分，一部分比基准元素小，另一部分比基准元素大。判断基准元素的位置是否为第 K 大元素的位置，如果是，则前 K 个元素已经找到，否则继续递归处理相应的部分。</p><p>平均 <code>O(N)</code>，最坏 <code>O(N^2)</code>，平均情况下，快速选择法可以在线性时间内找到前 K 个元素，但在极端情况下，时间复杂度会退化为 <code>O(N^2)</code>。</p><h3 id="桶排序法"><a href="#桶排序法" class="headerlink" title="桶排序法"></a>桶排序法</h3><p>将元素分到不同的桶中，根据需要的 K 值只处理最靠近的几个桶。</p><ol><li><p>确定桶的数量和范围。</p></li><li><p>将元素分配到相应的桶中。</p></li><li><p>对包含最大元素的桶进行排序，然后找出前 K 大的元素。</p></li></ol><p><code>O(N)</code>（分配到桶的操作）+ <code>O(K log K)</code>（在目标桶中排序）。</p><h2 id="算法2：两个栈实现队列"><a href="#算法2：两个栈实现队列" class="headerlink" title="算法2：两个栈实现队列"></a>算法2：两个栈实现队列</h2><p><strong>主要思路</strong>：</p><ul><li>将元素推入栈 <code>stack1</code> 中；</li><li>当需要出队列时，如果 <code>stack2</code> 为空，就将 <code>stack1</code> 中的所有元素逐个弹出，并推入 <code>stack2</code>，这样 <code>stack2</code> 中的元素顺序就是先进先出的顺序；</li><li>从 <code>stack2</code> 中弹出的元素就是队列的出队元素。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stack1;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stack2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stack1 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack2 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 入队操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        stack1.push(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出队操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stack2.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack1.isEmpty()) &#123;</span><br><span class="line">                stack2.push(stack1.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack2.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取队列头部元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stack2.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack1.isEmpty()) &#123;</span><br><span class="line">                stack2.push(stack1.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack2.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断队列是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack1.isEmpty() &amp;&amp; stack2.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>面试的时候查了一下，结果又被csdn坑了，说要有一个额外变量记录最后一个元素。其实不需要的。</p><h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>说实话，有点麻木了。今天面试感觉也一般。不知道路在何方，感觉做的东西太小众了，然后会的东西太杂。导致其实很多东西没那么专精，但咋说呢，我觉得我应该还算可以吧。但就是没有啥收获。也许我该把项目经历改改。</p><p>就挺离谱的。环境好像真的一般般，都在内卷，面试候选人贼多，要选上也挺难的。</p><p>然后现在是越来越没动力了，一座在电脑前打开文档就犯困。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一周没写复盘了。上周主要是滴滴的一面，一个小公司的一面，还有个网易的线下面试。网易那个其实都在问简历的东西，方向不是很匹配，大概是凉了。今天
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="随想" scheme="https://re0.top/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="面经" scheme="https://re0.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>2024面试复盘10</title>
    <link href="https://re0.top/2024/08/05/2024-08-05-replay/"/>
    <id>https://re0.top/2024/08/05/2024-08-05-replay/</id>
    <published>2024-08-05T12:00:00.000Z</published>
    <updated>2024-08-05T14:42:21.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>滴滴面试，面试官人很亲切。除了netty相关，其他都回答的七七八八，奈何人家就是用netty去做业务的，估计也是凉凉。</p><h1 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h1><h2 id="分布式锁场景-怎么实现"><a href="#分布式锁场景-怎么实现" class="headerlink" title="分布式锁场景?怎么实现"></a>分布式锁场景?怎么实现</h2><p>复盘过好多次了，就是redis去实现。</p><p>场景：</p><p>分布式锁是一种用于在分布式系统中协调对共享资源访问的技术，确保在多个节点同时访问某一资源时不会出现竞争和数据不一致问题。</p><p><strong>分布式缓存一致性</strong>：当多个应用实例需要更新同一个缓存数据时，使用分布式锁可以确保只有一个实例可以进行更新操作，避免缓存不一致问题。</p><p><strong>任务调度</strong>：在分布式任务调度系统中，为了防止同一个任务被多个节点重复执行，可以使用分布式锁来确保任务只会被一个节点执行。</p><p><strong>限流控制</strong>：在高并发系统中，使用分布式锁可以限制同时处理的请求数量，避免系统过载。</p><p><strong>分布式事务</strong>：在分布式事务中，使用分布式锁可以确保多个节点在执行跨数据库或跨服务的事务时，能够按照预期的顺序进行，避免数据不一致。</p><p><strong>资源协调</strong>：在分布式系统中，多个节点可能需要访问共享资源（如文件、数据库记录等）。使用分布式锁可以确保每次只有一个节点能访问这些资源，避免竞争条件。</p><h2 id="锁的自动续期"><a href="#锁的自动续期" class="headerlink" title="锁的自动续期"></a>锁的自动续期</h2><p>watchdog大部分回答出来了，后续再复习下。</p><h2 id="redisson中如何解决主从同步问题"><a href="#redisson中如何解决主从同步问题" class="headerlink" title="redisson中如何解决主从同步问题"></a>redisson中如何解决主从同步问题</h2><p>在使用 Redisson 实现分布式锁时，如果 Redis 处于主从模式（master-slave replication），可能会遇到主从同步问题。主从同步问题主要体现在以下几个方面：</p><ol><li><strong>主节点崩溃和故障转移</strong>：当主节点崩溃时，从节点会接管成为新的主节点。在这个过程中，可能会出现锁状态丢失或不一致的问题。</li><li><strong>数据复制延迟</strong>：主节点和从节点之间的数据复制存在延迟，在这种情况下，从节点上的锁状态可能会滞后，导致数据不一致。</li></ol><h3 id="redLock"><a href="#redLock" class="headerlink" title="redLock"></a>redLock</h3><p>其实就是类似 redLock，通过将所有节点视为主节点。</p><blockquote><p>Redlock 需要部署 N （N &gt;= 2n+1）个独立的 Redis 实例，且实例之间没有任何的联系。也就是说，只要一半以上的 Redis 实例加锁成功，那么 Redlock 依然可以正常运行。</p><p>使用独立实例是为了避免 Redis 异步复制导致锁丢失。</p></blockquote><p>Redlock 加锁失败有两种情况：</p><ul><li>加锁成功的实例数量未超过半数。</li><li>加锁过程花费时间超过锁的有效时间。</li></ul><h3 id="强制主节点读取锁"><a href="#强制主节点读取锁" class="headerlink" title="强制主节点读取锁"></a>强制主节点读取锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config.useMasterSlaveServers()</span><br><span class="line">      .setMasterAddress(<span class="string">&quot;redis://127.0.0.1:6379&quot;</span>)</span><br><span class="line">      .addSlaveAddress(<span class="string">&quot;redis://127.0.0.1:6380&quot;</span>, <span class="string">&quot;redis://127.0.0.1:6381&quot;</span>)</span><br><span class="line">      .setReadMode(ReadMode.MASTER);</span><br></pre></td></tr></table></figure><h2 id="其他方式实现分布式锁"><a href="#其他方式实现分布式锁" class="headerlink" title="其他方式实现分布式锁"></a>其他方式实现分布式锁</h2><p>除了数据库方式还有其他方式？</p><p>基于Zookeeper：</p><ol><li><p>在zookeeper中创建一个锁节点</p></li><li><p>检查在锁节点的兄弟节点中是否自己创建的节点是最小的。如果是，说明获取到了锁；否则，监听前一个节点的删除事件。</p></li><li><p>删除自己创建的锁节点，释放锁。</p></li></ol><p>基于etcd:</p><ol><li>在 etcd 中创建一个带有租约的键，作为锁的标识。</li><li>通过原子操作（如 <code>PUT</code> 请求）确保只有一个客户端能够创建该键。</li><li>保持租约的有效性，避免锁过期。</li><li>删除创建的键，释放锁。</li></ol><p>当然这两种方式比较少用。</p><h2 id="布隆过滤器？实现？设计的hash值和函数有什么要求？"><a href="#布隆过滤器？实现？设计的hash值和函数有什么要求？" class="headerlink" title="布隆过滤器？实现？设计的hash值和函数有什么要求？"></a>布隆过滤器？实现？设计的hash值和函数有什么要求？</h2><p>布隆过滤器（Bloom Filter）是一种高效的概率数据结构，用于判断一个元素是否存在于一个集合中。它有很高的空间效率和查询效率，但有一定的误判率，即可能会误认为某个不在集合中的元素存在于集合中。布隆过滤器不存储实际的元素，只存储元素的哈希值。</p><p>布隆过滤器的基本原理</p><ol><li><strong>初始化</strong>：创建一个位数组，初始时所有位都设为0。</li><li><strong>添加元素</strong>：使用k个不同的哈希函数将元素映射到位数组的k个位置上，并将这些位置的值设为1。</li><li><strong>查询元素</strong>：使用同样的k个哈希函数将查询元素映射到位数组的k个位置上。如果所有这些位置上的值都是1，则认为该元素可能在集合中；如果有任意一个位置上的值为0，则可以确定该元素不在集合中。</li></ol><p><strong>优点</strong>：</p><ul><li>空间效率高：相比于直接存储元素集合，布隆过滤器使用的空间要少得多。</li><li>插入和查询速度快：时间复杂度为O(k)，k是哈希函数的数量。</li></ul><p><strong>缺点</strong>：</p><ul><li>存在误判率：查询结果为“存在”时，可能是误判，但查询结果为“不存在”时一定是准确的。</li><li>无法删除元素：标准布隆过滤器不支持删除操作，删除元素可能会影响其他元素的存在判断。</li></ul><p>下面实现代码是GPT写的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.BitSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BloomFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BitSet bitSet;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] hashSeeds;</span><br><span class="line">    <span class="keyword">private</span> Random random;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BloomFilter</span><span class="params">(<span class="keyword">int</span> bitSetSize, <span class="keyword">int</span> hashCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = bitSetSize;</span><br><span class="line">        <span class="keyword">this</span>.bitSet = <span class="keyword">new</span> BitSet(size);</span><br><span class="line">        <span class="keyword">this</span>.hashSeeds = <span class="keyword">new</span> <span class="keyword">int</span>[hashCount];</span><br><span class="line">        <span class="keyword">this</span>.random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize hash seeds with random values</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hashCount; i++) &#123;</span><br><span class="line">            hashSeeds[i] = random.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Simple hash function</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(String value, <span class="keyword">int</span> seed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : value.toCharArray()) &#123;</span><br><span class="line">            result = result * seed + c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (size - <span class="number">1</span>) &amp; result; <span class="comment">// Modulo size to ensure it is within the range</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add an element to the Bloom filter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> seed : hashSeeds) &#123;</span><br><span class="line">            <span class="keyword">int</span> hash = hash(value, seed);</span><br><span class="line">            bitSet.set(hash);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check if an element might be in the Bloom filter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">mightContain</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> seed : hashSeeds) &#123;</span><br><span class="line">            <span class="keyword">int</span> hash = hash(value, seed);</span><br><span class="line">            <span class="keyword">if</span> (!bitSet.get(hash)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BloomFilter bloomFilter = <span class="keyword">new</span> BloomFilter(<span class="number">1024</span>, <span class="number">3</span>);</span><br><span class="line">        bloomFilter.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        bloomFilter.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(bloomFilter.mightContain(<span class="string">&quot;hello&quot;</span>)); <span class="comment">// True</span></span><br><span class="line">        System.out.println(bloomFilter.mightContain(<span class="string">&quot;world&quot;</span>)); <span class="comment">// True</span></span><br><span class="line">        System.out.println(bloomFilter.mightContain(<span class="string">&quot;bloom&quot;</span>)); <span class="comment">// False</span></span><br><span class="line">        System.out.println(bloomFilter.mightContain(<span class="string">&quot;filter&quot;</span>)); <span class="comment">// False</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Netty线程模型"><a href="#Netty线程模型" class="headerlink" title="Netty线程模型"></a>Netty线程模型</h2><p>Netty 基于 NIO （NIO 是一种同步非阻塞的 I/O 模型，在 Java 1.4 中引入了 NIO），使用 Netty 可以极大地简化 TCP 和 UDP 套接字服务器等网络编程，并且性能以及安全性等很多方面都非常优秀。</p><p>NIO 是一种同步非阻塞的 I/O 模型，于 Java 1.4 中引入，对应 java.nio包，提供了 Channel , Selector，Buffer 等抽象。NIO 中的 N 可以理解为 Non-blocking，不单纯是 New。它支持面向缓冲的，基于通道的 I/O 操作方法。 NIO 提供了与传统 BIO 模型中的 Socket 和 ServerSocket 相对应的 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发</p><p>netty不用 NIO 主要是因为 NIO 的编程模型复杂而且存在一些 BUG，并且对编程功底要求比较高。而且，NIO 在面对断连重连、包丢失、粘包等问题时处理过程非常复杂。Netty 的出现正是为了解决这些问题，更多关于 Netty 的特点可以看下面的内容。</p><p><strong>Reactor 是一种经典的线程模型，Reactor 模式基于事件驱动，特别适合处理海量的 I/O 事件。</strong></p><h3 id="单线程-Reactor"><a href="#单线程-Reactor" class="headerlink" title="单线程 Reactor"></a>单线程 Reactor</h3><p>所有的 IO 操作都由同一个 NIO 线程处理。</p><p><strong>单线程 Reactor 的优点是对系统资源消耗特别小，但是，没办法支撑大量请求的应用场景并且处理请求的时间可能非常慢</strong>。</p><h3 id="多线程-Reactor"><a href="#多线程-Reactor" class="headerlink" title="多线程 Reactor"></a>多线程 Reactor</h3><p>一个线程负责接受请求,一组 NIO 线程处理 IO 操作。</p><p>大部分场景下多线程 Reactor 模型是没有问题的，但是在一些并发连接数比较多（如百万并发）的场景下，一个线程负责接受客户端请求就存在性能问题了。</p><p>为了解决这些问题，演进出了主从多线程 Reactor 模型。</p><h3 id="主从多线程-Reactor"><a href="#主从多线程-Reactor" class="headerlink" title="主从多线程 Reactor"></a>主从多线程 Reactor</h3><p>一组 NIO 线程负责接受请求，一组 NIO 线程处理 IO 操作。</p><p>在 Netty 主要靠 <code>NioEventLoopGroup</code> 线程池来实现具体的线程模型的 。</p><p>我们实现服务端的时候，一般会初始化两个线程组：</p><ol><li>bossGroup :接收连接。</li><li>workerGroup ：负责具体的处理，交由对应的 Handler 处理。</li></ol><p>从一个 主线程 NIO 线程池中选择一个线程作为 Acceptor 线程，绑定监听端口，接收客户端连接的连接，其他线程负责后续的接入认证等工作。连接建立完成后，Sub NIO 线程池负责具体处理 I/O 读写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.bossGroup 用于接收连接，workerGroup 用于具体的处理</span></span><br><span class="line">EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//2.创建服务端启动引导/辅助类：ServerBootstrap</span></span><br><span class="line">    ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">    <span class="comment">//3.给引导类配置两大线程组,确定了线程模型</span></span><br><span class="line">    b.group(bossGroup, workerGroup)</span><br><span class="line">            <span class="comment">// (非必备)打印日志</span></span><br><span class="line">            .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</span><br><span class="line">            <span class="comment">// 4.指定 IO 模型</span></span><br><span class="line">            .channel(NioServerSocketChannel.class)</span><br><span class="line">            .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> </span>&#123;</span><br><span class="line">                    ChannelPipeline p = ch.pipeline();</span><br><span class="line">                    <span class="comment">//5.可以自定义客户端消息的业务处理逻辑</span></span><br><span class="line">                    p.addLast(<span class="keyword">new</span> HelloServerHandler());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    <span class="comment">// 6.绑定端口,调用 sync 方法阻塞知道绑定完成</span></span><br><span class="line">    ChannelFuture f = b.bind(port).sync();</span><br><span class="line">    <span class="comment">// 7.阻塞等待直到服务器Channel关闭(closeFuture()方法获取Channel 的CloseFuture对象,然后调用sync()方法)</span></span><br><span class="line">    f.channel().closeFuture().sync();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//8.优雅关闭相关线程组资源</span></span><br><span class="line">    bossGroup.shutdownGracefully();</span><br><span class="line">    workerGroup.shutdownGracefully();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体流程如下：</p><p>1、首先你创建了两个 NioEventLoopGroup 对象实例：bossGroup 和 workerGroup。</p><ul><li>bossGroup : 用于处理客户端的 TCP 连接请求。</li><li>workerGroup ： 负责每一条连接的具体读写数据的处理逻辑，真正负责 I/O 读写操作，交由对应的 Handler 处理。</li></ul><p>这里要注意使用 NioEventLoopGroup 类的无参构造函数设置线程数量的默认值就是 CPU 核心数 *2 。</p><p>2、接下来 我们创建了一个服务端启动引导/辅助类： ServerBootstrap，这个类将引导我们进行服务端的启动工作。</p><p>3、通过 group() 方法给引导类 ServerBootstrap 配置两大线程组，确定了线程模型。</p><p>4、通过channel()方法给引导类 ServerBootstrap指定了 IO 模型为NIO</p><ul><li>NioServerSocketChannel ：指定服务端的 IO 模型为 NIO，与 BIO 编程模型中的ServerSocket对应 </li><li>NioSocketChannel : 指定客户端的 IO 模型为 NIO， 与 BIO 编程模型中的Socket对应 </li></ul><p>5、通过 childHandler()方法给引导类创建一个ChannelInitializer ，然后指定了服务端消息的业务处理逻辑 HelloServerHandler 对象。</p><p>6、调用 ServerBootstrap 类的 bind()方法绑定端口。</p><h3 id="TCP-粘包-拆包"><a href="#TCP-粘包-拆包" class="headerlink" title="TCP 粘包/拆包"></a>TCP 粘包/拆包</h3><p>1.使用 Netty 自带的解码器</p><ul><li>LineBasedFrameDecoder : 发送端发送数据包的时候，每个数据包之间以换行符作为分隔，LineBasedFrameDecoder 的工作原理是它依次遍历 ByteBuf 中的可读字节，判断是否有换行符，然后进行相应的截取。</li><li>DelimiterBasedFrameDecoder : 可以自定义分隔符解码器，实际上是一种特殊的 DelimiterBasedFrameDecoder 解码器。</li><li>FixedLengthFrameDecoder: 固定长度解码器，它能够按照指定的长度对消息进行相应的拆包。如果不够指定的长度，则空格补全</li><li>LengthFieldBasedFrameDecoder：长度域解码器，它能够根据发送的数据中消息长度相关参数（比如长度域偏移量 lengthFieldOffset）来进行拆包。</li></ul><p>Netty其他知识后面再梳理下。</p><h2 id="Java锁的实现方式"><a href="#Java锁的实现方式" class="headerlink" title="Java锁的实现方式"></a>Java锁的实现方式</h2><p>一个是synchronized另一个是ReentrantLock(AQS).</p><p>还有个乐观锁(AtomicInteger).</p><p>CAS 是一种原子操作，用于确保在多线程环境中，某个值在更新时不会被其他线程修改。Java的 <code>java.util.concurrent.atomic</code> 包提供了一些基于 CAS 的类，这些类实现了乐观锁机制。</p><p>例如<code>AtomicInteger</code>, <code>AtomicReference</code>, <code>AtomicStampedReference</code></p><ul><li><p><code>AtomicInteger</code>就不说了。</p></li><li><p><code>AtomicReference</code> 是用于原子操作引用类型的类。它允许原子地更新对象引用，适用于需要保证对象的线程安全的场景。例如<code>AtomicReference&lt;String&gt; reference = new AtomicReference&lt;&gt;(&quot;Initial&quot;);</code></p></li><li><p><code>AtomicStampedReference</code> 提供了对引用类型的原子操作，并结合了一个整数戳（通常是版本号），用于解决ABA问题。这个我还没用过。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AtomicStampedReference&lt;String&gt; stampedReference =</span><br><span class="line">            <span class="keyword">new</span> AtomicStampedReference&lt;&gt;(<span class="string">&quot;Initial&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span>[] stamp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">        String oldValue = stampedReference.get(stamp);</span><br><span class="line">        stampedReference.set(newValue, stamp[<span class="number">0</span>] + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="限流了解吗"><a href="#限流了解吗" class="headerlink" title="限流了解吗"></a>限流了解吗</h2><h3 id="令牌桶算法（Token-Bucket-Algorithm）"><a href="#令牌桶算法（Token-Bucket-Algorithm）" class="headerlink" title="令牌桶算法（Token Bucket Algorithm）"></a>令牌桶算法（Token Bucket Algorithm）</h3><p>令牌桶算法使用一个“桶”来控制数据的流入速率。</p><p>桶里有令牌，令牌以固定速率生成。</p><p>每次请求需要获取一个令牌，令牌桶中的令牌数量不足时，请求会被拒绝或等待。</p><p>令牌桶算法允许突发流量，但总流量受限于桶的大小和令牌生成速率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenBucket</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Semaphore tokens;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> refillInterval;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> maxTokens;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastRefillTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TokenBucket</span><span class="params">(<span class="keyword">int</span> maxTokens, <span class="keyword">long</span> refillInterval)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxTokens = maxTokens;</span><br><span class="line">        <span class="keyword">this</span>.refillInterval = refillInterval;</span><br><span class="line">        <span class="keyword">this</span>.tokens = <span class="keyword">new</span> Semaphore(maxTokens, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.lastRefillTime = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">acquire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        refill();</span><br><span class="line">        <span class="keyword">return</span> tokens.tryAcquire();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> elapsed = now - lastRefillTime;</span><br><span class="line">        <span class="keyword">if</span> (elapsed &gt;= refillInterval) &#123;</span><br><span class="line">            <span class="keyword">int</span> newTokens = (<span class="keyword">int</span>) (elapsed / refillInterval);</span><br><span class="line">            <span class="keyword">if</span> (newTokens &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> availableTokens = Math.min(newTokens, maxTokens - tokens.availablePermits());</span><br><span class="line">                tokens.release(availableTokens);</span><br><span class="line">                lastRefillTime = now;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏桶算法（Leaky-Bucket-Algorithm）"><a href="#漏桶算法（Leaky-Bucket-Algorithm）" class="headerlink" title="漏桶算法（Leaky Bucket Algorithm）"></a>漏桶算法（Leaky Bucket Algorithm）</h3><p>漏桶算法通过一个“桶”来控制请求流量。</p><p>请求以任意速度到达桶中，但桶中的请求以固定速率“漏出”。</p><p>当桶满时，多余的请求会被丢弃。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeakyBucket</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Object&gt; bucket;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> leakRate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LeakyBucket</span><span class="params">(<span class="keyword">int</span> capacity, <span class="keyword">long</span> leakRate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bucket = <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(capacity);</span><br><span class="line">        <span class="keyword">this</span>.leakRate = leakRate;</span><br><span class="line">        startLeak();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Object item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bucket.offer(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startLeak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(leakRate);</span><br><span class="line">                    bucket.poll();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="滑动窗口算法（Sliding-Window-Algorithm）"><a href="#滑动窗口算法（Sliding-Window-Algorithm）" class="headerlink" title="滑动窗口算法（Sliding Window Algorithm）"></a>滑动窗口算法（Sliding Window Algorithm）</h3><p>滑动窗口算法维护一个时间窗口，在该窗口内控制请求数量。</p><p>当请求超出窗口内的最大允许数时，新的请求会被拒绝。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlidingWindow</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> maxRequests;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> windowSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Queue&lt;Long&gt; requests = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SlidingWindow</span><span class="params">(<span class="keyword">int</span> maxRequests, <span class="keyword">long</span> windowSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxRequests = maxRequests;</span><br><span class="line">        <span class="keyword">this</span>.windowSize = windowSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">allowRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">while</span> (!requests.isEmpty() &amp;&amp; now - requests.peek() &gt; windowSize) &#123;</span><br><span class="line">            requests.poll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (requests.size() &lt; maxRequests) &#123;</span><br><span class="line">            requests.add(now);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="固定窗口计数器（Fixed-Window-Counter）"><a href="#固定窗口计数器（Fixed-Window-Counter）" class="headerlink" title="固定窗口计数器（Fixed Window Counter）"></a>固定窗口计数器（Fixed Window Counter）</h3><p>固定窗口计数器维护一个固定时间窗口内的请求计数。</p><p>每个窗口开始时计数器被重置，新的请求会增加计数器。</p><p>当计数器超出最大允许请求数时，新的请求会被拒绝。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FixedWindowCounter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> maxRequests;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> windowSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> windowStart;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger requestCount = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FixedWindowCounter</span><span class="params">(<span class="keyword">int</span> maxRequests, <span class="keyword">long</span> windowSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxRequests = maxRequests;</span><br><span class="line">        <span class="keyword">this</span>.windowSize = windowSize;</span><br><span class="line">        <span class="keyword">this</span>.windowStart = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">allowRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">if</span> (now - windowStart &gt; windowSize) &#123;</span><br><span class="line">            windowStart = now;</span><br><span class="line">            requestCount.set(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (requestCount.incrementAndGet() &lt;= maxRequests) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="伪代码实现令牌桶-ratelimiter-？"><a href="#伪代码实现令牌桶-ratelimiter-？" class="headerlink" title="伪代码实现令牌桶(ratelimiter)？"></a>伪代码实现令牌桶(ratelimiter)？</h2><p>刚开始我回答用另一个线程或者定时任务去做。</p><p>其实实现就是基于上次获取的时间戳来做。</p><p>上面已经写了一下。</p><p>说实话，挺有意思，没想到用这种方式来考察代码。</p><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>今天是8月5号，昨天4号的时候刚好是我离职两月。说焦虑吧，其实早上起床还有晚上睡觉前挺焦虑的，随着面试逐渐增多，我开始怀疑自己，但好像认真做事的时候，比如写东西的时候或者学习的时候感觉也还好，我可能只是觉得空窗太久之后不太好找工作，又或者觉得努力了一段时间没有任何收获，急需一颗糖补充下信心？</p><p>稍微统计了一下我从6月下旬开始面试的次数，一共12家公司，16场面试，说实话，我没想到这么难，如果说刚开始是自身原因，那么后续其实都是客观因素了，有面试刷KPI的，有业务不匹配的，有薪酬不合适的。如果后面实在不行，我只能继续试试测试开发岗了，但说实话我真不想做测试开发了。再不行考虑下回家睡大觉。</p><p>今天小谢和我说毕业之后第一份工作很重要，因为除非你运气爆棚或者受到赏识，否则你后续都是以这份工作为基础，我觉得说的很对，我好像被锁死上限了。</p><p>他也一直和我交流人生，心理上的，比如人生漫漫，不以物喜，不以己悲啊之类的，我觉得说的都挺有道理的。我是一个接受能力比较开放的人，一些观点我其实都是持保留意见，我不反对也不认可，我认为一个观点只有当亲身经历过，才会明白其中的云云。我想这就是人生的意义所在吧，亲身经历与感受各种心情或事物？应该是吧。</p><p>有时候我觉得他对人生看的比我透彻，我也羡慕他的豁达。他总是和我说总有办法的，我想也是，只要活着，未来谁又说的准呢？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;滴滴面试，面试官人很亲切。除了netty相关，其他都回答的七七八八，奈何人家就是用netty去做业务的，估计也是凉凉。&lt;/p&gt;
&lt;h1 id
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="随想" scheme="https://re0.top/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="面经" scheme="https://re0.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>2024面试复盘9</title>
    <link href="https://re0.top/2024/08/02/2024-08-02-replay/"/>
    <id>https://re0.top/2024/08/02/2024-08-02-replay/</id>
    <published>2024-08-02T12:00:00.000Z</published>
    <updated>2024-08-02T13:05:28.762Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天经历了一场长时间面试，接近快两小时，晚上又经历了一场，把我干蒙了，尤其是晚上那场，一共问了三个问题，我都没答上来。寄。。。</p><h1 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h1><h2 id="JAVA代码加载执行过程"><a href="#JAVA代码加载执行过程" class="headerlink" title="JAVA代码加载执行过程"></a>JAVA代码加载执行过程</h2><p>涉及到类加载过程，根本记不住，就算文档在旁边我也答不上来。</p><p>Java代码的加载和执行过程涉及多个步骤，包括编译、类加载、链接、初始化和运行。</p><h3 id="1-编译阶段"><a href="#1-编译阶段" class="headerlink" title="1. 编译阶段"></a>1. 编译阶段</h3><p>Java源代码文件（.java）通过Java编译器（javac）编译成字节码文件（.class）。字节码是一种中间表示形式，它可以在Java虚拟机（JVM）上运行。</p><h3 id="2-类加载阶段"><a href="#2-类加载阶段" class="headerlink" title="2. 类加载阶段"></a>2. 类加载阶段</h3><p>类加载阶段是将类的字节码加载到JVM内存中的过程。类加载器（ClassLoader）负责加载类。</p><ul><li><strong>启动类加载器（Bootstrap ClassLoader）</strong>：加载核心Java类库，如<code>java.lang</code>、<code>java.util</code>等，通常从JVM的运行时环境（rt.jar）中加载。</li><li><strong>扩展类加载器（Extension ClassLoader）</strong>：加载扩展类库，通常从<code>lib/ext</code>目录中加载。</li><li><strong>应用类加载器（Application ClassLoader）</strong>：加载应用程序的类，通常从类路径（classpath）中加载。</li></ul><h3 id="3-链接阶段"><a href="#3-链接阶段" class="headerlink" title="3. 链接阶段"></a>3. 链接阶段</h3><p>链接阶段将类的字节码合并到JVM中，并为其分配内存。链接阶段包括三个子阶段：</p><ul><li><strong>验证（Verification）</strong>：确保字节码符合JVM的规范，并且没有安全问题。</li><li><strong>准备（Preparation）</strong>：为类的静态变量分配内存，并初始化为默认值。</li><li><strong>解析（Resolution）</strong>：将常量池中的符号引用替换为直接引用。</li></ul><h3 id="4-初始化阶段"><a href="#4-初始化阶段" class="headerlink" title="4. 初始化阶段"></a>4. 初始化阶段</h3><p>初始化阶段是执行类构造器方法 <code>&lt;clinit&gt;</code> 的过程。类构造器方法 <code>&lt;clinit&gt;</code> 是由编译器自动生成的，它包含类静态变量的赋值和静态代码块的执行。</p><h3 id="5-执行阶段"><a href="#5-执行阶段" class="headerlink" title="5. 执行阶段"></a>5. 执行阶段</h3><p>在执行阶段，JVM开始执行应用程序的<code>main</code>方法。整个应用程序的执行过程由JVM的执行引擎来处理。执行引擎包括以下几个部分：</p><ul><li><strong>解释器（Interpreter）</strong>：逐行解释执行字节码。</li><li><strong>即时编译器（Just-In-Time Compiler, JIT）</strong>：将热点代码（执行频繁的代码）编译成本地机器码，以提高执行效率。</li><li><strong>垃圾收集器（Garbage Collector, GC）</strong>：管理内存，回收不再使用的对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设我们有上述简单的Java代码，以下是详细的加载和执行过程</p><p><strong>编译</strong>：</p><ul><li>使用 <code>javac Main.java</code> 编译器将 <code>Main.java</code> 编译为 <code>Main.class</code> 字节码文件。</li></ul><p><strong>类加载</strong>：</p><ul><li>JVM启动时，启动类加载器首先加载核心类库。</li><li>应用类加载器加载 <code>Main</code> 类的字节码，将其放入方法区，并创建一个 <code>Class</code> 对象表示 <code>Main</code> 类。</li></ul><p><strong>链接</strong>：</p><ul><li><strong>验证</strong>：JVM验证 <code>Main.class</code> 字节码是否合法。</li><li><strong>准备</strong>：为 <code>Main</code> 类的静态变量分配内存并初始化为默认值（此例中没有静态变量）。</li><li><strong>解析</strong>：将常量池中的符号引用解析为直接引用。</li></ul><p><strong>初始化</strong>：</p><ul><li>执行 <code>Main</code> 类的静态初始化代码（如有），包括静态变量的初始化和静态代码块（此例中没有静态初始化代码）。</li></ul><p><strong>执行</strong>：</p><ul><li>JVM调用 <code>Main</code> 类的 <code>main</code> 方法。</li><li>解释器解释执行 <code>main</code> 方法的字节码，将 <code>Hello, World!</code> 打印到控制台。</li><li>JIT编译器在执行频繁的代码时将其编译为本地机器码，以提高执行效率。</li></ul><h2 id="JAVA中能否加载相同类名-自定义java-lang-String能否加载？"><a href="#JAVA中能否加载相同类名-自定义java-lang-String能否加载？" class="headerlink" title="JAVA中能否加载相同类名?自定义java.lang.String能否加载？"></a>JAVA中能否加载相同类名?自定义java.lang.String能否加载？</h2><p>在Java中，可以加载具有相同类名的类，但需要通过不同的类加载器来实现。每个类加载器都有其独立的命名空间，因此可以加载同名类而不冲突。这种机制在实现Java应用程序中的模块化、插件化和动态加载时非常有用。</p><p><strong>类加载器</strong>：负责加载类文件到JVM内存中。Java中的类加载器包括引导类加载器（Bootstrap ClassLoader）、扩展类加载器（Extension ClassLoader）和应用类加载器（Application ClassLoader）。还可以自定义类加载器。</p><p><strong>命名空间</strong>：每个类加载器都有自己的命名空间，包含其加载的所有类。不同类加载器的命名空间是独立的，这意味着两个不同类加载器可以加载同名的类而不冲突。</p><p>简单来说就是使用不同的类加载器来加载类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Load MyClass from dir1</span></span><br><span class="line">            CustomClassLoader classLoader1 = <span class="keyword">new</span> CustomClassLoader(<span class="string">&quot;bin/dir1/&quot;</span>);</span><br><span class="line">            Class&lt;?&gt; class1 = classLoader1.loadClass(<span class="string">&quot;com.example.MyClass&quot;</span>);</span><br><span class="line">            Object obj1 = class1.newInstance();</span><br><span class="line">            class1.getMethod(<span class="string">&quot;print&quot;</span>).invoke(obj1);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Load MyClass from dir2</span></span><br><span class="line">            CustomClassLoader classLoader2 = <span class="keyword">new</span> CustomClassLoader(<span class="string">&quot;bin/dir2/&quot;</span>);</span><br><span class="line">            Class&lt;?&gt; class2 = classLoader2.loadClass(<span class="string">&quot;com.example.MyClass&quot;</span>);</span><br><span class="line">            Object obj2 = class2.newInstance();</span><br><span class="line">            class2.getMethod(<span class="string">&quot;print&quot;</span>).invoke(obj2);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Java中，自定义 <code>java.lang.String</code> 类并尝试加载它是非常困难的，因为 <code>java.lang.String</code> 是由引导类加载器（Bootstrap ClassLoader）加载的核心类。引导类加载器是JVM的一部分，用于加载核心Java类库，它有最高的优先级并且不允许由其他类加载器覆盖这些核心类。</p><p><strong>引导类加载器的优先级</strong>：引导类加载器首先加载核心类库，包括 <code>java.lang.String</code>。由于它是最先被加载的类加载器，并且在JVM启动时就已经加载了核心类，其他类加载器不能覆盖或重新定义这些类。</p><p><strong>双亲委派模型</strong>：Java的类加载器遵循双亲委派模型，即当一个类加载器加载类时，它首先委派给其父类加载器。如果父类加载器已经加载了这个类，子类加载器就不会再加载它。由于 <code>java.lang.String</code> 是由引导类加载器加载的，所有其他类加载器在加载 <code>java.lang.String</code> 时都会被委派给引导类加载器，从而无法加载自定义的 <code>java.lang.String</code>。</p><p>虽然理论上可以通过一些非常规手段尝试加载自定义的 <code>java.lang.String</code> 类，但在标准JVM实现中，这样的操作通常会失败或导致异常。以下是一些可能的方式和其局限性：</p><ol><li><strong>通过自定义类加载器</strong>：即使你编写了一个自定义类加载器并尝试加载自定义的 <code>java.lang.String</code>，由于双亲委派模型，最终还是会委派给引导类加载器。</li><li><strong>修改引导类路径</strong>：可以尝试将自定义的 <code>java.lang.String</code> 放在引导类路径上，但这需要修改JVM的启动参数，且一般来说这不被推荐，因为它会破坏JVM的稳定性和安全性。</li></ol><h2 id="mysql也能存储json，为什么mongo比mysql快"><a href="#mysql也能存储json，为什么mongo比mysql快" class="headerlink" title="mysql也能存储json，为什么mongo比mysql快"></a>mysql也能存储json，为什么mongo比mysql快</h2><h3 id="1-数据模型和存储机制"><a href="#1-数据模型和存储机制" class="headerlink" title="1. 数据模型和存储机制"></a>1. 数据模型和存储机制</h3><p><strong>MongoDB</strong>：</p><ul><li>MongoDB 是一个文档数据库，设计上天然支持 JSON（实际上是 BSON，Binary JSON）。</li><li>数据以文档的形式存储，每个文档是一个键-值对的集合，可以嵌套和具有多样的结构。</li><li>MongoDB 的文档模型更接近 JSON 的原始结构，因此存储和读取 JSON 数据时更加高效。</li></ul><p><strong>MySQL</strong>：</p><ul><li>MySQL 是一个关系型数据库，虽然它支持 JSON 数据类型，但其设计主要针对结构化数据。</li><li>MySQL 在存储 JSON 数据时，通常将其作为字符串处理，需要额外的解析和转换。</li><li>对 JSON 数据的查询和操作需要额外的步骤，如解析 JSON 字符串，这会影响性能。</li></ul><h3 id="2-索引和查询优化"><a href="#2-索引和查询优化" class="headerlink" title="2. 索引和查询优化"></a>2. 索引和查询优化</h3><p><strong>MongoDB</strong>：</p><ul><li>MongoDB 支持在文档中的嵌套字段上创建索引，这使得对嵌套 JSON 结构的查询更高效。</li><li>MongoDB 的查询语言和引擎专为文档结构设计，能够直接对 BSON 结构进行操作，无需额外的解析步骤。</li><li>由于设计上的优势，MongoDB 在进行复杂的嵌套查询时性能更好。</li></ul><p><strong>MySQL</strong>：</p><ul><li>MySQL 也支持对 JSON 字段创建索引，但其索引机制和查询优化主要为关系型数据设计。</li><li>查询 JSON 数据时，MySQL 需要先解析 JSON 字符串，然后再执行查询，增加了额外的开销。</li><li>对嵌套 JSON 结构的查询在 MySQL 中较为复杂，可能需要使用函数和额外的步骤来解析和提取数据。</li></ul><h3 id="3-数据更新和写入"><a href="#3-数据更新和写入" class="headerlink" title="3. 数据更新和写入"></a>3. 数据更新和写入</h3><p><strong>MongoDB</strong>：</p><ul><li>MongoDB 的写入操作设计上更加灵活，支持文档的部分更新。</li><li>对于 JSON 数据的更新，MongoDB 能够直接修改文档中的嵌套字段，而无需整体替换。</li><li>这种灵活性使得对 JSON 数据的写入和更新操作更高效。</li></ul><p><strong>MySQL</strong>：</p><ul><li>MySQL 对 JSON 数据的更新通常需要解析和重新构建整个 JSON 字符串，尤其是对于嵌套结构。</li><li>这种操作增加了写入和更新的开销，导致性能下降。</li></ul><h3 id="4-并发处理和扩展性"><a href="#4-并发处理和扩展性" class="headerlink" title="4. 并发处理和扩展性"></a>4. 并发处理和扩展性</h3><p><strong>MongoDB</strong>：</p><ul><li>MongoDB 的架构设计为分布式存储和高并发处理进行了优化。</li><li>通过分片和复制集机制，MongoDB 能够轻松扩展以应对大规模的数据量和高并发请求。</li></ul><p><strong>MySQL</strong>：</p><ul><li>MySQL 也支持分布式和集群架构，但其扩展性主要针对关系型数据。</li><li>对于大规模 JSON 数据的处理，MySQL 的性能和扩展性可能不如 MongoDB。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次真的一问三不知，另一场两小时面试基础问题比较多，周末整理下看看再发一篇。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;今天经历了一场长时间面试，接近快两小时，晚上又经历了一场，把我干蒙了，尤其是晚上那场，一共问了三个问题，我都没答上来。寄。。。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="随想" scheme="https://re0.top/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="面经" scheme="https://re0.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>2024面试复盘8</title>
    <link href="https://re0.top/2024/08/01/2024-08-01-replay/"/>
    <id>https://re0.top/2024/08/01/2024-08-01-replay/</id>
    <published>2024-08-01T11:00:00.000Z</published>
    <updated>2024-08-01T11:25:44.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h1><h2 id="反射是什么-怎么用"><a href="#反射是什么-怎么用" class="headerlink" title="反射是什么 怎么用"></a>反射是什么 怎么用</h2><p>刚开始我愣了一下，在大学的时候我其实也写过关于反射的<a href="https://re0.top/2020/03/22/java-reflection/">文章</a>，结果忘得差不多了。</p><p>其实就是借助class对象获取类信息的方式称作反射。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line">Class c1 = Cat.class; <span class="comment">//任何类都有隐含的静态成员class用于获取Class对象</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line">Class c2 = cat.getClass();<span class="comment">//实例有一个getClass方法获取Class对象</span></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line">Class c3 = Class.forName(<span class="string">&quot;Cat&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>如果使用getMethods则可以获取所有方法。但是getMethod和getMethods获取的是public方法，如果需要获得私有方法，则使用getDeclaredMethod方法。</p></blockquote><p>获取成员则是使用<code>getField/getDeclaredField</code>.</p><p>获取构造器是<code>getConstructor/getDeclaredConstructor</code></p><h2 id="Java中的常用集合-底层结构"><a href="#Java中的常用集合-底层结构" class="headerlink" title="Java中的常用集合 底层结构"></a>Java中的常用集合 底层结构</h2><p>Java 集合，也叫作容器，主要是由两大接口派生而来：一个是 <code>Collection</code>接口，主要用于存放单一元素；另一个是 <code>Map</code> 接口，主要用于存放键值对。对于<code>Collection</code> 接口，下面又有三个主要的子接口：<code>List</code>、<code>Set</code> 、 <code>Queue</code>。</p><p><code>ArrayList</code>底层是<code>Object[]</code> 数组。动态进行扩容。</p><p><code>TreeSet</code>底层是红黑树。</p><h2 id="用redis实现延迟队列"><a href="#用redis实现延迟队列" class="headerlink" title="用redis实现延迟队列"></a>用redis实现延迟队列</h2><p>使用sortedSet来实现</p><p><strong>添加任务</strong>：使用<code>ZADD</code>命令将任务添加到有序集合中，分数为任务的执行时间。</p><p><strong>消费任务</strong>：使用<code>ZRANGEBYSCORE</code>命令获取到期的任务，并使用<code>ZREM</code>命令从有序集合中删除这些任务。</p><h2 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h2><p>一致性（Consistency）、可用性（Availability）和分区容忍性（Partition Tolerance）。</p><p>根据CAP定理，在一个分布式系统中，最多只能同时满足这三个属性中的两个。</p><p><strong>一致性（Consistency）</strong>：</p><ul><li>在一个分布式系统中，一致性指的是所有节点在同一时间看到的数据是相同的。换句话说，每次读操作都能够返回最近一次写操作的结果。</li></ul><p><strong>可用性（Availability）</strong>：</p><ul><li>可用性指的是系统在任何时间都是可用的，并且每个请求都能够得到非错误的响应（不保证返回最新的数据）。即使某些节点发生故障，系统仍然能够响应请求。</li></ul><p><strong>分区容忍性（Partition Tolerance）</strong>：</p><ul><li>分区容忍性指的是系统能够继续操作，即使网络分区（Partition）发生了。网络分区是指网络中的一些节点无法与其他节点通信，但系统仍然能够正常工作。</li></ul><p><strong>CA（Consistency and Availability）</strong>：</p><ul><li>系统在正常操作时保证一致性和可用性，但在网络分区时无法容忍。</li><li>例子：传统的关系型数据库（如单一的SQL数据库）。</li></ul><p><strong>CP（Consistency and Partition Tolerance）</strong>：</p><ul><li>系统在网络分区时保证一致性，但可能会牺牲部分可用性。</li><li>例子：一些分布式数据库（如HBase、MongoDB在强一致性配置下）。</li></ul><p><strong>AP（Availability and Partition Tolerance）</strong>：</p><ul><li>系统在网络分区时保证可用性，但可能无法保证强一致性。</li><li>例子：一些NoSQL数据库（如Cassandra、DynamoDB）。</li></ul><h2 id="分布式锁实现"><a href="#分布式锁实现" class="headerlink" title="分布式锁实现"></a>分布式锁实现</h2><p>有redis分布式锁和mysql的悲观锁。</p><p>使用<code>SET</code>命令以<code>NX</code>和<code>EX</code>选项来设置锁键。</p><p>使用<code>DEL</code>命令来释放锁。</p><p>使用一个唯一的值（通常是UUID）来标识锁持有者，以防止误删他人的锁。</p><h3 id="NX-选项"><a href="#NX-选项" class="headerlink" title="NX 选项"></a><code>NX</code> 选项</h3><ul><li><strong>含义</strong>：<code>NX</code>选项表示”只在键不存在时设置”（Not Exists）。</li><li><strong>功能</strong>：当<code>NX</code>选项指定时，<code>SET</code>命令只会在键不存在的情况下设置键值。如果键已经存在，<code>SET</code>命令不会执行任何操作。</li><li><strong>用途</strong>：常用于分布式锁的实现，确保只有一个客户端能够成功设置锁，防止多个客户端同时获得锁。</li></ul><h3 id="EX-选项"><a href="#EX-选项" class="headerlink" title="EX 选项"></a><code>EX</code> 选项</h3><ul><li><strong>含义</strong>：<code>EX</code>选项表示”设置键的过期时间”（Expire）。</li><li><strong>功能</strong>：当<code>EX</code>选项指定时，<code>SET</code>命令会在设置键值的同时，为键设置一个过期时间（以秒为单位）。键在过期时间到达后将自动删除。</li><li><strong>用途</strong>：用于设置键的自动过期，防止因持有锁或设置值过长时间而导致系统资源泄漏。对于分布式锁，设置锁的过期时间非常重要，以确保锁不会无限期地占用，导致系统无法恢复。</li></ul><h2 id="死锁与避免"><a href="#死锁与避免" class="headerlink" title="死锁与避免"></a>死锁与避免</h2><p>在计算机系统中，死锁的发生通常需要满足以下四个条件，这四个条件被称为死锁的必要条件：</p><ol><li><strong>互斥（Mutual Exclusion）</strong>：资源不能被多个进程（或线程）同时占用，即资源在某一时刻只能被一个进程（或线程）使用。</li><li><strong>占有并等待（Hold and Wait）</strong>：进程（或线程）已经持有一个或多个资源，并且正在等待其他资源，而这些资源被其他进程（或线程）持有。</li><li><strong>非抢占（No Preemption）</strong>：已经分配给进程（或线程）的资源在被释放之前不能被抢占，资源只能在进程（或线程）自愿释放后才能被其他进程（或线程）获取。</li><li><strong>循环等待（Circular Wait）</strong>：存在一个进程（或线程）集合，其中每个进程（或线程）都在等待下一个进程（或线程）释放资源，形成一个循环链。</li></ol><p><strong>预防</strong>就是破坏四个条件。</p><p><strong>避免</strong>可以使用<strong>银行家算法</strong>：在资源请求时，通过检查是否能保证系统处于安全状态来决定是否分配资源。只有在分配资源后系统仍然处于安全状态时，才允许该资源分配。</p><p><strong>检测</strong>使用资源分配图（Resource Allocation Graph）或其他检测机制来检测系统中是否存在死锁。</p><p><strong>恢复</strong>：</p><ul><li><strong>终止进程</strong>：选择一个或多个进程终止，以释放资源。</li><li><strong>资源抢占</strong>：从某些进程中抢占资源，分配给其他进程，以打破死锁循环。</li></ul><h2 id="git切换分支？-复制某个commit？"><a href="#git切换分支？-复制某个commit？" class="headerlink" title="git切换分支？ 复制某个commit？"></a>git切换分支？ 复制某个commit？</h2><p>平常git用的不多。只回答上第一个。</p><p>使用<code>git checkout</code>来切换分支。</p><p>如果你想从某个特定的提交创建一个新的分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;new-branch-name&gt; &lt;commit-hash&gt;</span><br><span class="line">或者</span><br><span class="line">git switch -c &lt;new-branch-name&gt; &lt;commit-hash&gt;</span><br></pre></td></tr></table></figure><p>如果你想将某个提交的更改应用到当前分支，可以使用<code>git cherry-pick</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick &lt;commit-hash&gt;</span><br></pre></td></tr></table></figure><h2 id="maven怎么解决依赖冲突"><a href="#maven怎么解决依赖冲突" class="headerlink" title="maven怎么解决依赖冲突"></a>maven怎么解决依赖冲突</h2><p>使用<code>mvn dependency:tree</code>查看冲突依赖，然后在pom文件中使用<code>&lt;exclusions&gt;</code>排除依赖。</p><p>也可以在<code>pom.xml</code>文件中，通过<code>&lt;dependencyManagement&gt;</code>标签来强制使用特定版本的依赖。</p><p>使用<code>mvn dependency:analyze</code>这个命令可以识别未使用和未声明的依赖。</p><h2 id="对称加密和非对称加密算法？有什么优缺点"><a href="#对称加密和非对称加密算法？有什么优缺点" class="headerlink" title="对称加密和非对称加密算法？有什么优缺点"></a>对称加密和非对称加密算法？有什么优缺点</h2><p>对称加密是指加密和解密使用相同的密钥。常见的对称加密算法有AES（Advanced Encryption Standard）、DES（Data Encryption Standard）和3DES（Triple DES）。</p><p><strong>优点</strong></p><ol><li><strong>速度快</strong>：对称加密算法通常比非对称加密算法快，因为它们的计算复杂度较低，适合处理大量数据。</li><li><strong>效率高</strong>：对称加密适用于需要高性能加密的场景，如大数据传输、磁盘加密等。</li><li><strong>资源消耗少</strong>：对称加密的计算资源消耗通常较低，因此适合在资源有限的环境中使用。</li></ol><p><strong>缺点</strong></p><ol><li><p><strong>密钥管理困难</strong>：对称加密需要确保密钥的安全传输和存储，密钥的分发和管理是一个挑战。</p></li><li><p><strong>不适合分布式系统</strong>：在大规模分布式系统中，密钥的管理和分发变得更加复杂，需要额外的机制来确保安全性。</p></li><li><p><strong>密钥泄露风险</strong>：一旦密钥泄露，所有用该密钥加密的数据都可能被解密，因此密钥的保护至关重要。</p></li></ol><p>非对称加密（或称公钥加密）使用一对密钥：公钥和私钥。公钥用于加密，私钥用于解密。常见的非对称加密算法有RSA（Rivest–Shamir–Adleman）、ECC（Elliptic Curve Cryptography）和DSA（Digital Signature Algorithm）。</p><p><strong>优点</strong></p><ol><li><strong>密钥管理简化</strong>：非对称加密解决了密钥分发的问题。公钥可以公开，而私钥保持秘密。</li><li><strong>数字签名</strong>：非对称加密支持数字签名，可以验证数据的真实性和完整性。</li><li><strong>加密密钥交换</strong>：常用于安全的密钥交换，例如在HTTPS中使用非对称加密来安全地交换对称加密密钥。</li></ol><p><strong>缺点</strong></p><ol><li><strong>速度较慢</strong>：非对称加密通常比对称加密慢，因为它需要更复杂的数学运算，适合加密小量数据。</li><li><strong>资源消耗大</strong>：计算和存储资源消耗较高，因此不适合大规模数据的加密。</li><li><strong>计算复杂性</strong>：非对称加密的算法复杂度较高，实施和优化可能较为复杂。</li></ol><h2 id="spring框架有什么设计模式？aop用的是什么？"><a href="#spring框架有什么设计模式？aop用的是什么？" class="headerlink" title="spring框架有什么设计模式？aop用的是什么？"></a>spring框架有什么设计模式？aop用的是什么？</h2><p><strong>单例模式</strong>：通过配置Bean的作用域为<code>singleton</code>（默认值），Spring在启动时创建唯一的Bean实例。</p><p><strong>代理模式</strong>：Spring使用代理模式来实现AOP（面向切面编程）。通过动态代理或CGLIB字节码生成，Spring可以在运行时创建代理对象，并在方法调用前后插入额外的逻辑（如事务管理、日志记录等）。</p><p>模板方法模式： Spring的<code>JdbcTemplate</code>、<code>JmsTemplate</code>和<code>HibernateTemplate</code>等类使用模板方法模式来简化常见的操作。模板方法模式定义了操作的算法框架，将某些步骤的实现延迟到子类。</p><p><strong>工厂模式</strong>：Spring使用工厂模式来创建Bean实例。Bean的创建由Spring容器负责，开发者只需要定义Bean的配置，Spring容器在运行时根据配置创建和管理Bean。</p><p><strong>策略模式</strong>： Spring的许多组件使用策略模式来定义算法的变体，而不需要修改客户端代码。例如，Spring的<code>TransactionManager</code>接口允许不同的事务策略实现，如<code>DataSourceTransactionManager</code>、<code>JpaTransactionManager</code>等。</p><p><strong>观察者模式</strong>：Spring的事件发布和监听机制使用了观察者模式。Spring允许应用程序通过事件发布和监听来实现松耦合的组件交互。<code>ApplicationEvent</code>和<code>ApplicationListener</code>接口，<code>ApplicationContext</code>作为事件发布者，监听器作为观察者。</p><p><strong>装饰器模式</strong>：Spring AOP的一个实现，特别是<code>ProxyFactoryBean</code>，使用了装饰器模式来增强对象的功能，而不需要改变其结构。通过在代理对象上添加额外的功能来装饰原始对象。Spring AOP中的切面（Aspect）和建议（Advice）可以看作是对目标对象的装饰。</p><h2 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h2><p>输入一个字符串n1, 由数字与”,”分隔，输出这个序列中第二大的数字，以字符串返回。</p><p>还算比较简单，就是先切分字符串，然后用<code>Integer.valueOf</code>变成数字，然后用两个变量记录最大和第二大的数字。</p><p>面试时写的时候忘记考虑没有第二大的数字了。现在让GPT又写了一下才恍然大悟。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 找到最大的和第二大的数字</span></span><br><span class="line">Integer largest = <span class="keyword">null</span>;</span><br><span class="line">Integer secondLargest = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Integer number : uniqueNumbers) &#123;</span><br><span class="line">    <span class="keyword">if</span> (largest == <span class="keyword">null</span> || number &gt; largest) &#123;</span><br><span class="line">        secondLargest = largest;</span><br><span class="line">        largest = number;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (secondLargest == <span class="keyword">null</span> || (number &gt; secondLargest &amp;&amp; number &lt; largest)) &#123;</span><br><span class="line">        secondLargest = number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (secondLargest != <span class="keyword">null</span>) ? String.valueOf(secondLargest) : <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>没想到都是八股文，措手不及，其中最后一个aop用的是什么设计模式我竟然转不过脑子来。</p><p>也有一些没答出来，比如<code>chery-pick</code>，反射也答得不好，sortedSet如何删除也没答出来。</p><p>包括代码编写只面试了半个小时，不知道咋说，准备下一场其他面试吧。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;复盘&quot;&gt;&lt;a href=&quot;#复盘&quot; class=&quot;headerlink&quot; title=&quot;复盘&quot;&gt;&lt;/a&gt;复盘&lt;/h1&gt;&lt;h2 id=&quot;反射是什么-怎么用&quot;&gt;&lt;a href=&quot;#反射是什么-怎么用&quot; class=&quot;headerlink&quot; title=&quot;反射是什么 怎
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="随想" scheme="https://re0.top/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="面经" scheme="https://re0.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>2024面试复盘7</title>
    <link href="https://re0.top/2024/07/30/2024-07-30-replay/"/>
    <id>https://re0.top/2024/07/30/2024-07-30-replay/</id>
    <published>2024-07-30T12:00:00.000Z</published>
    <updated>2024-07-31T08:34:45.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天面试不咋顺利。</p><p>面试完后得知一个同事去了百度，我既替他高兴，但我自己也很难受。我面试了好多家都不咋顺利，他一说他base只有18，我就知道原来我要价太高了。</p><p>还是挺难受的，我觉得我并不比他差。但也只能接受，有时候面试就是看运气还有眼缘的。</p><h1 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h1><h2 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h2><p>算法题是最后问的，我挪到前面来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Flight</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出发城市</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String cityFrom;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 到达城市</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String cityTo;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 航班价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> price;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 航班号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String flightNo;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Flight</span><span class="params">(String cityFrom, String cityTo, <span class="keyword">int</span> price, String flightNo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cityFrom = cityFrom;</span><br><span class="line">        <span class="keyword">this</span>.cityTo = cityTo;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">        <span class="keyword">this</span>.flightNo = flightNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Flight&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cityFrom=&#x27;&quot;</span> + cityFrom + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, cityTo=&#x27;&quot;</span> + cityTo + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&quot;, flightNo=&#x27;&quot;</span> + flightNo + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 找出 fromCity 至 toCity 最便宜的航班组合并返回</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> flights</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fromCity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> toCity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Flight&gt; <span class="title">searchLowestPriceFlightCombination</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        Set&lt;Flight&gt; flights,</span></span></span><br><span class="line"><span class="params"><span class="function">        String fromCity,</span></span></span><br><span class="line"><span class="params"><span class="function">        String toCity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面试官就发了一道这种题目。</p><p>我就写成了直达做法，但实际上面试官是要考察包括中转的情况。有点尴尬。。我就说怎么这么简单。其实应该用BFS（广度优先）去做的。</p><p>也是请教了GPT.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Flight&gt; <span class="title">searchLowestPriceFlightCombination</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            Set&lt;Flight&gt; flights,</span></span></span><br><span class="line"><span class="params"><span class="function">            String fromCity,</span></span></span><br><span class="line"><span class="params"><span class="function">            String toCity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, List&lt;Flight&gt;&gt; graph = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Flight flight : flights) &#123;</span><br><span class="line">            graph.computeIfAbsent(flight.cityFrom, k -&gt; <span class="keyword">new</span> ArrayList&lt;&gt;()).add(flight);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Queue to hold the paths and their corresponding total price</span></span><br><span class="line">        Queue&lt;List&lt;Flight&gt;&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">// Map to hold the minimum cost to reach each city</span></span><br><span class="line">        Map&lt;String, Integer&gt; minCost = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        minCost.put(fromCity, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start with the fromCity with an empty path</span></span><br><span class="line">        queue.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line"></span><br><span class="line">        List&lt;Flight&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> minTotalCost = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            List&lt;Flight&gt; currentPath = queue.poll();</span><br><span class="line">            String lastCity = currentPath.isEmpty() ? fromCity : currentPath.get(currentPath.size() - <span class="number">1</span>).cityTo;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (lastCity.equals(toCity)) &#123;</span><br><span class="line">                <span class="keyword">int</span> currentCost = currentPath.stream().mapToInt(f -&gt; f.price).sum();</span><br><span class="line">                <span class="keyword">if</span> (currentCost &lt; minTotalCost) &#123;</span><br><span class="line">                    minTotalCost = currentCost;</span><br><span class="line">                    result = <span class="keyword">new</span> ArrayList&lt;&gt;(currentPath);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Flight nextFlight : graph.getOrDefault(lastCity, <span class="keyword">new</span> ArrayList&lt;&gt;())) &#123;</span><br><span class="line">                <span class="keyword">int</span> newCost = currentPath.stream().mapToInt(f -&gt; f.price).sum() + nextFlight.price;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (newCost &lt; minCost.getOrDefault(nextFlight.cityTo, Integer.MAX_VALUE)) &#123;</span><br><span class="line">                    minCost.put(nextFlight.cityTo, newCost);</span><br><span class="line">                    List&lt;Flight&gt; newPath = <span class="keyword">new</span> ArrayList&lt;&gt;(currentPath);</span><br><span class="line">                    newPath.add(nextFlight);</span><br><span class="line">                    queue.add(newPath);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>实际上可以使用笛卡斯特拉算法（Dijkstra）来实现。其实就是改成优先级队列去排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Flight&gt; <span class="title">searchLowestPriceFlightCombination</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            Set&lt;Flight&gt; flights,</span></span></span><br><span class="line"><span class="params"><span class="function">            String fromCity,</span></span></span><br><span class="line"><span class="params"><span class="function">            String toCity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, List&lt;Flight&gt;&gt; graph = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span> (Flight flight : flights) &#123;</span><br><span class="line">         graph.computeIfAbsent(flight.cityFrom, k -&gt; <span class="keyword">new</span> ArrayList&lt;&gt;()).add(flight);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// PriorityQueue to hold the paths and sort by the total price (cost)</span></span><br><span class="line">      PriorityQueue&lt;List&lt;Flight&gt;&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;&gt;(Comparator.comparingInt(path -&gt; path.stream().mapToInt(f -&gt; f.price).sum()));</span><br><span class="line">      <span class="comment">// Map to hold the minimum cost to reach each city</span></span><br><span class="line">      Map&lt;String, Integer&gt; minCost = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      minCost.put(fromCity, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Start with the fromCity with an empty path</span></span><br><span class="line">      queue.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">         List&lt;Flight&gt; currentPath = queue.poll();</span><br><span class="line">         String lastCity = currentPath.isEmpty() ? fromCity : currentPath.get(currentPath.size() - <span class="number">1</span>).cityTo;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (lastCity.equals(toCity)) &#123;</span><br><span class="line">            <span class="keyword">return</span> currentPath;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">for</span> (Flight nextFlight : graph.getOrDefault(lastCity, <span class="keyword">new</span> ArrayList&lt;&gt;())) &#123;</span><br><span class="line">            <span class="keyword">int</span> newCost = currentPath.stream().mapToInt(f -&gt; f.price).sum() + nextFlight.price;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (newCost &lt; minCost.getOrDefault(nextFlight.cityTo, Integer.MAX_VALUE)) &#123;</span><br><span class="line">               minCost.put(nextFlight.cityTo, newCost);</span><br><span class="line">               List&lt;Flight&gt; newPath = <span class="keyword">new</span> ArrayList&lt;&gt;(currentPath);</span><br><span class="line">               newPath.add(nextFlight);</span><br><span class="line">               queue.add(newPath);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>看了一下，好像仅仅是队列的区别。</p><p>GPT的回答：</p><p><strong>BFS</strong> 适用于无权图或所有边权重相等的图，简单高效。</p><p><strong>Dijkstra</strong> 适用于加权图，特别是边权重不等的图，更加通用但稍微复杂。</p><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>问了下项目做啥的。</p><p>还问了代码规模。仔细想了想好像核心代码不过百行，哈哈哈。。。</p><h2 id="项目里用了哪些java相关技术"><a href="#项目里用了哪些java相关技术" class="headerlink" title="项目里用了哪些java相关技术"></a>项目里用了哪些java相关技术</h2><p>spring redis rabbitmq…</p><h2 id="Java异步框架？"><a href="#Java异步框架？" class="headerlink" title="Java异步框架？"></a>Java异步框架？</h2><p>之前了解过vert.x框架。jdk自带的有CompletableFuture，还有经常听到的Netty。</p><h2 id="如何理解异步编程，阻塞非阻塞，同步非同步"><a href="#如何理解异步编程，阻塞非阻塞，同步非同步" class="headerlink" title="如何理解异步编程，阻塞非阻塞，同步非同步"></a>如何理解异步编程，阻塞非阻塞，同步非同步</h2><p>异步编程是一种编程方式，它允许程序在执行某些操作（如I/O操作、网络请求或长时间运行的计算任务）时，不阻塞当前线程，从而可以同时处理其他任务。这种方式可以显著提高程序的性能和响应能力，尤其是在需要处理大量并发任务时</p><p><strong>同步 vs 异步</strong>:</p><ul><li><strong>同步</strong>: 当一个任务开始时，必须等待其完成后才能继续执行后续任务。执行是按顺序进行的，任务之间存在依赖性。</li><li><strong>异步</strong>: 当一个任务开始时，可以继续执行其他任务而不必等待该任务完成。当该任务完成时，会通过回调、消息或其他机制通知主程序。</li></ul><p><strong>阻塞 vs 非阻塞</strong>:</p><ul><li><strong>阻塞</strong>: 在等待某个操作（如I/O操作）完成之前，线程被暂停，无法执行其他操作。</li><li><strong>非阻塞</strong>: 线程在等待操作完成时仍然可以继续执行其他操作。</li></ul><h3 id="异步编程的机制"><a href="#异步编程的机制" class="headerlink" title="异步编程的机制"></a>异步编程的机制</h3><ol><li><strong>回调（Callback）</strong>: 传递一个函数作为参数，当异步操作完成时调用该函数。例如，JavaScript中的异步函数经常使用回调。</li><li><strong>Promise/Future</strong>: 表示一个将来可能会完成的操作，并允许你在操作完成时获取结果。Java的 <code>CompletableFuture</code> 和 JavaScript 的 <code>Promise</code> 是典型例子。</li><li><strong>Async/Await</strong>: 提供一种更简洁和可读的方式来编写异步代码，通过将异步操作的结果等待并返回。JavaScript和C#中都有这种机制。</li></ol><h2 id="Java-NIO"><a href="#Java-NIO" class="headerlink" title="Java NIO"></a>Java NIO</h2><p>Java NIO（New Input/Output）是Java 1.4中引入的一组API，也叫做Non-blocking I/O。用于替代传统的Java I/O。它提供了一种更高效的I/O操作方式，特别适合处理大量并发连接和大数据量的读写操作。NIO主要通过非阻塞I/O和缓冲区来提高I/O操作的效率和性能。</p><p><strong>主要概念和组件</strong></p><ol><li><strong>缓冲区（Buffer）</strong>: 一个线性数组，用于存储数据。NIO中的所有数据都是用缓冲区处理的。常见的缓冲区类型有 <code>ByteBuffer</code>、<code>CharBuffer</code>、<code>IntBuffer</code> 等。</li><li><strong>通道（Channel）</strong>: 一个比传统的 <code>InputStream</code> 和 <code>OutputStream</code> 更高效的I/O抽象。通道可以异步地读写数据。常见的通道有 <code>FileChannel</code>、<code>SocketChannel</code>、<code>ServerSocketChannel</code> 和 <code>DatagramChannel</code>。</li><li><strong>选择器（Selector）</strong>: 一个对象，可以检测一个或多个通道的状态（如是否准备好读、写等）。选择器使得单个线程可以管理多个通道，从而实现高效的非阻塞I/O操作。</li><li><strong>选择键（SelectionKey）</strong>: 选择器和通道之间的连接器。当通道准备就绪时，选择键会被选择器选择并返回。</li></ol><p><strong>工作原理</strong></p><p>NIO通过以下几个核心组件协同工作来实现非阻塞I/O：</p><ol><li><strong>通道（Channel）和缓冲区（Buffer）</strong>:<ul><li>数据读写都是通过缓冲区进行的。通道读取数据到缓冲区，或者将缓冲区中的数据写入通道。</li><li>缓冲区有几个重要的属性：容量（capacity）、位置（position）和限制（limit），用于控制数据读写的范围和进度。</li></ul></li><li><strong>非阻塞模式</strong>:<ul><li>通道可以配置为非阻塞模式，这意味着I/O操作（如读写）可以立即返回，而不会阻塞当前线程。如果操作不能立即完成，它会返回零或负数，而不是阻塞等待。</li></ul></li><li><strong>选择器（Selector）</strong>:<ul><li>选择器允许一个线程管理多个通道。通过注册通道到选择器并在通道准备好执行某些操作时被通知，选择器使得服务器可以有效地处理大量并发连接。</li></ul></li></ol><h2 id="select-和-epoll"><a href="#select-和-epoll" class="headerlink" title="select 和 epoll"></a>select 和 epoll</h2><p><code>select</code> 和 <code>epoll</code> 是两种不同的I/O多路复用机制，用于在一个线程中管理多个I/O操作。它们都用于监视一组文件描述符（如网络套接字）并等待其中的一个或多个准备好进行I/O操作。</p><p><code>select</code> 是一个较早期的I/O多路复用机制，几乎在所有Unix-like系统上都可以使用，包括Linux和BSD。它通过一个固定大小的文件描述符集合来检测哪些描述符准备好进行I/O操作。</p><p><strong>特点</strong>：</p><ol><li><strong>简单且广泛支持</strong>：几乎所有的Unix-like系统都支持<code>select</code>，因此具有很好的兼容性。</li><li><strong>固定大小的描述符集合</strong>：<code>select</code> 使用一个固定大小的数组来存储文件描述符，在Linux上通常限制为1024个文件描述符。</li><li><strong>性能问题</strong>：当文件描述符数量很大时，<code>select</code>的性能会下降，因为它每次都需要扫描整个描述符集合。</li></ol><p><code>epoll</code> 是Linux特有的I/O多路复用机制，是<code>select</code>和<code>poll</code>的改进版本，旨在提高大规模并发连接的性能。<code>epoll</code> 使用事件驱动的机制，适用于处理大量的文件描述符。</p><p><strong>特点</strong>：</p><ol><li><strong>高效性</strong>：<code>epoll</code> 在处理大量文件描述符时效率更高，因为它只在文件描述符状态发生变化时才进行处理，而不是扫描整个描述符集合。</li><li><strong>动态大小的描述符集合</strong>：<code>epoll</code> 支持动态大小的文件描述符集合，没有固定的限制。</li><li><strong>边缘触发和水平触发</strong>：<code>epoll</code> 提供两种工作模式，边缘触发（edge-triggered, ET）和水平触发（level-triggered, LT），其中边缘触发模式适用于高性能场景。</li></ol><p><strong>适用场景</strong></p><ul><li><code>select</code>：适用于需要广泛兼容性的应用程序，或文件描述符数量较少的场景。</li><li><code>epoll</code>：适用于Linux系统上需要处理大量并发连接的高性能服务器应用程序。</li></ul><h2 id="多线程例子"><a href="#多线程例子" class="headerlink" title="多线程例子"></a>多线程例子</h2><p>用线程池管理线程。</p><h2 id="线程池的参数"><a href="#线程池的参数" class="headerlink" title="线程池的参数"></a>线程池的参数</h2><p>核心线程数？QPS依据？</p><p>CPU密集型任务一般为核心数+1，IO密集型任务一般2N-4N，具体根据系统负载，QPS等依据灵活调整。</p><p>其他参数之前复盘都有写过。</p><h2 id="线程安全的工具"><a href="#线程安全的工具" class="headerlink" title="线程安全的工具"></a>线程安全的工具</h2><p>synchronized，java.util.concurrent中的AQS。</p><p>其中AQS的核心原理之前也看过，这里再让GPT总结下：</p><p>AQS 的核心原理是基于一个 FIFO（先入先出）等待队列来管理线程的获取和释放锁的操作。它通过内置的 <code>state</code> 变量以及一些低层的 CAS 操作和锁条件变量实现高效的线程同步。</p><p><strong>State 变量</strong>:</p><ul><li><code>state</code> 是一个 <code>int</code> 类型的变量，表示共享资源的状态。其含义取决于具体的同步器实现。例如，在 <code>ReentrantLock</code> 中，<code>state</code> 表示锁的持有计数；在 <code>CountDownLatch</code> 中，<code>state</code> 表示倒计时计数。</li><li>访问和修改 <code>state</code> 需要通过 AQS 提供的 <code>getState</code>、<code>setState</code> 和 <code>compareAndSetState</code> 方法，这些方法保证了对 <code>state</code> 的原子操作。</li></ul><p><strong>FIFO 队列</strong>:</p><ul><li>AQS 使用一个双向链表来实现等待队列，每个节点（Node）表示一个等待线程。节点中保存了线程的引用及其等待状态。</li><li>等待队列中的线程会被阻塞，当锁资源可用时，线程会被唤醒并重新竞争锁。</li></ul><p><strong>独占锁与共享锁</strong>:</p><ul><li><strong>独占模式（Exclusive Mode）</strong>：一个线程独占资源。例如，<code>ReentrantLock</code> 就是独占模式。</li><li><strong>共享模式（Shared Mode）</strong>：多个线程可以共享资源。例如，<code>Semaphore</code> 和 <code>CountDownLatch</code> 是共享模式。</li></ul><h2 id="ThreadLocal用过吗"><a href="#ThreadLocal用过吗" class="headerlink" title="ThreadLocal用过吗"></a>ThreadLocal用过吗</h2><p>讲了MDC的使用。</p><h2 id="父子线程ThreadLocal"><a href="#父子线程ThreadLocal" class="headerlink" title="父子线程ThreadLocal"></a>父子线程ThreadLocal</h2><p>可以使用 <code>InheritableThreadLocal</code> 。但在线程池中，由于线程会被重用，<code>InheritableThreadLocal</code> 的值可能会被意外共享，导致不正确的行为。</p><p>可以使用阿里开源的<strong>transmittableThreadLocal</strong></p><p><strong>TransmittableThreadLocal 的特点和优势</strong></p><ol><li><strong>线程池支持</strong>：<ul><li>解决了 <code>InheritableThreadLocal</code> 在线程池中使用时可能出现的变量污染问题。<code>TransmittableThreadLocal</code> 可以在任务提交到线程池时传递上下文，并在任务执行结束后恢复原始上下文。</li></ul></li><li><strong>上下文一致性</strong>：<ul><li>确保在线程池中使用时，上下文信息能够正确地传递到子线程，即使线程被复用也不会污染其他任务的上下文。</li></ul></li><li><strong>扩展性</strong>：<ul><li>提供了 <code>TtlRunnable</code> 和 <code>TtlCallable</code> 类，用于包装任务，确保上下文的正确传递。</li></ul></li></ol><h2 id="ThreadLocal的底层实现"><a href="#ThreadLocal的底层实现" class="headerlink" title="ThreadLocal的底层实现"></a>ThreadLocal的底层实现</h2><p><strong>ThreadLocalMap</strong>:</p><ul><li>每个线程中有一个 <code>ThreadLocal.ThreadLocalMap</code> 实例来存储线程局部变量。<code>ThreadLocalMap</code> 是一个专门为线程局部变量设计的内存映射表，主要通过线程的 <code>ThreadLocal</code> 对象作为键，通过 <code>ThreadLocalMap</code> 存储实际的值。</li></ul><p><strong>ThreadLocalMap 结构</strong>:</p><ul><li><p><code>ThreadLocalMap</code></p><p> 是一个数组，每个元素是一个 <code>ThreadLocalMap.Entry</code></p><p> 对象。Entry类中包含两个字段：</p><ul><li><code>ThreadLocal</code> 对象的引用（作为键）</li><li>线程局部变量的值（作为值）</li></ul></li></ul><h2 id="最新的JDK有什么特性吗"><a href="#最新的JDK有什么特性吗" class="headerlink" title="最新的JDK有什么特性吗"></a>最新的JDK有什么特性吗</h2><p>回答了虚拟线程。追问有什么优势。线程间切换会快一点。</p><h2 id="G1特性"><a href="#G1特性" class="headerlink" title="G1特性"></a>G1特性</h2><p><strong>分代收集</strong>:</p><ul><li>G1 是基于分代收集的，即堆内存被划分为多个区域（Region）。这些区域可以属于年轻代（Young Generation）、老年代（Old Generation）或永久代（Metaspace）。G1 通过动态调整这些区域的大小和数量来优化内存回收。</li></ul><p><strong>区域化堆内存</strong>:</p><ul><li>堆内存被划分成多个相等大小的区域（Region），这些区域用于不同的目的（年轻代、老年代、和空闲区域）。这种区域化使得 G1 可以根据需求进行灵活的内存管理。</li></ul><p><strong>增量式收集</strong>:</p><ul><li>G1 采用增量式的垃圾回收策略。它将堆分成多个区域，并按需回收这些区域，而不是一次性回收整个年轻代或老年代。这种方式减少了垃圾回收的暂停时间，降低了应用程序的停顿时间。</li></ul><p><strong>并行和并发收集</strong>:</p><ul><li>G1 支持多线程并行和并发回收。这意味着垃圾回收工作可以并行执行，从而减少了垃圾回收的总停顿时间。G1 的并发标记阶段（Concurrent Marking）减少了应用程序的停顿时间。</li></ul><p><strong>预测性停顿时间</strong>:</p><ul><li>G1 设计目标之一是提供预测性停顿时间。G1 可以通过配置参数（如 <code>-XX:MaxGCPauseMillis</code>）来控制垃圾回收的最大停顿时间。这使得 G1 可以在一定范围内保证垃圾回收的停顿时间不会超出指定的阈值。</li></ul><p><strong>回收优先级</strong>:</p><ul><li>G1 使用了回收优先级策略，它会首先回收那些垃圾最多的区域，从而提高垃圾回收效率。G1 会评估每个区域的回收收益，以决定哪个区域最值得回收。</li></ul><p><strong>混合回收</strong>:</p><ul><li>G1 在进行年轻代垃圾回收时，可以同时回收老年代的部分区域。这种混合回收机制有助于减少老年代中的垃圾量，从而减轻后续的老年代回收负担。</li></ul><p><strong>全堆回收</strong>:</p><ul><li>在需要全堆回收的情况下，G1 会执行一次全堆回收（Full GC）。G1 的全堆回收也会尽可能地减少停顿时间，并且会回收年轻代和老年代的所有垃圾。</li></ul><p><strong>自适应调整</strong>:</p><ul><li>G1 可以自适应调整堆的区域划分，以优化垃圾回收性能。它会根据堆的使用情况和垃圾回收的需求来动态调整区域的大小和数量。</li></ul><p>要使用 G1 垃圾回收器，需要在 JVM 启动时指定 <code>-XX:+UseG1GC</code>。此外，还有一些配置参数可以用来调整 G1 的行为：</p><ul><li><code>-XX:MaxGCPauseMillis=&lt;n&gt;</code>: 目标最大垃圾回收停顿时间（毫秒）。</li><li><code>-XX:G1HeapRegionSize=&lt;size&gt;</code>: 指定 G1 区域的大小（如 1m、2m、4m、8m）。</li><li><code>-XX:ParallelGCThreads=&lt;n&gt;</code>: 设置并行垃圾回收线程的数量。</li><li><code>-XX:ConcGCThreads=&lt;n&gt;</code>: 设置并发标记阶段的线程数量。</li><li><code>-XX:G1ReservePercent=&lt;n&gt;</code>: 设置 G1 在堆中保留的区域百分比，用于防止频繁的 Full GC。</li></ul><h2 id="java的内存分区"><a href="#java的内存分区" class="headerlink" title="java的内存分区"></a>java的内存分区</h2><h3 id="1-程序计数器-Program-Counter-Register"><a href="#1-程序计数器-Program-Counter-Register" class="headerlink" title="1. 程序计数器 (Program Counter Register)"></a>1. 程序计数器 (Program Counter Register)</h3><ul><li><strong>功能</strong>: 程序计数器（PC 寄存器）是一个指向当前执行线程的字节码指令的指针。每个线程都有一个独立的程序计数器。</li><li><strong>用途</strong>: 在多线程环境下，用于跟踪线程的执行位置。它不参与垃圾回收。</li></ul><h3 id="2-虚拟机栈-Java-Stack"><a href="#2-虚拟机栈-Java-Stack" class="headerlink" title="2. 虚拟机栈 (Java Stack)"></a>2. 虚拟机栈 (Java Stack)</h3><ul><li><strong>功能</strong>: 虚拟机栈用于管理线程的局部变量、操作数栈、动态链接、方法返回地址等。每个线程都有自己的虚拟机栈。</li><li><strong>用途</strong>: 支持方法调用和返回。每个方法在调用时会创建一个栈帧（Stack Frame），存储方法的局部变量、操作数栈等信息。</li><li><strong>大小</strong>: 可通过 <code>-Xss</code> 参数设置栈大小。</li></ul><h3 id="3-本地方法栈-Native-Method-Stack"><a href="#3-本地方法栈-Native-Method-Stack" class="headerlink" title="3. 本地方法栈 (Native Method Stack)"></a>3. 本地方法栈 (Native Method Stack)</h3><ul><li><strong>功能</strong>: 本地方法栈用于支持 native 方法的执行，它与虚拟机栈类似，但专门用于处理 native 方法的调用。</li><li><strong>用途</strong>: 用于与本地方法（由 Java Native Interface, JNI 提供）进行交互。</li><li><strong>大小</strong>: 可通过 <code>-Xss</code> 参数设置栈大小。</li></ul><h3 id="4-堆内存-Heap"><a href="#4-堆内存-Heap" class="headerlink" title="4. 堆内存 (Heap)"></a>4. 堆内存 (Heap)</h3><ul><li><strong>功能</strong>: 堆是 JVM 中最大的一块内存区域，用于存储所有的对象实例和数组。垃圾回收器主要在堆上进行垃圾回收。</li><li><strong>分区:</strong> <ul><li><strong>年轻代 (Young Generation)</strong> 包含新创建的对象，分为三个部分：<ul><li><strong>Eden 区</strong>: 新生对象首先被分配到 Eden 区。</li><li><strong>From Survivor 区</strong>: 对象经过一次或多次垃圾回收后，从 Eden 区晋升到 From Survivor 区。</li><li><strong>To Survivor 区</strong>: 另一个 Survivor 区，用于交换对象。</li></ul></li><li><strong>老年代 (Old Generation)</strong>: 包含经过多次垃圾回收仍然存活的对象。长期存活的对象最终会被晋升到老年代。</li><li><strong>永久代 (PermGen) / 元空间 (Metaspace)</strong><ul><li><strong>PermGen</strong>: Java 8 之前用于存储类元数据和常量池。</li><li><strong>Metaspace</strong>: 从 Java 8 开始取代 PermGen，用于存储类的元数据，动态生成的类和其他元数据。Metaspace 存储在本地内存中，而不是堆中。</li></ul></li></ul></li><li><strong>用途</strong>: 支持对象的动态分配和垃圾回收。</li><li><strong>大小</strong>: 可以通过 <code>-Xmx</code> 和 <code>-Xms</code> 参数设置堆的最大值和初始值，<code>-XX:MaxPermSize</code> 用于设置 PermGen 大小（Java 7 及之前）。</li></ul><h3 id="5-运行时常量池-Runtime-Constant-Pool"><a href="#5-运行时常量池-Runtime-Constant-Pool" class="headerlink" title="5. 运行时常量池 (Runtime Constant Pool)"></a>5. 运行时常量池 (Runtime Constant Pool)</h3><ul><li><strong>功能</strong>: 运行时常量池是方法区的一部分，用于存储类、字段、方法、字符串等常量。</li><li><strong>用途</strong>: 支持类的常量值和字符串常量。</li><li><strong>大小</strong>: 由 JVM 管理，通常不需要手动设置。</li></ul><h3 id="6-直接内存-Direct-Memory"><a href="#6-直接内存-Direct-Memory" class="headerlink" title="6. 直接内存 (Direct Memory)"></a>6. 直接内存 (Direct Memory)</h3><ul><li><strong>功能</strong>: 直接内存是 JVM 之外的内存区域，用于存储与 I/O 操作相关的数据，如 NIO 的缓冲区。</li><li><strong>用途</strong>: 提供与操作系统的直接交互，减少内存复制，提高性能。</li><li><strong>大小</strong>: 可以通过 <code>-XX:MaxDirectMemorySize</code> 参数设置最大直接内存大小。</li></ul><h2 id="堆外内存"><a href="#堆外内存" class="headerlink" title="堆外内存"></a>堆外内存</h2><p>堆外内存（Off-Heap Memory）指的是不属于 Java 堆内存的一块内存区域。与堆内存不同，堆外内存是由应用程序直接管理的，并且不受到 Java 垃圾回收器的管理。堆外内存通常用于存储需要大量内存或需要频繁访问的高性能数据，例如大缓存、直接内存缓冲区等。</p><p>Java NIO 提供了 <code>ByteBuffer</code> 类，可以通过 <code>ByteBuffer.allocateDirect()</code> 方法分配直接内存。这种方法分配的内存不受 Java 堆管理，并且可以直接用于 I/O 操作。</p><h2 id="字节码技术"><a href="#字节码技术" class="headerlink" title="字节码技术"></a>字节码技术</h2><p>JVMTI？JVMTI 全程 JVM Tool Interface，它是Java虚拟机定义的一个开发和监控JVM使用的程序接口(programing interface),通过该接口可以探查JVM内部的一些运行状态，甚至控制JVM应用程序的执行。</p><p>修改字节码可以使用ASM库或 Javassist，还有动态代理中使用cglib也是一种字节码技术，但底层依旧使用的ASM库。</p><h2 id="平常会写单侧-UT-吗"><a href="#平常会写单侧-UT-吗" class="headerlink" title="平常会写单侧(UT)吗"></a>平常会写单侧(UT)吗</h2><p>junit，Mockito</p><h2 id="SPI机制"><a href="#SPI机制" class="headerlink" title="SPI机制"></a>SPI机制</h2><p>SPI 即 Service Provider Interface ，字面意思就是：“服务提供者的接口”，我的理解是：专门提供给服务提供者或者扩展框架功能的开发者去使用的一个接口。</p><p>SPI 将服务接口和具体的服务实现分离开来，将服务调用方和服务实现者解耦，能够提升程序的扩展性、可维护性。修改或者替换服务实现并不需要修改调用方。</p><p>很多框架都使用了 Java 的 SPI 机制，比如：Spring 框架、数据库加载驱动、日志接口、以及 Dubbo 的扩展实现等等。</p><p>通过 SPI 机制能够大大地提高接口设计的灵活性，但是 SPI 机制也存在一些缺点，比如：</p><ul><li>需要遍历加载所有的实现类，不能做到按需加载，这样效率还是相对较低的。</li><li>当多个 <code>ServiceLoader</code> 同时 <code>load</code> 时，会有并发问题。</li></ul><h2 id="Redis用过哪些数据结构"><a href="#Redis用过哪些数据结构" class="headerlink" title="Redis用过哪些数据结构"></a>Redis用过哪些数据结构</h2><h3 id="1-字符串-String"><a href="#1-字符串-String" class="headerlink" title="1.字符串 (String)"></a>1.<strong>字符串 (String)</strong></h3><ul><li><strong>描述</strong>: 最基本的数据类型，可以存储任意形式的数据，例如文本、数字、二进制数据等。</li><li>操作<ul><li><code>SET key value</code>: 设置键的值。</li><li><code>GET key</code>: 获取键的值。</li><li><code>INCR key</code>: 对键的值进行递增操作。</li><li><code>APPEND key value</code>: 在现有值的末尾追加字符串。</li></ul></li></ul><h3 id="2-哈希-Hash"><a href="#2-哈希-Hash" class="headerlink" title="2. 哈希 (Hash)"></a>2. <strong>哈希 (Hash)</strong></h3><ul><li><strong>描述</strong>: 存储键值对的集合，适合存储对象的属性数据。</li><li>操作<ul><li><code>HSET key field value</code>: 设置哈希表中的字段值。</li><li><code>HGET key field</code>: 获取哈希表中指定字段的值。</li><li><code>HGETALL key</code>: 获取哈希表中所有字段及其值。</li><li><code>HDEL key field</code>: 删除哈希表中的指定字段。</li></ul></li></ul><h3 id="3-列表-List"><a href="#3-列表-List" class="headerlink" title="3. 列表 (List)"></a>3. <strong>列表 (List)</strong></h3><ul><li><strong>描述</strong>: 有序的字符串集合，可以在头部和尾部添加元素，适合用作队列或栈。</li><li>操作<ul><li><code>LPUSH key value</code>: 将值插入到列表的左侧。</li><li><code>RPUSH key value</code>: 将值插入到列表的右侧。</li><li><code>LPOP key</code>: 移除并获取列表的左侧第一个元素。</li><li><code>RPOP key</code>: 移除并获取列表的右侧第一个元素。</li><li><code>LRANGE key start stop</code>: 获取列表中指定范围的元素。</li></ul></li></ul><h3 id="4-集合-Set"><a href="#4-集合-Set" class="headerlink" title="4. 集合 (Set)"></a>4. <strong>集合 (Set)</strong></h3><ul><li><strong>描述</strong>: 无序的字符串集合，集合中的元素是唯一的。</li><li>操作<ul><li><code>SADD key member</code>: 向集合添加元素。</li><li><code>SREM key member</code>: 从集合中移除元素。</li><li><code>SMEMBERS key</code>: 获取集合中的所有元素。</li><li><code>SISMEMBER key member</code>: 检查元素是否存在于集合中。</li></ul></li></ul><h3 id="5-有序集合-Sorted-Set"><a href="#5-有序集合-Sorted-Set" class="headerlink" title="5. 有序集合 (Sorted Set)"></a>5. <strong>有序集合 (Sorted Set)</strong></h3><ul><li><strong>描述</strong>: 类似于集合，但每个元素都关联一个浮点数的分数。元素按分数排序，并且元素是唯一的。</li><li>操作<ul><li><code>ZADD key score member</code>: 向有序集合添加元素和分数。</li><li><code>ZRANGE key start stop [WITHSCORES]</code>: 获取有序集合中指定范围的元素。</li><li><code>ZREM key member</code>: 从有序集合中移除元素。</li><li><code>ZSCORE key member</code>: 获取元素的分数。</li></ul></li></ul><h3 id="6-位图-Bitmap"><a href="#6-位图-Bitmap" class="headerlink" title="6. 位图 (Bitmap)"></a>6. <strong>位图 (Bitmap)</strong></h3><ul><li><strong>描述</strong>: 用于处理大量的二进制位，通常用于统计、标记等。</li><li>操作<ul><li><code>SETBIT key offset value</code>: 设置位图中指定偏移量的位。</li><li><code>GETBIT key offset</code>: 获取位图中指定偏移量的位。</li><li><code>BITCOUNT key [start end]</code>: 计算位图中设置为1的位的数量。</li></ul></li></ul><h3 id="7-超日志-HyperLogLog"><a href="#7-超日志-HyperLogLog" class="headerlink" title="7. 超日志 (HyperLogLog)"></a>7. <strong>超日志 (HyperLogLog)</strong></h3><ul><li><strong>描述</strong>: 用于估算唯一元素的数量，具有固定的内存占用，不受数据量大小的影响。</li><li>操作<ul><li><code>PFADD key element [element ...]</code>: 将元素添加到 HyperLogLog 中。</li><li><code>PFCOUNT key [key ...]</code>: 获取 HyperLogLog 的基数估算值。</li></ul></li></ul><h3 id="8-地理位置-Geospatial"><a href="#8-地理位置-Geospatial" class="headerlink" title="8. 地理位置 (Geospatial)"></a>8. <strong>地理位置 (Geospatial)</strong></h3><ul><li><strong>描述</strong>: 用于存储地理位置数据和进行地理空间操作。</li><li>操作<ul><li><code>GEOADD key longitude latitude member</code>: 添加地理位置数据。</li><li><code>GEOPOS key member [member ...]</code>: 获取地理位置的坐标。</li><li><code>GEORADIUS key longitude latitude radius unit [WITHDIST|WITHCOORD|WITHHASH]</code>: 查询地理位置数据。</li></ul></li></ul><h3 id="9-流-Stream"><a href="#9-流-Stream" class="headerlink" title="9. 流 (Stream)"></a>9. <strong>流 (Stream)</strong></h3><ul><li><strong>描述</strong>: 用于处理日志数据和消息队列，支持高效的消息流处理。</li><li>操作<ul><li><code>XADD key id field value [field value ...]</code>: 向流中添加一条记录。</li><li><code>XREAD [BLOCK milliseconds] [COUNT count] STREAMS key [key ...]</code>: 从流中读取数据。</li><li><code>XDEL key id [id ...]</code>: 从流中删除一条记录。</li></ul></li></ul><h3 id="10-事务-Transaction"><a href="#10-事务-Transaction" class="headerlink" title="10. 事务 (Transaction)"></a>10. <strong>事务 (Transaction)</strong></h3><ul><li><strong>描述</strong>: 允许将多个 Redis 命令打包成一个事务并一起执行，保证事务的原子性。</li><li>操作<ul><li><code>MULTI</code>: 开始事务。</li><li><code>EXEC</code>: 执行事务中的所有命令。</li><li><code>DISCARD</code>: 放弃事务，清除事务中的所有命令。</li></ul></li></ul><h3 id="11-发布-订阅-Pub-Sub"><a href="#11-发布-订阅-Pub-Sub" class="headerlink" title="11. 发布/订阅 (Pub/Sub)"></a>11. <strong>发布/订阅 (Pub/Sub)</strong></h3><ul><li><strong>描述</strong>: 实现消息的发布和订阅，允许消息在不同客户端之间传递。</li><li>操作<ul><li><code>PUBLISH channel message</code>: 向频道发布消息。</li><li><code>SUBSCRIBE channel [channel ...]</code>: 订阅频道，接收消息。</li><li><code>UNSUBSCRIBE [channel [channel ...]]</code>: 取消订阅频道。</li></ul></li></ul><h2 id="sorted-set底层的数据结构"><a href="#sorted-set底层的数据结构" class="headerlink" title="sorted set底层的数据结构"></a>sorted set底层的数据结构</h2><p>我回答了最大堆最小堆，笑死。</p><p>实际上是调表和哈希表。</p><h4 id="跳表-Skip-List"><a href="#跳表-Skip-List" class="headerlink" title="跳表 (Skip List)"></a><strong>跳表 (Skip List)</strong></h4><ul><li><strong>描述</strong>: 跳表是一种基于概率的数据结构，它是一种带有多级索引的链表，用于在有序序列中快速查找、插入和删除元素。跳表可以视为一种分层的链表，每一层都是一个有序的链表。</li><li><strong>作用</strong>: 在 Redis 的有序集合中，跳表用于存储集合中的元素及其分数，并支持快速的排序操作。</li><li>优势<ul><li><strong>平均时间复杂度</strong>: 跳表的查找、插入和删除操作平均时间复杂度为 O(log N)，其中 N 是跳表中的元素数量。</li><li><strong>空间复杂度</strong>: 跳表的空间复杂度为 O(N)，在存储多层索引的情况下略高于线性链表。</li></ul></li></ul><h2 id="反问：岗位职责，技术团队架构"><a href="#反问：岗位职责，技术团队架构" class="headerlink" title="反问：岗位职责，技术团队架构"></a>反问：岗位职责，技术团队架构</h2><p>人家做BFF的，其实就是聚合层。负责前后端的对接，将后端多个服务的数据整合返回给前端。</p><h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>复盘完，今天是7月31号，是我离职的第57天，心中苦闷的心情又增加了，很难受。一个是对未来的迷茫，另一个是对自己找工作的苦恼。有人问我后悔当初离职吗，我想我既不后悔也有点后悔，一是每当想到原来的工作我就难以接受，后悔也是源自于自己找工作一个月（实际上应该是3周左右）没有收获的后悔。但是综合来说我并没有后悔当初选择离职，就是头铁哈哈哈哈。</p><p>26年人生至今令我感到后悔的事情其实屈指可数，我一直觉得既然做出了选择那么就为自己的选择买单，这是一个成年人应该有的责任，而不是事后去后悔。</p><p>与之相对的，是我在6月11号写的离职感悟，那时候我写到自己的压力还可以，但是我并不知道后面会发生什么，也没经历过离职，也不知道原来重新找工作真的很难很累，更不知道直接离职再找工作是多么艰辛，不过有一说一，让我在职去寻找工作那岂不是更难。</p><p>现在压力逐渐上来了，虽然我并不是特别缺钱，但是一是长时间没工作不太习惯（但是挺爽，也会写点代码），二是很多HR也都会提前问是不是离职了，离职原因是啥，三是听前同事说某某公司又降薪了，其实也是侧面反馈环境不太好，岗位越来越少。</p><p>心态已经有点不正了，我也总怀疑从上班的时候我就已经抑郁了，如今很可能加重了。但是人生不应该只有上班，前领导也劝我要不去考个研，实在不行明年可以再回来，我没回复他，我知道我不能像某个同事那样，出去了然后再二进宫，我拉不下脸。即便很难我也会默默撑下去。</p><p>机会总会有的，我相信。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;今天面试不咋顺利。&lt;/p&gt;
&lt;p&gt;面试完后得知一个同事去了百度，我既替他高兴，但我自己也很难受。我面试了好多家都不咋顺利，他一说他base只
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="随想" scheme="https://re0.top/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="面经" scheme="https://re0.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>【架构之路12】es-k8s搭建</title>
    <link href="https://re0.top/2024/07/27/devops12/"/>
    <id>https://re0.top/2024/07/27/devops12/</id>
    <published>2024-07-27T06:30:00.000Z</published>
    <updated>2024-07-27T06:47:16.018Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>遥想一年前，搭建es时还需要先挂载卷然后hung住容器拷贝配置文件，后面是自己做了镜像。</p><p>再到后面切换到k8s后，有了configMap搭建稍微简单了一些。</p><p>再到现在，由于要使用es做数据分析，决定搭建一个es节点测试使用。</p><p>翻看文档发现官方其实针对k8s有<a href="https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-deploy-eck.html">ECK</a>来辅助在k8s上搭建es集群。有点类似之前文章提到的tidb operator。</p><p>今天来快速搭建一个es和kibana.</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>分别创建CRDs和RBAC.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">kubectl</span> <span class="string">create</span> <span class="string">-f</span> <span class="string">https://download.elastic.co/downloads/eck/2.13.0/crds.yaml</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">https://download.elastic.co/downloads/eck/2.13.0/operator.yaml</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">customresourcedefinition.apiextensions.k8s.io/agents.agent.k8s.elastic.co created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/apmservers.apm.k8s.elastic.co created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/beats.beat.k8s.elastic.co created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/elasticmapsservers.maps.k8s.elastic.co created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/elasticsearches.elasticsearch.k8s.elastic.co created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/enterprisesearches.enterprisesearch.k8s.elastic.co created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/kibanas.kibana.k8s.elastic.co created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/logstashes.logstash.k8s.elastic.co created</span><br></pre></td></tr></table></figure><h2 id="es搭建"><a href="#es搭建" class="headerlink" title="es搭建"></a>es搭建</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">elasticsearch.k8s.elastic.co/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Elasticsearch</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">es</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">elastic-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">8.14</span><span class="number">.3</span></span><br><span class="line">  <span class="attr">nodeSets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">count:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">node.store.allow_mmap:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">volumeClaimTemplates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">elasticsearch-data</span></span><br><span class="line">      <span class="attr">spec:</span></span><br><span class="line">        <span class="attr">accessModes:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">storage:</span> <span class="string">20Gi</span></span><br><span class="line">        <span class="attr">storageClassName:</span> <span class="string">csi-rbd-sc</span></span><br></pre></td></tr></table></figure><p>定义也十分简单，之后apply即可。</p><p>定义一个service</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">es-http</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">elastic-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">9200</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">9200</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">common.k8s.elastic.co/type:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">elasticsearch.k8s.elastic.co/cluster-name:</span> <span class="string">es</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br></pre></td></tr></table></figure><p>获取下账号密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get secret es-es-elastic-user -n elastic-system -o go-template=&#x27;&#123;&#123;.data.elastic | base64decode&#125;&#125;&#x27;</span><br></pre></td></tr></table></figure><p>访问下应该是正常的。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;es-es-default-0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cluster_name&quot;</span>: <span class="string">&quot;es&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cluster_uuid&quot;</span>: <span class="string">&quot;sxMRMy15QACkzxpSPeTlzA&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;number&quot;</span>: <span class="string">&quot;8.14.3&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build_flavor&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build_type&quot;</span>: <span class="string">&quot;docker&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build_hash&quot;</span>: <span class="string">&quot;d55f984299e0e88dee72ebd8255f7ff130859ad0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build_date&quot;</span>: <span class="string">&quot;2024-07-07T22:04:49.882652950Z&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build_snapshot&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;lucene_version&quot;</span>: <span class="string">&quot;9.10.0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;minimum_wire_compatibility_version&quot;</span>: <span class="string">&quot;7.17.0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;minimum_index_compatibility_version&quot;</span>: <span class="string">&quot;7.0.0&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;tagline&quot;</span>: <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="kibana"><a href="#kibana" class="headerlink" title="kibana"></a>kibana</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kibana.k8s.elastic.co/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Kibana</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kibana</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">elastic-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">8.14</span><span class="number">.3</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">elasticsearchRef:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">es</span></span><br><span class="line">  <span class="attr">http:</span></span><br><span class="line">    <span class="attr">service:</span></span><br><span class="line">      <span class="attr">spec:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">5601</span></span><br><span class="line">            <span class="attr">targetPort:</span> <span class="number">5601</span></span><br><span class="line">    <span class="attr">tls:</span></span><br><span class="line">      <span class="attr">selfSignedCertificate:</span></span><br><span class="line">        <span class="attr">disabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>这个没什么难度，直接就起来了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>使用ECK十分快速的在k8s上启动了一个es集群，如果后续需要扩容的话，直接修改副本的数量即可，十分简单。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;遥想一年前，搭建es时还需要先挂载卷然后hung住容器拷贝配置文件，后面是自己做了镜像。&lt;/p&gt;
&lt;p&gt;再到后面切换到k8s后，有了conf
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="架构" scheme="https://re0.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="运维" scheme="https://re0.top/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="从0.5开始的运维架构之路" scheme="https://re0.top/tags/%E4%BB%8E0-5%E5%BC%80%E5%A7%8B%E7%9A%84%E8%BF%90%E7%BB%B4%E6%9E%B6%E6%9E%84%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>【架构之路11】sa-token框架上手体验</title>
    <link href="https://re0.top/2024/07/26/devops11/"/>
    <id>https://re0.top/2024/07/26/devops11/</id>
    <published>2024-07-26T06:30:00.000Z</published>
    <updated>2024-07-26T06:34:07.093Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>看见了一个权限框架Sa-Token，以快速上手，轻量为优点，快速完成登录认证，权限认证等功能。</p><p>这篇文章来上手体验下这个框架，并讲讲分布式情况下如何使用。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建一个springboot3项目吧。</p><p>pom文件如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        这里需要使用springboot3的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.dev33<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sa-token-spring-boot3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.38.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们用0配置来编写这个项目</p><h2 id="登录认证"><a href="#登录认证" class="headerlink" title="登录认证"></a>登录认证</h2><p>编写对应的service和controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doLogin</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;zer0e&quot;</span>.equals(username)) &#123;</span><br><span class="line">            <span class="comment">// 这里是用户id</span></span><br><span class="line">            StpUtil.login(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            StpUtil.login(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doLogin</span><span class="params">(<span class="meta">@RequestParam</span> String username,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="meta">@RequestParam</span> String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.doLogin(username, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/info&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StpUtil.getTokenInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里由于没有接入数据库，所以service中没有校验用户名密码，问题不大。</p><p>login接口使用get是为了演示。</p><p>此时先访问<code>http://127.0.0.1:8080/login?username=zer0e&amp;password=zer0e</code></p><p>然后访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/info</span><br><span class="line">&#123;</span><br><span class="line">    &quot;tokenName&quot;: &quot;satoken&quot;,</span><br><span class="line">    &quot;tokenValue&quot;: &quot;deb45ea8-3498-4837-88bf-9dba5e2e6b7e&quot;,</span><br><span class="line">    &quot;isLogin&quot;: true,</span><br><span class="line">    &quot;loginId&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;loginType&quot;: &quot;login&quot;,</span><br><span class="line">    &quot;tokenTimeout&quot;: 2591993,</span><br><span class="line">    &quot;sessionTimeout&quot;: 2591993,</span><br><span class="line">    &quot;tokenSessionTimeout&quot;: -2,</span><br><span class="line">    &quot;tokenActiveTimeout&quot;: -1,</span><br><span class="line">    &quot;loginDevice&quot;: &quot;default-device&quot;,</span><br><span class="line">    &quot;tag&quot;: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现正常登录，并且获取登录信息也是正常的。</p><h2 id="权限和角色"><a href="#权限和角色" class="headerlink" title="权限和角色"></a>权限和角色</h2><p>光登录还不行，像spring security框架我们可以在登录时获取角色和权限以达到检验的目的。</p><p>sa-token也可以做到。</p><p>只要我们注册一个实现<code>StpInterface</code>接口的bean 再加上一点配置即可！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StpInterfaceImpl</span> <span class="keyword">implements</span> <span class="title">StpInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getPermissionList</span><span class="params">(Object loginId, String loginType)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取权限列表：&quot;</span> + loginId);</span><br><span class="line">        <span class="keyword">if</span> (loginId != <span class="keyword">null</span> &amp;&amp; loginId.equals(<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.asList(<span class="string">&quot;read&quot;</span>, <span class="string">&quot;write&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> List.of(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getRoleList</span><span class="params">(Object loginId, String loginType)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取角色列表：&quot;</span> + loginId);</span><br><span class="line">        <span class="keyword">if</span> (loginId != <span class="keyword">null</span> &amp;&amp; loginId.equals(<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> List.of(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> List.of(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaTokenConfigure</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 注册 Sa-Token 拦截器，打开注解式鉴权功能 </span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> SaInterceptor()).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们把SaInterceptor注册到所有路由上。</p><p>这里为了方便都是采用硬编码，实际情况下是去数据库查询，这里不再赘述。</p><p>增加三个权限相关的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/admin&quot;)</span></span><br><span class="line"><span class="meta">@SaCheckRole(&quot;admin&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">admin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/read&quot;)</span></span><br><span class="line"><span class="meta">@SaCheckPermission(&quot;read&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/write&quot;)</span></span><br><span class="line"><span class="meta">@SaCheckPermission(&quot;write&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先登录zer0e，然后访问<code>/admin</code> <code>/write</code> <code>/read</code>均可以访问。</p><p>然后登录其他用户，发现除了<code>/read</code>，其他接口都是500。因为我们没有做全局异常处理，所以抛出了500异常，问题不大。</p><p>如果我们需要在service层做权限校验，那么我们必须引入aop依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.dev33<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sa-token-spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.38.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="分布式环境"><a href="#分布式环境" class="headerlink" title="分布式环境"></a>分布式环境</h2><p>默认情况下，sa框架使用内存进行token存储，对于分布式环境下不太友好，好在sa提供了redis集成，我们加上即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.dev33<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sa-token-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.38.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 也可以选择jackson序列化</span></span><br><span class="line"><span class="comment">&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">    &lt;groupId&gt;cn.dev33&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">    &lt;artifactId&gt;sa-token-redis-jackson&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">    &lt;version&gt;1.38.0&lt;/version&gt;</span></span><br><span class="line"><span class="comment">&lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">--!&gt;</span></span><br></pre></td></tr></table></figure><p>由于我们创建项目时就引入了redis，因此我们这里直接进行配置即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sa-token-demo</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><p>基本上不用动东西，此时再次登录后发现token会存储在redis中，重启项目后原先token也可以使用。</p><h2 id="角色权限缓存"><a href="#角色权限缓存" class="headerlink" title="角色权限缓存"></a>角色权限缓存</h2><p>从刚才的权限例子我们可以知道，每次访问接口时，sa框架都会去获取用户id所对应的角色或权限（取决于你做了什么校验）。这对数据库的压力是比较大的，因此必须做缓存。</p><p>看了官方文档，其实是可以把一部分数据一起缓存的。这里我直接上代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getRoleList</span><span class="params">(Object loginId, String loginType)</span> </span>&#123;</span><br><span class="line">    SaSession session = StpUtil.getSessionByLoginId(loginId);</span><br><span class="line">    <span class="keyword">return</span> session.get(<span class="string">&quot;roles&quot;</span>, () -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;从数据库获取角色列表：&quot;</span> + loginId); </span><br><span class="line">        <span class="keyword">if</span> (loginId != <span class="keyword">null</span> &amp;&amp; loginId.equals(<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> List.of(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> List.of(<span class="string">&quot;user&quot;</span>); </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SaSession对象其实就是一个缓存，我们不必自己对接redisTemplate。至于权限也是一样的，但是这里官方做了一个解释，大概意思就是不要直接缓存账号的权限，而是通过获取角色再获取权限，我觉得说的也没毛病，因为你一旦角色和权限的对应关系更改后，权限缓存需要大面积失效，而且还不知道要失效哪些。</p><blockquote><h5 id="疑问：为什么不直接缓存-账号id-gt-权限列表-的关系，而是-账号id-gt-角色id-gt-权限列表-？"><a href="#疑问：为什么不直接缓存-账号id-gt-权限列表-的关系，而是-账号id-gt-角色id-gt-权限列表-？" class="headerlink" title="疑问：为什么不直接缓存 [账号id-&gt;权限列表\]的关系，而是 [账号id -&gt; 角色id -&gt; 权限列表]？"></a>疑问：为什么不直接缓存 <code>[账号id-&gt;权限列表\]</code>的关系，而是 <code>[账号id -&gt; 角色id -&gt; 权限列表]</code>？</h5><p>答：<code>[账号id-&gt;权限列表]</code>的缓存方式虽然更加直接粗暴，却有一个严重的问题：</p><ul><li>通常我们系统的权限架构是RBAC模型：权限与用户没有直接的关系，而是：用户拥有指定的角色，角色再拥有指定的权限</li><li>而这种’拥有关系’是动态的，是可以随时修改的，一旦我们修改了它们的对应关系，便要同步修改或清除对应的缓存数据</li></ul><p>现在假设如下业务场景：我们系统中有十万个账号属于同一个角色，当我们变动这个角色的权限时，难道我们要同时清除这十万个账号的缓存信息吗？ 这显然是一个不合理的操作，同一时间缓存大量清除容易引起Redis的缓存雪崩</p><p>而当我们采用 <code>[账号id -&gt; 角色id -&gt; 权限列表]</code> 的缓存模型时，则只需要清除或修改 <code>[角色id -&gt; 权限列表]</code> 一条缓存即可</p><p>一言以蔽之：权限的缓存模型需要跟着权限模型走，角色缓存亦然</p></blockquote><p>因此官网的做法是获取用户的角色，然后以角色id为key获取权限缓存，这样权限有更改时，我们只要失效对应的角色id的key即可，即<code>roleSession.clear()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getPermissionList</span><span class="params">(Object loginId, String loginType)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1. 声明权限码集合</span></span><br><span class="line">    List&lt;String&gt; permissionList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 遍历角色列表，查询拥有的权限码 </span></span><br><span class="line">    <span class="keyword">for</span> (String roleId : getRoleList(loginId, loginType)) &#123;</span><br><span class="line">        SaSession roleSession = SaSessionCustomUtil.getSessionById(<span class="string">&quot;role-&quot;</span> + roleId);</span><br><span class="line">        List&lt;String&gt; list = roleSession.get(<span class="string">&quot;Permission_List&quot;</span>, () -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> ...;     <span class="comment">// 从数据库查询这个角色所拥有的权限列表  </span></span><br><span class="line">        &#125;);</span><br><span class="line">        permissionList.addAll(list);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 返回权限码集合</span></span><br><span class="line">    <span class="keyword">return</span> permissionList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>sa-token相对于spring security轻量了不少，使用上很简单，如果要配置权限校验的路径的话可以在<code>new SaInterceptor</code>中来指定。</p><p>此外它还有很多功能，比如踢人下线，多端登录等功能。甚至可以完全放弃session模式，改用jwt去存储token。</p><p>从今天的学习可以发现入门真的很快。如果要快速开发，那么sa-token是一个不错的选择。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;看见了一个权限框架Sa-Token，以快速上手，轻量为优点，快速完成登录认证，权限认证等功能。&lt;/p&gt;
&lt;p&gt;这篇文章来上手体验下这个框架，
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="架构" scheme="https://re0.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="运维" scheme="https://re0.top/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="从0.5开始的运维架构之路" scheme="https://re0.top/tags/%E4%BB%8E0-5%E5%BC%80%E5%A7%8B%E7%9A%84%E8%BF%90%E7%BB%B4%E6%9E%B6%E6%9E%84%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>【架构之路10】sentinel限流上手</title>
    <link href="https://re0.top/2024/07/25/devops10/"/>
    <id>https://re0.top/2024/07/25/devops10/</id>
    <published>2024-07-25T13:30:00.000Z</published>
    <updated>2024-07-26T05:07:30.090Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇讲讲sentinel限流。</p><p>之前我们内部系统其实没有限流这个概念，我个人尝试过在网关层面直接做请求限制，没有在服务层尝试过。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>sentinel是阿里的产品，目的是为了限制服务的流量来达到保护应用的目的。</p><h2 id="sentinel功能"><a href="#sentinel功能" class="headerlink" title="sentinel功能"></a>sentinel功能</h2><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><p>流量控制有以下几个角度:</p><ul><li>资源的调用关系，例如资源的调用链路，资源和资源之间的关系；</li><li>运行指标，例如 QPS、线程池、系统负载等；</li><li>控制的效果，例如直接限流、冷启动、排队等。</li></ul><h3 id="熔断降级"><a href="#熔断降级" class="headerlink" title="熔断降级"></a>熔断降级</h3><p>当调用链路中某个资源出现不稳定，例如，表现为 timeout，异常比例升高的时候，则对这个资源的调用进行限制，并让请求快速失败，避免影响到其它的资源，最终产生雪崩的效果。</p><p>Hystrix通过<a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works#benefits-of-thread-pools">线程池</a>的方式，来对依赖(在sentinel的概念中对应资源)进行了隔离。这样做的好处是资源和资源之间做到了最彻底的隔离。缺点是除了增加了线程切换的成本，还需要预先给各个资源做线程池大小的分配。</p><p>Sentinel则是：</p><ul><li>通过并发线程数进行限制</li></ul><p>和资源池隔离的方法不同，Sentinel 通过限制资源并发线程的数量，来减少不稳定资源对其它资源的影响。这样不但没有线程切换的损耗，也不需要您预先分配线程池的大小。当某个资源出现不稳定的情况下，例如响应时间变长，对资源的直接影响就是会造成线程数的逐步堆积。当线程数在特定资源上堆积到一定的数量之后，对该资源的新请求就会被拒绝。堆积的线程完成任务后才开始继续接收请求。</p><ul><li>通过响应时间对资源进行降级</li></ul><p>除了对并发线程数进行控制以外，Sentinel 还可以通过响应时间来快速降级不稳定的资源。当依赖的资源出现响应时间过长后，所有对该资源的访问都会被直接拒绝，直到过了指定的时间窗口之后才重新恢复。</p><h3 id="系统负载保护"><a href="#系统负载保护" class="headerlink" title="系统负载保护"></a>系统负载保护</h3><blockquote><p>Sentinel 同时提供<a href="https://sentinelguard.io/zh-cn/docs/system-adaptive-protection.html">系统维度的自适应保护能力</a>。防止雪崩，是系统防护中重要的一环。当系统负载较高的时候，如果还持续让请求进入，可能会导致系统崩溃，无法响应。在集群环境下，网络负载均衡会把本应这台机器承载的流量转发到其它的机器上去。如果这个时候其它的机器也处在一个边缘状态的时候，这个增加的流量就会导致这台机器也崩溃，最后导致整个集群不可用。</p><p>针对这个情况，Sentinel 提供了对应的保护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请求。</p></blockquote><p>简单来说就是可以根据系统的某些指标，如CPU使用情况，RT，QPS等数据限制请求。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>sentinel的使用也是十分简单，sentinel提供dashboard服务供限流服务接入，我们可以通过dashboard快速下发规则给应用，实现界面化管理。</p><p>先<a href="https://github.com/alibaba/Sentinel/releases">下载dashboard</a>，启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard-1.8.8.jar</span><br></pre></td></tr></table></figure><p>这里采用springCloudAlibaba快速接入。</p><p>pom文件依赖如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.6.13<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud-alibaba.version</span>&gt;</span>2021.0.5.0<span class="tag">&lt;/<span class="name">spring-cloud-alibaba.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud-alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>start.aliyun.com</code>构建的springboot程序会自动生成demo文件，这里我们手动写下。</p><h3 id="流控"><a href="#流控" class="headerlink" title="流控"></a>流控</h3><p>先写配置，用于在触发sentinel流控时显示的返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SentinelConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BlockExceptionHandler <span class="title">sentinelBlockExceptionHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (request, response, e) -&gt; &#123;</span><br><span class="line">            response.setStatus(<span class="number">429</span>);</span><br><span class="line"></span><br><span class="line">            PrintWriter out = response.getWriter();</span><br><span class="line">            out.print(<span class="string">&quot;Oops, blocked by Sentinel: &quot;</span> + e.getClass().getSimpleName());</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;UserService#getUserNameById&quot;, defaultFallback = &quot;getUserFallback&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserNameById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;default user&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;get user fall back&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们讲讲<code>@SentinelResource</code>注解。</p><p>注意这个注解也采用aop，所以private方法不支持。</p><p>这个注解用于定义资源，并提供可选的异常处理和 fallback 配置项。</p><blockquote><p><code>@SentinelResource</code> 注解包含以下属性：</p><ul><li><code>value</code>：资源名称，必需项（不能为空）</li><li><code>entryType</code>：entry 类型，可选项（默认为 <code>EntryType.OUT</code>）</li><li><code>blockHandler</code> / <code>blockHandlerClass</code>: <code>blockHandler</code> 对应处理 <code>BlockException</code> 的函数名称，可选项。blockHandler 函数访问范围需要是 <code>public</code>，返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为 <code>BlockException</code>。blockHandler 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>blockHandlerClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 static 函数，否则无法解析。</li><li><code>fallback</code>：fallback 函数名称，可选项，用于在抛出异常的时候提供 fallback 处理逻辑。fallback 函数可以针对所有类型的异常（除了exceptionsToIgnore里面排除掉的异常类型）进行处理。fallback 函数签名和位置要求：<ul><li>返回值类型必须与原函数返回值类型一致；</li><li>方法参数列表需要和原函数一致，或者可以额外多一个 <code>Throwable</code> 类型的参数用于接收对应的异常。</li><li>fallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 static 函数，否则无法解析。</li></ul></li><li><code>defaultFallback</code>（since 1.6.0）：默认的 fallback 函数名称，可选项，通常用于通用的 fallback 逻辑（即可以用于很多服务或方法）。默认 fallback 函数可以针对所以类型的异常（除了exceptionsToIgnore里面排除掉的异常类型）进行处理。若同时配置了 fallback 和 defaultFallback，则只有 fallback 会生效。defaultFallback 函数签名要求：<ul><li>返回值类型必须与原函数返回值类型一致；</li><li>方法参数列表需要为空，或者可以额外多一个 <code>Throwable</code> 类型的参数用于接收对应的异常。</li><li>defaultFallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 static 函数，否则无法解析。</li></ul></li><li><code>exceptionsToIgnore</code>（since 1.6.0）：用于指定哪些异常被排除掉，不会计入异常统计中，也不会进入 fallback 逻辑中，而是会原样抛出。</li></ul><p>若 blockHandler 和 fallback 都进行了配置，则被限流降级而抛出 <code>BlockException</code> 时只会进入 <code>blockHandler</code> 处理逻辑。若未配置 <code>blockHandler</code>、<code>fallback</code> 和 <code>defaultFallback</code>，则被限流降级时会将 <code>BlockException</code> <strong>直接抛出</strong>。</p></blockquote><p>其实核心参数就两个，value和defaultFallback，一个用于定义资源，另一个配置默认的失败方法。</p><p>注意这里getUserFallBack的方法参数为空或者接收一个Throwable参数。</p><p>接下来写controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserById</span><span class="params">(<span class="meta">@RequestParam</span> Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUserNameById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很简单的一个接口，我们调用看看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8081/user/get?id=1</span><br><span class="line">default user</span><br></pre></td></tr></table></figure><p>打开dashboard，账号密码都是sentinel。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080</span><br></pre></td></tr></table></figure><p>在左侧可以发现我们的应用，并且在实时监控中可以看到我们调用的接口和对应的资源。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">sentinel_spring_web_context</span></span><br><span class="line">    <span class="string">/user/get</span></span><br><span class="line">        <span class="string">UserService#getUserNameById</span></span><br></pre></td></tr></table></figure><p>我们可以对/user/get做限流，也可以对UserService#getUserNameById限流，因为他们都属于sentinel的资源。</p><p>这里我们对/user/get限流，qps单机阈值限制为1。新增完成后，多次访问接口，会出现<code>Oops, blocked by Sentinel: FlowException</code>的错误提示。</p><p>对UserService#getUserNameById做qps为1的限流，可以发现限流请求默认返回了get user fall back。</p><h3 id="熔断降级-1"><a href="#熔断降级-1" class="headerlink" title="熔断降级"></a>熔断降级</h3><p>在上面服务的基础上增加一个服务方法和接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SentinelResource(value = &quot;UserService#getUsers&quot;, defaultFallback = &quot;getUserFallback&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;all users&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/get-all&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.getUsers();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个接口上我们等待了一秒延迟。</p><p>我们在控制台对这个资源进行降级。为了能更直观看出来，最大RT填为500，最小请求数为1，比例阈值0.5(这个无所谓)，熔断时间10s。</p><p>保存之后我们请求接口，第一次请求成功，然后由于请求时间大于500ms，直接触发了熔断降级，此时再次请求就会执行默认的fallback方法。</p><h3 id="集群限流"><a href="#集群限流" class="headerlink" title="集群限流"></a>集群限流</h3><p>这个好理解，就是一组服务的最大请求量。配置起来也简单。</p><p>先copy一份idea的启动文件，然后加上vmoptions：<code>-Dserver.port=8082</code>再启动一个服务，在dashboard上就能看见应用为2/2.</p><p>选择集群流控，添加token-server，这个服务的作用是用于接收其他客户端的请求，判断请求是否通过。</p><p>然后将另一个服务变为token-client，填写最大qps即可完成集群流控。</p><p>当然我们在配置普通流控规则时，也可以勾选是否集群，选择均摊模式，填写阈值即可应用流控规则。原理也是请求前向token-server获取令牌实现集群限流。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>今天试用了一下sentinel，很多年前在我还在大学的时候就初步使用过。</p><p>今天遇到的坑是defaultFallback不生效，我在源码中调试了很久，包括源码是如何寻找到方法，最后调试才发现<code>name.equals(method.getName())</code>判断不通过，原来我在SentinelResource定义的是getUserFallback，而编写的方法是getUserFallBack，大小写错了！崩溃！</p><p>其他的话问题不是很大，还有一个就是规则的持久化了，这个的话得配合nacos做。官方demo和网上的案例我也看了，难度较小，只需要知道流控的规则json如何编写，然后引入对应的包监听nacos数据即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这篇讲讲sentinel限流。&lt;/p&gt;
&lt;p&gt;之前我们内部系统其实没有限流这个概念，我个人尝试过在网关层面直接做请求限制，没有在服务层尝试过
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="架构" scheme="https://re0.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="运维" scheme="https://re0.top/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="从0.5开始的运维架构之路" scheme="https://re0.top/tags/%E4%BB%8E0-5%E5%BC%80%E5%A7%8B%E7%9A%84%E8%BF%90%E7%BB%B4%E6%9E%B6%E6%9E%84%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>【架构之路9】flink-cdc学习与使用</title>
    <link href="https://re0.top/2024/07/24/devops9/"/>
    <id>https://re0.top/2024/07/24/devops9/</id>
    <published>2024-07-24T10:30:00.000Z</published>
    <updated>2024-07-24T14:00:19.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="随便聊聊"><a href="#随便聊聊" class="headerlink" title="随便聊聊"></a>随便聊聊</h1><p>今天是离职的50天，面试不咋顺利，昨晚也没睡好，有个离职的同事去日本玩了，不知道他是什么考虑。脱离工作久了舒服是确实舒服，但是找工作真的挺难的，不仅是投递，面试，复习，复盘，一环扣一环，而且还很累。</p><p>本来挺有把握的一场面试，结果大晚上查了一下发现面试不通过，也不知道啥原因，有一说一虽然我不一定会去，不过得知面试失效的消息打击还是比较大的，不知道是不是薪酬说高了。</p><p>离职还没有让家里人知道，把面试失败的消息跟老姐说后，她送了我一句话，此处不留爷，自有留爷处。我觉得说的太好了。</p><p>来看今天的flink-cdc的使用吧。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="flink-cdc介绍"><a href="#flink-cdc介绍" class="headerlink" title="flink-cdc介绍"></a>flink-cdc介绍</h2><p>CDC 是变更数据捕获（Change Data Capture）技术的缩写，它可以将源数据库（Source）的增量变动记录，同步到一个或多个数据目的（Sink）。在同步过程中，还可以对数据进行一定的处理，例如分组（GROUP BY）、多表的关联（JOIN）等。</p><p>一般情况下，我们使用CDC将数据库增量数据同步到不同的数据源中，比如ES, ClickHouse之类的。</p><p>通常来讲，CDC 分为<strong>主动查询</strong>和<strong>事件接收</strong>两种技术实现模式。</p><p>对于主动查询而言，通常会在数据源表的某个字段中，保存上次更新的时间戳或版本号等信息，然后下游通过不断的查询和与上次的记录做对比，来确定数据是否有变动，是否需要同步。这种方式优点是不涉及数据库底层特性，实现比较通用；缺点是要对业务表做改造，且实时性不高，不能确保跟踪到所有的变更记录，且持续的频繁查询对数据库的压力较大。</p><p>事件接收模式可以通过触发器（Trigger）或者日志（例如 Transaction log、Binary log、Write-ahead log 等）来实现。当数据源表发生变动时，会通过附加在表上的触发器或者 binlog 等途径，将操作记录下来。下游可以通过数据库底层的协议，订阅并消费这些事件，然后对数据库变动记录做重放，从而实现同步。这种方式的优点是实时性高，可以精确捕捉上游的各种变动；缺点是部署数据库的事件接收和解析器（例如 Debezium、Canal 等），有一定的学习和运维成本，对一些冷门的数据库支持不够。</p><p>Flink-cdc是由apache托管的开源项目，使用监听bin-log的方式获取增量数据，并且支持常用的数据库，例如mysql，mongodb，tidb等等。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>这里用docker容器快速启动一个mysql。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;mysql:8.0&#x27;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;MYSQL_ROOT_PASSWORD=root&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;3306:3306&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql:/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br></pre></td></tr></table></figure><p>容器启动后需要做点准备工作，修改mysql的时区。因为默认情况下cdc应用和mysql时区不一致的话，<del>可能会导致数据监听有延迟。</del>任务会一直在报错，无法正常监听。具体报错可以在webUI里看到。感兴趣可以不改mysql时区然后启动下flink-cdc试试。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;%time_zone%&#x27;;</span><br><span class="line">+------------------+--------+</span><br><span class="line">| Variable_name    | Value  |</span><br><span class="line">+------------------+--------+</span><br><span class="line">| system_time_zone | UTC    |</span><br><span class="line">| time_zone        | SYSTEM |</span><br><span class="line">+------------------+--------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; set persist time_zone=&#x27;+8:00&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &#x27;%time_zone%&#x27;;</span><br><span class="line">+------------------+--------+</span><br><span class="line">| Variable_name    | Value  |</span><br><span class="line">+------------------+--------+</span><br><span class="line">| system_time_zone | UTC    |</span><br><span class="line">| time_zone        | +08:00 |</span><br><span class="line">+------------------+--------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>创建一张测试表，再加点数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test.t_user</span><br><span class="line">(</span><br><span class="line">    id          <span class="type">int</span> auto_increment</span><br><span class="line">        <span class="keyword">primary</span> key,</span><br><span class="line">    name        <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    description <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.t_user (id, name, description) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.t_user (id, name, description) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;fuck&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.t_user (id, name, description) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;moon&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Talk is cheap. Show me the code.</p><p>这里我们采用maven构建一个java程序，使用flink-cdc监听mysql变化。</p><p>pom文件依赖如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.zer0e<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-cdc-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    flink 基础包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-base<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--flink mysql连接器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ververica<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-mysql-cdc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--flink data stream支持 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-streaming-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--flink java客户端--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web界面支持--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-runtime-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用于读写批处理和流水表--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-table-runtime<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--    日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在resource目录下新建logback.xml，否则日志会有debug级别。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后我们创建出一个MySink作为监听数据的处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.zer0e;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.sink.RichSinkFunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySink</span> <span class="keyword">extends</span> <span class="title">RichSinkFunction</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(String value, Context context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mysql cdc: &quot;</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主程序入口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.zer0e;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ververica.cdc.connectors.mysql.source.MySqlSource;</span><br><span class="line"><span class="keyword">import</span> com.ververica.cdc.debezium.JsonDebeziumDeserializationSchema;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.eventtime.WatermarkStrategy;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.RestOptions;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CdcExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MySqlSource&lt;String&gt; source = MySqlSource.&lt;String&gt;builder()</span><br><span class="line">                .hostname(<span class="string">&quot;localhost&quot;</span>)</span><br><span class="line">                .port(<span class="number">3306</span>)</span><br><span class="line">                .databaseList(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">                .tableList(<span class="string">&quot;test.t_user&quot;</span>)</span><br><span class="line">                .username(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">                .password(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">                .deserializer(<span class="keyword">new</span> JsonDebeziumDeserializationSchema())</span><br><span class="line">                .includeSchemaChanges(<span class="keyword">true</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">        configuration.setInteger(RestOptions.PORT, <span class="number">8081</span>);</span><br><span class="line">        StreamExecutionEnvironment executionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment(configuration);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查点的作用是当作业失败后，回到前一个检查点开始</span></span><br><span class="line">        executionEnvironment.enableCheckpointing(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">        executionEnvironment.fromSource(source, WatermarkStrategy.&lt;String&gt;noWatermarks(),</span><br><span class="line">                <span class="string">&quot;Mysql&quot;</span>).addSink(<span class="keyword">new</span> MySink());</span><br><span class="line">        executionEnvironment.execute();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动！顺利的话，启动后命令行就能输出如下的东西</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql cdc: &#123;&quot;before&quot;:null,&quot;after&quot;:&#123;&quot;id&quot;:3,&quot;name&quot;:&quot;c&quot;,&quot;description&quot;:&quot;moon1&quot;&#125;,&quot;source&quot;:&#123;&quot;version&quot;:&quot;1.9.7.Final&quot;,&quot;connector&quot;:&quot;mysql&quot;,&quot;name&quot;:&quot;mysql_binlog_source&quot;,&quot;ts_ms&quot;:0,&quot;snapshot&quot;:&quot;false&quot;,&quot;db&quot;:&quot;test&quot;,&quot;sequence&quot;:null,&quot;table&quot;:&quot;t_user&quot;,&quot;server_id&quot;:0,&quot;gtid&quot;:null,&quot;file&quot;:&quot;&quot;,&quot;pos&quot;:0,&quot;row&quot;:0,&quot;thread&quot;:null,&quot;query&quot;:null&#125;,&quot;op&quot;:&quot;r&quot;,&quot;ts_ms&quot;:1721806935503,&quot;transaction&quot;:null&#125;</span><br><span class="line">mysql cdc: &#123;&quot;before&quot;:null,&quot;after&quot;:&#123;&quot;id&quot;:2,&quot;name&quot;:&quot;bob&quot;,&quot;description&quot;:&quot;fuck&quot;&#125;,&quot;source&quot;:&#123;&quot;version&quot;:&quot;1.9.7.Final&quot;,&quot;connector&quot;:&quot;mysql&quot;,&quot;name&quot;:&quot;mysql_binlog_source&quot;,&quot;ts_ms&quot;:0,&quot;snapshot&quot;:&quot;false&quot;,&quot;db&quot;:&quot;test&quot;,&quot;sequence&quot;:null,&quot;table&quot;:&quot;t_user&quot;,&quot;server_id&quot;:0,&quot;gtid&quot;:null,&quot;file&quot;:&quot;&quot;,&quot;pos&quot;:0,&quot;row&quot;:0,&quot;thread&quot;:null,&quot;query&quot;:null&#125;,&quot;op&quot;:&quot;r&quot;,&quot;ts_ms&quot;:1721806935503,&quot;transaction&quot;:null&#125;</span><br><span class="line">mysql cdc: &#123;&quot;before&quot;:null,&quot;after&quot;:&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;alice&quot;,&quot;description&quot;:&quot;test&quot;&#125;,&quot;source&quot;:&#123;&quot;version&quot;:&quot;1.9.7.Final&quot;,&quot;connector&quot;:&quot;mysql&quot;,&quot;name&quot;:&quot;mysql_binlog_source&quot;,&quot;ts_ms&quot;:0,&quot;snapshot&quot;:&quot;false&quot;,&quot;db&quot;:&quot;test&quot;,&quot;sequence&quot;:null,&quot;table&quot;:&quot;t_user&quot;,&quot;server_id&quot;:0,&quot;gtid&quot;:null,&quot;file&quot;:&quot;&quot;,&quot;pos&quot;:0,&quot;row&quot;:0,&quot;thread&quot;:null,&quot;query&quot;:null&#125;,&quot;op&quot;:&quot;r&quot;,&quot;ts_ms&quot;:1721806935501,&quot;transaction&quot;:null&#125;</span><br></pre></td></tr></table></figure><p>这里主要是关于op字段，其实是对应数据库的增删改查，即c(create), d(delete), u(update), r(read)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql cdc: &#123;&quot;before&quot;:null,&quot;after&quot;:&#123;&quot;id&quot;:4,&quot;name&quot;:&quot;d&quot;,&quot;description&quot;:&quot;today&quot;&#125;,&quot;source&quot;:&#123;&quot;version&quot;:&quot;1.9.7.Final&quot;,&quot;connector&quot;:&quot;mysql&quot;,&quot;name&quot;:&quot;mysql_binlog_source&quot;,&quot;ts_ms&quot;:1721807345000,&quot;snapshot&quot;:&quot;false&quot;,&quot;db&quot;:&quot;test&quot;,&quot;sequence&quot;:null,&quot;table&quot;:&quot;t_user&quot;,&quot;server_id&quot;:1,&quot;gtid&quot;:null,&quot;file&quot;:&quot;binlog.000004&quot;,&quot;pos&quot;:2490,&quot;row&quot;:0,&quot;thread&quot;:21,&quot;query&quot;:null&#125;,&quot;op&quot;:&quot;c&quot;,&quot;ts_ms&quot;:1721807345604,&quot;transaction&quot;:null&#125;</span><br><span class="line"></span><br><span class="line">mysql cdc: &#123;&quot;before&quot;:&#123;&quot;id&quot;:4,&quot;name&quot;:&quot;d&quot;,&quot;description&quot;:&quot;today&quot;&#125;,&quot;after&quot;:null,&quot;source&quot;:&#123;&quot;version&quot;:&quot;1.9.7.Final&quot;,&quot;connector&quot;:&quot;mysql&quot;,&quot;name&quot;:&quot;mysql_binlog_source&quot;,&quot;ts_ms&quot;:1721807364000,&quot;snapshot&quot;:&quot;false&quot;,&quot;db&quot;:&quot;test&quot;,&quot;sequence&quot;:null,&quot;table&quot;:&quot;t_user&quot;,&quot;server_id&quot;:1,&quot;gtid&quot;:null,&quot;file&quot;:&quot;binlog.000004&quot;,&quot;pos&quot;:2788,&quot;row&quot;:0,&quot;thread&quot;:21,&quot;query&quot;:null&#125;,&quot;op&quot;:&quot;d&quot;,&quot;ts_ms&quot;:1721807364426,&quot;transaction&quot;:null&#125;</span><br><span class="line"></span><br><span class="line">mysql cdc: &#123;&quot;before&quot;:&#123;&quot;id&quot;:3,&quot;name&quot;:&quot;c&quot;,&quot;description&quot;:&quot;moon1&quot;&#125;,&quot;after&quot;:&#123;&quot;id&quot;:3,&quot;name&quot;:&quot;c&quot;,&quot;description&quot;:&quot;moon&quot;&#125;,&quot;source&quot;:&#123;&quot;version&quot;:&quot;1.9.7.Final&quot;,&quot;connector&quot;:&quot;mysql&quot;,&quot;name&quot;:&quot;mysql_binlog_source&quot;,&quot;ts_ms&quot;:1721807381000,&quot;snapshot&quot;:&quot;false&quot;,&quot;db&quot;:&quot;test&quot;,&quot;sequence&quot;:null,&quot;table&quot;:&quot;t_user&quot;,&quot;server_id&quot;:1,&quot;gtid&quot;:null,&quot;file&quot;:&quot;binlog.000004&quot;,&quot;pos&quot;:3095,&quot;row&quot;:0,&quot;thread&quot;:21,&quot;query&quot;:null&#125;,&quot;op&quot;:&quot;u&quot;,&quot;ts_ms&quot;:1721807381851,&quot;transaction&quot;:null&#125;</span><br></pre></td></tr></table></figure><p>其他的没什么好说的，如果不想读取这么多json数据的话，可以创建实体类映射下。</p><p>但是个人尝试下来，其实要自己做解析的话会比较困难，建议还是拿到json之后，根据表名称做下parse会相对简单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T before;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T after;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Source source;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String op;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonProperty(&quot;ts_ms&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long timestamp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@ToString</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Source</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String db;</span><br><span class="line">        <span class="keyword">private</span> String table;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySink</span> <span class="keyword">extends</span> <span class="title">RichSinkFunction</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(String value, Context context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mysql cdc: &quot;</span> + value);</span><br><span class="line"></span><br><span class="line">        Message&lt;User&gt; userMessage = objectMapper.readValue(value, <span class="keyword">new</span> TypeReference&lt;Message&lt;User&gt;&gt;() &#123;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;mysql cdc2: &quot;</span> + userMessage);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>简单搞了一个demo，实际搞下来我还看了能否自己解析原始数据，比较困难。</p><p>其次是每次重启后都会读取到所有源数据，虽然不影响，但是我不知道这个能否关闭？</p><p>之后其实就是对接es等其他数据源了，这个业务写多了都会。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;随便聊聊&quot;&gt;&lt;a href=&quot;#随便聊聊&quot; class=&quot;headerlink&quot; title=&quot;随便聊聊&quot;&gt;&lt;/a&gt;随便聊聊&lt;/h1&gt;&lt;p&gt;今天是离职的50天，面试不咋顺利，昨晚也没睡好，有个离职的同事去日本玩了，不知道他是什么考虑。脱离工作久了舒服是确实舒服，但
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="架构" scheme="https://re0.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="运维" scheme="https://re0.top/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="从0.5开始的运维架构之路" scheme="https://re0.top/tags/%E4%BB%8E0-5%E5%BC%80%E5%A7%8B%E7%9A%84%E8%BF%90%E7%BB%B4%E6%9E%B6%E6%9E%84%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>【架构之路8】apisix-ingress-controller搭建与使用</title>
    <link href="https://re0.top/2024/07/23/devops8/"/>
    <id>https://re0.top/2024/07/23/devops8/</id>
    <published>2024-07-23T13:30:00.000Z</published>
    <updated>2024-07-23T08:24:12.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>apisix是一个常用的api网关，在上家公司一般作为nginx的替代和入口网关。</p><p>APISIX ingress controller是k8s Ingress 控制器的实现，用apisix网关作为Ingress 控制器。</p><p>Ingress 是对集群中服务的外部访问进行管理的 API 对象，典型的访问方式是 HTTP。</p><p>Ingress 可以提供负载均衡、SSL 和基于名称的虚拟托管。</p><p>简单来说客户端通过访问Ingress所管理的负载均衡器，由负载均衡器根据路由规则再发送给对应的service。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官网上有针对k3s的安装教程。我们把NodePort改成LoadBalancer</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">helm repo add apisix https://charts.apiseven.com</span><br><span class="line">helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><span class="line">helm repo update</span><br><span class="line"><span class="comment">#  We use Apisix 3.0 in this example. If you&#x27;re using Apisix v2.x, please set to v2</span></span><br><span class="line">ADMIN_API_VERSION=v3</span><br><span class="line">helm install apisix apisix/apisix \</span><br><span class="line">  --<span class="built_in">set</span> service.type=LoadBalancer \</span><br><span class="line">  --<span class="built_in">set</span> ingress-controller.enabled=<span class="literal">true</span> \</span><br><span class="line">  --create-namespace \</span><br><span class="line">  --namespace ingress-apisix \</span><br><span class="line">  --<span class="built_in">set</span> ingress-controller.config.apisix.serviceNamespace=ingress-apisix \</span><br><span class="line">  --<span class="built_in">set</span> ingress-controller.config.apisix.adminAPIVersion=<span class="variable">$ADMIN_API_VERSION</span> \</span><br><span class="line">  --kubeconfig /etc/rancher/k3s/k3s.yaml</span><br><span class="line">kubectl get service --namespace ingress-apisix</span><br></pre></td></tr></table></figure><p>查看apisix的地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get svc -n ingress-apisix | grep gateway</span><br><span class="line">apisix-gateway                             LoadBalancer   10.43.82.110    192.168.28.211   80:30202/TCP                 7m2s</span><br><span class="line">apisix-ingress-controller-apisix-gateway   NodePort       10.43.82.209    &lt;none&gt;           80:31064/TCP,443:32717/TCP   7m2s</span><br></pre></td></tr></table></figure><p>访问看看是否正常</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@worker1 ~]<span class="comment"># curl http://192.168.28.211/</span></span><br><span class="line">&#123;<span class="string">&quot;error_msg&quot;</span>:<span class="string">&quot;404 Route Not Found&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>说明网关搭建成功。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>先创建一个nginx作为上游。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span> </span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure><p>增加一个路由规则。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-route</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ingressClassName:</span> <span class="string">apisix</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">local.nginx</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">                <span class="attr">port:</span></span><br><span class="line">                  <span class="attr">number:</span> <span class="number">80</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br></pre></td></tr></table></figure><p>注意这里我们指定了host，因此需要配置hosts或者请求时修改Host</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --location --request GET &quot;http://192.168.28.211&quot; -H &quot;Host: local.nginx&quot;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 增加hosts</span><br><span class="line">192.168.28.211 local.nginx</span><br><span class="line">// 请求</span><br><span class="line">curl http://local.nginx</span><br></pre></td></tr></table></figure><p>这里我们就能访问到后端服务了。</p><p>当然我们这里使用的是k8s原生的Ingress Resource。我们也可以改用apisix为我们提供的CRDs创建路由。</p><p>这里需要把刚才的test-route删除。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apisix.apache.org/v2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ApisixRoute</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-route-1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">http:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rule1</span></span><br><span class="line">    <span class="attr">match:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/*</span></span><br><span class="line">    <span class="attr">backends:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="attr">serviceName:</span> <span class="string">nginx</span></span><br><span class="line">         <span class="attr">servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>也是可以正常工作的，但是不方便的是我们搭建的kubepi的ingresses中没法看到这条路由，所以差不多的情况下还是建议用原生的CRDs。当然ApisixRoute可以让我们应用apisix的插件，这才是关键所在。</p><h2 id="搭建dashboard"><a href="#搭建dashboard" class="headerlink" title="搭建dashboard"></a>搭建dashboard</h2><p>个人而言，缺少了dashboard，apisix的配置效率其实不是特别高。</p><p>所以我们可以搭建一个dashboard，用于配置其他路由。</p><p>对于dashboard，其实在官方github中明确指出它与apisix ingress controller的相性不是很好。</p><blockquote><h2 id="Works-with-APISIX-Ingress-Controller"><a href="#Works-with-APISIX-Ingress-Controller" class="headerlink" title="Works with APISIX Ingress Controller"></a>Works with APISIX Ingress Controller</h2><p>Currently, APISIX Ingress Controller automatically manipulates some APISIX resources, which is not very compatible with APISIX Dashboard. In addition, users should not modify resources labeled <code>managed-by: apisix-ingress-controllers</code> via APISIX Dashboard.</p></blockquote><p>先从github下载了dashboard的配置文件稍加改造。然后创建为configMap。注意这里没有配置allow_list，生产环境需要注意。当然如果有账号密码的话问题也不是太大。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">apisix-dashboard-config-map</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-apisix</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">conf.yaml:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    conf:</span></span><br><span class="line"><span class="string">      listen:</span></span><br><span class="line"><span class="string">     </span></span><br><span class="line"><span class="string">        port: 9000           </span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="comment"># allow_list:             # If we don&#x27;t set any IP list, then any IP access is allowed by default.</span></span><br><span class="line">      <span class="comment">#  - 127.0.0.1           # The rules are checked in sequence until the first match is found.</span></span><br><span class="line">      <span class="comment">#  - ::1                 # In this example, access is allowed only for IPv4 network 127.0.0.1, and for IPv6 network ::1.</span></span><br><span class="line">                              <span class="comment"># It also support CIDR like 192.168.1.0/24 and 2001:0db8::/32</span></span><br><span class="line">      <span class="attr">etcd:</span></span><br><span class="line">        <span class="attr">endpoints:</span>            <span class="comment"># supports defining multiple etcd host addresses for an etcd cluster</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">apisix-etcd-headless:2379</span></span><br><span class="line">                              <span class="comment"># yamllint disable rule:comments-indentation</span></span><br><span class="line">                              <span class="comment"># etcd basic auth info</span></span><br><span class="line">        <span class="comment"># username: &quot;root&quot;    # ignore etcd username if not enable etcd auth</span></span><br><span class="line">        <span class="comment"># password: &quot;123456&quot;  # ignore etcd password if not enable etcd auth</span></span><br><span class="line">        <span class="attr">mtls:</span></span><br><span class="line">          <span class="attr">key_file:</span> <span class="string">&quot;&quot;</span>          <span class="comment"># Path of your self-signed client side key</span></span><br><span class="line">          <span class="attr">cert_file:</span> <span class="string">&quot;&quot;</span>         <span class="comment"># Path of your self-signed client side cert</span></span><br><span class="line">          <span class="attr">ca_file:</span> <span class="string">&quot;&quot;</span>           <span class="comment"># Path of your self-signed ca cert, the CA is used to sign callers&#x27; certificates</span></span><br><span class="line">        <span class="comment"># prefix: /apisix       # apisix config&#x27;s prefix in etcd, /apisix by default</span></span><br><span class="line">      <span class="attr">log:</span></span><br><span class="line">        <span class="attr">error_log:</span></span><br><span class="line">          <span class="attr">level:</span> <span class="string">warn</span>       <span class="comment"># supports levels, lower to higher: debug, info, warn, error, panic, fatal</span></span><br><span class="line">          <span class="attr">file_path:</span></span><br><span class="line">            <span class="string">logs/error.log</span>  <span class="comment"># supports relative path, absolute path, standard output</span></span><br><span class="line">                            <span class="comment"># such as: logs/error.log, /tmp/logs/error.log, /dev/stdout, /dev/stderr</span></span><br><span class="line">                            <span class="comment"># such as absolute path on Windows: winfile:///C:\error.log</span></span><br><span class="line">        <span class="attr">access_log:</span></span><br><span class="line">          <span class="attr">file_path:</span></span><br><span class="line">            <span class="string">logs/access.log</span>  <span class="comment"># supports relative path, absolute path, standard output</span></span><br><span class="line">      <span class="attr">max_cpu:</span> <span class="number">0</span>             <span class="comment"># supports tweaking with the numbe</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">authentication:</span></span><br><span class="line">      <span class="attr">secret:</span></span><br><span class="line">        <span class="string">secret</span>              <span class="comment"># secret for jwt token generation.</span></span><br><span class="line">                            <span class="comment"># <span class="doctag">NOTE:</span> Highly recommended to modify this value to protect `manager api`.</span></span><br><span class="line">                            <span class="comment"># if it&#x27;s default value, when `manager api` start, it will generate a random string to replace it.</span></span><br><span class="line">      <span class="attr">expire_time:</span> <span class="number">3600</span>     <span class="comment"># jwt token expire time, in second</span></span><br><span class="line">      <span class="attr">users:</span>                <span class="comment"># yamllint enable rule:comments-indentation</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">username:</span> <span class="string">admin</span>   <span class="comment"># username and password for login `manager api`</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">username:</span> <span class="string">user</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">user</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">oidc:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">expire_time:</span> <span class="number">3600</span></span><br><span class="line">      <span class="attr">client_id:</span> <span class="string">dashboard</span></span><br><span class="line">      <span class="attr">client_secret:</span> <span class="string">dashboard</span></span><br><span class="line">      <span class="attr">auth_url:</span> <span class="string">http://172.17.0.1:8080/auth/realms/master/protocol/openid-connect/auth</span></span><br><span class="line">      <span class="attr">token_url:</span> <span class="string">http://172.17.0.1:8080/auth/realms/master/protocol/openid-connect/token</span></span><br><span class="line">      <span class="attr">user_info_url:</span> <span class="string">http://172.17.0.1:8080/auth/realms/master/protocol/openid-connect/userinfo</span></span><br><span class="line">      <span class="attr">redirect_url:</span> <span class="string">http://127.0.0.1:9000/apisix/admin/oidc/callback</span></span><br><span class="line">      <span class="attr">scope:</span> <span class="string">openid</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">plugins:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">api-breaker</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">authz-casbin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">authz-casdoor</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">authz-keycloak</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">aws-lambda</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">azure-functions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">basic-auth</span></span><br><span class="line">      <span class="comment"># - batch-requests</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">clickhouse-logger</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">client-control</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">consumer-restriction</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cors</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">csrf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">datadog</span></span><br><span class="line">      <span class="comment"># - dubbo-proxy</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">error-log-logger</span></span><br><span class="line">      <span class="comment"># - example-plugin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ext-plugin-post-req</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ext-plugin-post-resp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ext-plugin-pre-req</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">fault-injection</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">file-logger</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">forward-auth</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">google-cloud-logging</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">grpc-transcode</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">grpc-web</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">gzip</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hmac-auth</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http-logger</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ip-restriction</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">jwt-auth</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kafka-logger</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kafka-proxy</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">key-auth</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ldap-auth</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">limit-conn</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">limit-count</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">limit-req</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loggly</span></span><br><span class="line">      <span class="comment"># - log-rotate</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mocking</span></span><br><span class="line">      <span class="comment"># - node-status</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">opa</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">openid-connect</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">opentelemetry</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">openwhisk</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">prometheus</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">proxy-cache</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">proxy-control</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">proxy-mirror</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">proxy-rewrite</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">public-api</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">real-ip</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redirect</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">referer-restriction</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">request-id</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">request-validation</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">response-rewrite</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rocketmq-logger</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">server-info</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">serverless-post-function</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">serverless-pre-function</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">skywalking</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">skywalking-logger</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sls-logger</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">splunk-hec-logging</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">syslog</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">tcp-logger</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traffic-split</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ua-restriction</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">udp-logger</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">uri-blocker</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">wolf-rbac</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zipkin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch-logge</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">openfunction</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">tencent-cloud-cls</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cas-auth</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后创建容器和svc。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">apisix-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-apisix</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">apisix-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">apisix-dashboard</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">apisix-dashboard</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">apisix-dashboard</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">apache/apisix-dashboard</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">9000</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/usr/local/apisix-dashboard/conf/conf.yaml</span></span><br><span class="line">              <span class="attr">subPath:</span> <span class="string">conf.yaml</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">apisix-dashboard-config-map</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line"></span><br><span class="line"><span class="meta">--- </span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">apisix-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">apisix-dashboard</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">9000</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n ingress-apisix apply -f apisix-dashboard-config.yaml</span><br><span class="line">kubectl -n ingress-apisix apply -f apisix-dashboard.yaml</span><br></pre></td></tr></table></figure><p>创建完成后，访问ip:9000端口，用户名密码都是admin，就成功进入到dashboard页面了，我们在路由列表中也能看见之前创建的路由，标签中确实带有<code>managed-by:apisix-ingress-controller</code></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>搭建apisix-ingress即可以用作ingress又可以用作普通网关，确实是比较好用的。</p><p>并且搭建是比较方便的。使用helm安装之后再配置下dashboard即可使用。</p><p>但是这个网关竟然只有一个副本，这是我没想到的。拉上去应该也不影响。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;apisix是一个常用的api网关，在上家公司一般作为nginx的替代和入口网关。&lt;/p&gt;
&lt;p&gt;APISIX ingress contro
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="架构" scheme="https://re0.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="运维" scheme="https://re0.top/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="从0.5开始的运维架构之路" scheme="https://re0.top/tags/%E4%BB%8E0-5%E5%BC%80%E5%A7%8B%E7%9A%84%E8%BF%90%E7%BB%B4%E6%9E%B6%E6%9E%84%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>【架构之路7】tidb集群搭建</title>
    <link href="https://re0.top/2024/07/22/devops7/"/>
    <id>https://re0.top/2024/07/22/devops7/</id>
    <published>2024-07-22T13:30:00.000Z</published>
    <updated>2024-07-23T05:06:42.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p><a href="https://github.com/pingcap/tidb">TiDB</a> 是 <a href="https://pingcap.com/about-cn/">PingCAP</a> 公司自主设计、研发的开源分布式关系型数据库，是一款同时支持在线事务处理与在线分析处理 (Hybrid Transactional and Analytical Processing, HTAP) 的融合型分布式数据库产品，具备水平扩容或者缩容、金融级高可用、实时 HTAP、云原生的分布式数据库、兼容 MySQL 协议和 MySQL 生态等重要特性。目标是为用户提供一站式 OLTP (Online Transactional Processing)、OLAP (Online Analytical Processing)、HTAP 解决方案。TiDB 适合高可用、强一致要求较高、数据规模较大等各种应用场景。</p></blockquote><p>上家公司没有使用分库分表，而是直接采用TiDB社区版来替代。目前使用上没什么大的问题。这里我就来搭建一个。</p><p>TiDB的架构说明如下：</p><ul><li><a href="https://docs.pingcap.com/zh/tidb/dev/tidb-computing">TiDB Server</a>：SQL 层，对外暴露 MySQL 协议的连接 endpoint，负责接受客户端的连接，执行 SQL 解析和优化，最终生成分布式执行计划。TiDB 层本身是无状态的，实践中可以启动多个 TiDB 实例，通过负载均衡组件（如 TiProxy、LVS、HAProxy、ProxySQL 或 F5）对外提供统一的接入地址，客户端的连接可以均匀地分摊在多个 TiDB 实例上以达到负载均衡的效果。TiDB Server 本身并不存储数据，只是解析 SQL，将实际的数据读取请求转发给底层的存储节点 TiKV（或 TiFlash）。</li><li><a href="https://docs.pingcap.com/zh/tidb/dev/tidb-scheduling">PD (Placement Driver) Server</a>：整个 TiDB 集群的元信息管理模块，负责存储每个 TiKV 节点实时的数据分布情况和集群的整体拓扑结构，提供 TiDB Dashboard 管控界面，并为分布式事务分配事务 ID。PD 不仅存储元信息，同时还会根据 TiKV 节点实时上报的数据分布状态，下发数据调度命令给具体的 TiKV 节点，可以说是整个集群的“大脑”。此外，PD 本身也是由至少 3 个节点构成，拥有高可用的能力。建议部署奇数个 PD 节点。</li><li>存储节点<ul><li><a href="https://docs.pingcap.com/zh/tidb/dev/tidb-storage">TiKV Server</a>：负责存储数据，从外部看 TiKV 是一个分布式的提供事务的 Key-Value 存储引擎。存储数据的基本单位是 Region，每个 Region 负责存储一个 Key Range（从 StartKey 到 EndKey 的左闭右开区间）的数据，每个 TiKV 节点会负责多个 Region。TiKV 的 API 在 KV 键值对层面提供对分布式事务的原生支持，默认提供了 SI (Snapshot Isolation) 的隔离级别，这也是 TiDB 在 SQL 层面支持分布式事务的核心。TiDB 的 SQL 层做完 SQL 解析后，会将 SQL 的执行计划转换为对 TiKV API 的实际调用。所以，数据都存储在 TiKV 中。另外，TiKV 中的数据都会自动维护多副本（默认为三副本），天然支持高可用和自动故障转移。</li><li><a href="https://docs.pingcap.com/zh/tidb/dev/tiflash-overview">TiFlash</a>：TiFlash 是一类特殊的存储节点。和普通 TiKV 节点不一样的是，在 TiFlash 内部，数据是以列式的形式进行存储，主要的功能是为分析型的场景加速。</li></ul></li></ul><p>这里我们采用在k8s集群上搭建TiDB.<a href="https://docs.pingcap.com/zh/tidb-in-kubernetes/stable/get-started">文档在这</a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="安装TiDB-Operator"><a href="#安装TiDB-Operator" class="headerlink" title="安装TiDB Operator"></a>安装TiDB Operator</h2><p><a href="https://github.com/pingcap/tidb-operator">TiDB Operator</a> 是 Kubernetes 上的 TiDB 集群自动运维系统，提供包括部署、升级、扩缩容、备份恢复、配置变更的 TiDB 全生命周期管理。</p><p>TiDB Operator安装共两步，分别为：</p><ol><li>安装 TiDB Operator CRDs</li><li>安装 TiDB Operator</li></ol><p>TiDB Operator 包含许多实现 TiDB 集群不同组件的自定义资源类型 (CRD)。简单来说就是扩展了k8s的yaml配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f https://raw.githubusercontent.com/pingcap/tidb-operator/v1.6.0/manifests/crd.yaml</span><br></pre></td></tr></table></figure><p>使用helm安装TiDB Operator。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">helm repo add pingcap https://charts.pingcap.org/</span><br><span class="line">kubectl create namespace tidb-admin</span><br><span class="line">helm install --namespace tidb-admin tidb-operator pingcap/tidb-operator --version v1.6.0</span><br></pre></td></tr></table></figure><p>等待tidb-controller-manager启动完成即可。这里提一下和网上教程不一样的是， <a href="https://docs.pingcap.com/zh/tidb-in-kubernetes/stable/tidb-scheduler#tidb-scheduler-%E4%B8%8E-default-scheduler">tidb-scheduler</a>在1.19以上的k8s集群上不是必须的，所以它不会自动部署tidb-scheduler。</p><h2 id="部署集群和监控"><a href="#部署集群和监控" class="headerlink" title="部署集群和监控"></a>部署集群和监控</h2><p>部署集群</p><p>先创建命名空间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create namespace tidb-cluster</span><br></pre></td></tr></table></figure><p>这里我们需要的是生产可用的集群，因此不能使用basic-example里面的yaml。即<code>https://raw.githubusercontent.com/pingcap/tidb-operator/v1.6.0/examples/basic/tidb-cluster.yaml</code></p><p>我们使用advanced的tidb-cluster。<code>https://raw.githubusercontent.com/pingcap/tidb-operator/blob/v1.6.0/examples/advanced/tidb-cluster.yaml</code></p><p>先把yaml下载下来删除一下无用注释，再改造一下。包括增加pv挂载，还有一些额外参数。</p><p>搭了快两小时，终于成功了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">pingcap.com/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">TidbCluster</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">advanced-tidb</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">tidb-cluster</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">version:</span> <span class="string">&quot;v8.1.0&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">timezone:</span> <span class="string">UTC</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">configUpdateStrategy:</span> <span class="string">RollingUpdate</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="attr">helper:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">alpine:3.16.0</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">pvReclaimPolicy:</span> <span class="string">Retain</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="attr">enableDynamicConfiguration:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="attr">pd:</span></span><br><span class="line">    <span class="attr">baseImage:</span> <span class="string">pingcap/pd</span></span><br><span class="line">    <span class="attr">config:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      client-urls = &quot;http://0.0.0.0:2379&quot;</span></span><br><span class="line"><span class="string">      peer-urls = &quot;http://0.0.0.0:2380&quot;</span></span><br><span class="line"><span class="string">      data-dir = &quot;/pd/data&quot;</span></span><br><span class="line"><span class="string">      [log.file]</span></span><br><span class="line"><span class="string">        filename = &quot;/pd/log/pd.log&quot;</span></span><br><span class="line"><span class="string">      [dashboard]</span></span><br><span class="line"><span class="string">        internal-proxy = true</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">maxFailoverCount:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">    <span class="comment">#   cpu: 1000m</span></span><br><span class="line">    <span class="comment">#   memory: 1Gi</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">10Gi</span></span><br><span class="line">    <span class="comment"># limits:</span></span><br><span class="line">    <span class="comment">#   cpu: 2000m</span></span><br><span class="line">    <span class="comment">#   memory: 2Gi</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="attr">mountClusterClientSecret:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="attr">storageClassName:</span> <span class="string">&quot;csi-rbd-sc&quot;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="attr">storageVolumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">        <span class="attr">storageSize:</span> <span class="string">2Gi</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/pd/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">log</span></span><br><span class="line">        <span class="attr">storageSize:</span> <span class="string">2Gi</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/pd/log</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tidb:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">baseImage:</span> <span class="string">pingcap/tidb</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="attr">config:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      path = &quot;/tidb/data&quot;</span></span><br><span class="line"><span class="string">      [performance]</span></span><br><span class="line"><span class="string">        tcp-keep-alive = true</span></span><br><span class="line"><span class="string">      [log.file]</span></span><br><span class="line"><span class="string">        filename = &quot;/tidb/log/tidb.log&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"></span><br><span class="line">    <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">maxFailoverCount:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">service:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line">      <span class="attr">externalTrafficPolicy:</span> <span class="string">Local</span></span><br><span class="line">   </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="attr">storageClassName:</span> <span class="string">&quot;csi-rbd-sc&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attr">storageVolumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">        <span class="attr">storageSize:</span> <span class="string">1Gi</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/tidb/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">log</span></span><br><span class="line">        <span class="attr">storageSize:</span> <span class="string">1Gi</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/tidb/log</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tikv:</span></span><br><span class="line">    <span class="attr">baseImage:</span> <span class="string">pingcap/tikv</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">config:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      log-level = &quot;info&quot;</span></span><br><span class="line"><span class="string">      [rocksdb]</span></span><br><span class="line"><span class="string">        wal-dir = &quot;/data/tikv/wal&quot;</span></span><br><span class="line"><span class="string">      [titan]</span></span><br><span class="line"><span class="string">        dirname = &quot;/data/titan/data&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="attr">maxFailoverCount:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">    <span class="comment">#   cpu: 1000m</span></span><br><span class="line">    <span class="comment">#   memory: 1Gi</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">100Gi</span></span><br><span class="line">    <span class="comment"># limits:</span></span><br><span class="line">    <span class="comment">#   cpu: 2000m</span></span><br><span class="line">    <span class="comment">#   memory: 2Gi</span></span><br><span class="line">    <span class="comment">#   # settings `storage` here will add `--capacity` arg to tikv-server</span></span><br><span class="line">    <span class="comment">#   storage: 10Gi</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="attr">mountClusterClientSecret:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">storageClassName:</span> <span class="string">&quot;csi-rbd-sc&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">storageVolumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">wal</span></span><br><span class="line">        <span class="attr">storageSize:</span> <span class="string">&quot;2Gi&quot;</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">&quot;/data/tikv/wal&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">titan</span></span><br><span class="line">        <span class="attr">storageSize:</span> <span class="string">&quot;2Gi&quot;</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">&quot;/data/titan/data&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n tidb-cluster apply -f tidb-cluster.yaml</span><br></pre></td></tr></table></figure><p>部署dashboard，pd中内置了dashboard，并且配置了<code>internal-proxy = true</code>，因此只需要把指定端口映射出来即可.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">access-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">tidb-cluster</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dashboard</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">10262</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">discovery</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">advanced-tidb</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">tidb-cluster</span></span><br></pre></td></tr></table></figure><p>注意<code>app.kubernetes.io/instance</code>为上一步所搭建集群的名称，即<code>metadata.name</code></p><p>然后部署监控，光有dashboard但是没有prometheus和Grafana也不行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">pingcap.com/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">TidbMonitor</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">monitor</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">clusters:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">advanced-tidb</span></span><br><span class="line">  <span class="attr">persistent:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">&quot;csi-rbd-sc&quot;</span></span><br><span class="line">  <span class="attr">storage:</span> <span class="string">5G</span></span><br><span class="line">  <span class="attr">prometheus:</span></span><br><span class="line">    <span class="attr">baseImage:</span> <span class="string">prom/prometheus</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v2.27.1</span></span><br><span class="line">    <span class="attr">service:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line">  <span class="attr">grafana:</span></span><br><span class="line">    <span class="attr">baseImage:</span> <span class="string">grafana/grafana</span></span><br><span class="line">    <span class="attr">version:</span> <span class="number">7.5</span><span class="number">.11</span></span><br><span class="line">    <span class="attr">service:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line">  <span class="attr">initializer:</span></span><br><span class="line">    <span class="attr">baseImage:</span> <span class="string">pingcap/tidb-monitor-initializer</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v8.1.0</span></span><br><span class="line">  <span class="attr">reloader:</span></span><br><span class="line">    <span class="attr">baseImage:</span> <span class="string">pingcap/tidb-monitor-reloader</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1.0.1</span></span><br><span class="line">  <span class="attr">prometheusReloader:</span></span><br><span class="line">    <span class="attr">baseImage:</span> <span class="string">quay.io/prometheus-operator/prometheus-config-reloader</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v0.49.0</span></span><br><span class="line">  <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br></pre></td></tr></table></figure><p>获取dashboard的地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get svc -n tidb-cluster |grep dashboard</span><br></pre></td></tr></table></figure><p>接下来就是登录tidb，修改root密码。这里便不再赘述。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此我们就搭建了一个初步生产可用的tidb集群，后期如果需要扩容的话可以扩展副本数即可，还是比较简单的。</p><p>当然也还有许多配置我们没有用到，这些就得根据<a href="https://docs.pingcap.com/zh/tidb/stable/pd-configuration-file">文档</a>去增加config了。</p><p>最后我们清理下环境，不得不说在自己电脑上搭建tidb集群还是比较消耗性能的，搭建过程中先后扩容了节点的CPU和内存。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete namespace tidb-cluster</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/pingcap/tidb&quot;&gt;TiDB&lt;/a&gt; 是 &lt;a h
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="架构" scheme="https://re0.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="运维" scheme="https://re0.top/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="从0.5开始的运维架构之路" scheme="https://re0.top/tags/%E4%BB%8E0-5%E5%BC%80%E5%A7%8B%E7%9A%84%E8%BF%90%E7%BB%B4%E6%9E%B6%E6%9E%84%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>2024面试复盘6</title>
    <link href="https://re0.top/2024/07/22/2024-07-22-replay/"/>
    <id>https://re0.top/2024/07/22/2024-07-22-replay/</id>
    <published>2024-07-22T07:00:00.000Z</published>
    <updated>2024-07-25T05:27:43.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>pdd二面，面试官说他们是单休，可怕。</p><h1 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h1><h2 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h2><p>项目说了蛮久的，可能有二三十分钟。</p><h2 id="互斥锁和自旋锁"><a href="#互斥锁和自旋锁" class="headerlink" title="互斥锁和自旋锁"></a>互斥锁和自旋锁</h2><p>自旋锁(Spin lock)和互斥锁(Mutex)两者都是为了保证多个线程在访问共享资源时的同步，防止数据竞争和不一致。</p><p><strong>互斥锁</strong>：</p><ul><li>线程在尝试获取锁时，如果锁已经被其他线程持有，线程会被阻塞并进入等待队列。</li><li>操作系统负责管理线程的阻塞和唤醒。</li><li>线程被唤醒后再次尝试获取锁，直到成功为止。</li><li>在锁被占用时，线程被阻塞，不会占用CPU资源。</li><li>阻塞和唤醒线程有一定的上下文切换开销。</li></ul><p><strong>自旋锁</strong>：</p><ul><li>线程在尝试获取锁时，如果锁已经被其他线程持有，线程不会阻塞，而是持续循环检查锁的状态（忙等待）。</li><li>自旋过程消耗CPU时间，直到锁被释放。</li><li>自旋锁通常由硬件原语（如原子操作）实现，不涉及操作系统的线程管理。</li><li>在锁被占用时，线程持续忙等待，占用CPU资源。</li><li>避免了线程阻塞和唤醒的上下文切换开销，但可能会导致CPU资源浪费。</li></ul><h2 id="AQS和ABA问题"><a href="#AQS和ABA问题" class="headerlink" title="AQS和ABA问题"></a>AQS和ABA问题</h2><p>AQS相关白复习了，见<a href="https://re0.top/2024/06/24/2024-06-24-replay/#%E5%B9%B6%E5%8F%91%E5%8C%85%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%EF%BC%8CAQS%E5%8E%9F%E7%90%86%EF%BC%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9F">这里</a>。</p><p>ABA问题的解决方法：</p><ul><li><strong>版本号机制</strong>：在变量前增加一个版本号，每次变量修改时同时更新版本号。CAS操作时同时检查版本号和变量值，确保变量没有被其他线程修改过。</li><li><strong>引用计数</strong>：某些情况下，可以通过引用计数来跟踪变量的状态变化。</li></ul><p>Java中的<code>AtomicStampedReference</code>类和<code>AtomicMarkableReference</code>类提供了解决ABA问题的机制，前者通过增加版本戳来避免ABA问题，后者通过标记位来实现类似效果。</p><p>mysql中可以通过版本号机制来解决ABA问题。</p><h2 id="线程池的核心参数和拒绝策略"><a href="#线程池的核心参数和拒绝策略" class="headerlink" title="线程池的核心参数和拒绝策略"></a>线程池的核心参数和拒绝策略</h2><p>这个之前复盘过，但是拒接策略还是忘了一个。</p><p><code>ThreadPoolExecutor</code> 3 个最重要的参数：</p><ul><li><code>corePoolSize</code> : 任务队列未达到队列容量时，最大可以同时运行的线程数量。</li><li><code>maximumPoolSize</code> : 任务队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。</li><li><code>workQueue</code>: 新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。</li></ul><p><code>ThreadPoolExecutor</code>其他常见参数 :</p><ul><li><code>keepAliveTime</code>:线程池中的线程数量大于 <code>corePoolSize</code> 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 <code>keepAliveTime</code>才会被回收销毁。</li><li><code>unit</code> : <code>keepAliveTime</code> 参数的时间单位。</li><li><code>threadFactory</code> :executor 创建新线程的时候会用到。</li><li><code>handler</code> :拒绝策略（后面会单独详细介绍一下）。</li></ul><p><code>ThreadPoolExecutor.AbortPolicy</code>：抛出 <code>RejectedExecutionException</code>来拒绝新任务的处理。</p><p><code>ThreadPoolExecutor.CallerRunsPolicy</code>：调用执行自己的线程运行任务，也就是直接在调用<code>execute</code>方法的线程中运行(<code>run</code>)被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。因此这种策略会降低对于新任务提交速度，影响程序的整体性能。如果你的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话，你可以选择这个策略。</p><p><code>ThreadPoolExecutor.DiscardPolicy</code>：不处理新任务，直接丢弃掉。</p><p><code>ThreadPoolExecutor.DiscardOldestPolicy</code>：此策略将丢弃最早的未处理的任务请求。</p><h2 id="mysql事务解决了什么问题（没有事务会怎么样）"><a href="#mysql事务解决了什么问题（没有事务会怎么样）" class="headerlink" title="mysql事务解决了什么问题（没有事务会怎么样）"></a>mysql事务解决了什么问题（没有事务会怎么样）</h2><p>其实就是ACID（原子性、一致性、隔离性和持久性）。</p><p><strong>原子性</strong>：确保操作的全有或全无，防止部分操作成功导致的数据不一致。</p><p><strong>一致性</strong>：确保数据库从一个一致状态转换到另一个一致状态，维持数据的完整性。</p><p><strong>隔离性</strong>：防止并发事务相互干扰，解决脏读、不可重复读和幻读问题。</p><p><strong>持久性</strong>：确保已提交的数据永久保存，防止数据丢失。</p><p>原子性关注事务的完整性，而一致性关注数据的完整性。</p><h2 id="mysql如何调优"><a href="#mysql如何调优" class="headerlink" title="mysql如何调优"></a>mysql如何调优</h2><p>这个其实范围比较广，我回答的是从索引和业务层面优化。其实之前也做过复盘，抄过来。</p><p>使用explain检查sql。</p><p>优化手段：</p><ol><li>避免使用select * ，原因是会消耗更多CPU，增加带宽，无法使用mysql优化器覆盖索引的优化。</li><li>分页优化。使用子查询或内连接，使用子查询的id作为主查询的条件。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT `score`, `name` FROM `cus_order`</span><br><span class="line">WHERE id &gt;= (SELECT id FROM `cus_order` LIMIT 1000000, 1)</span><br><span class="line">LIMIT 10;</span><br></pre></td></tr></table></figure><ol start="3"><li><p><strong>尽量避免多表做 join</strong></p></li><li><p><strong>建议不要使用外键与级联</strong></p></li><li><p><strong>选择合适的字段类型</strong>。某些字符串可以转换成数字类型存储比如可以将 IP 地址转换成整型数据；对于非负型的数据 (如自增 ID,整型 IP，年龄) 来说,要优先使用无符号整型来存储；小数值类型（比如年龄、状态表示如 0/1）优先使用 TINYINT 类型；对于日期类型来说， 一定不要用字符串存储日期。可以考虑 DATETIME、TIMESTAMP 和 数值型时间戳；金额字段用 decimal，避免精度丢失；尽量使用自增 id 作为主键；不建议使用 NULL 作为列默认值；</p></li></ol><p>这里补充下如何正确使用索引</p><p><strong>选择合适的字段创建索引</strong></p><ul><li>不为 NULL 的字段 ：索引字段的数据应该尽量不为 NULL，因为对于数据为 NULL 的字段，数据库较难优化。如果字段频繁被查询，但又避免不了为 NULL，建议使用 0,1,true,false 这样语义较为清晰的短值或短字符作为替代。</li><li>被频繁查询的字段 ：我们创建索引的字段应该是查询操作非常频繁的字段。</li><li>被作为条件查询的字段 ：被作为 WHERE 条件查询的字段，应该被考虑建立索引。</li><li>频繁需要排序的字段 ：索引已经排序，这样查询可以利用索引的排序，加快排序查询时间。</li><li>被经常频繁用于连接的字段 ：经常用于连接的字段可能是一些外键列，对于外键列并不一定要建立外键，只是说该列涉及到表与表的关系。对于频繁被连接查询的字段，可以考虑建立索引，提高多表连接查询的效率。</li></ul><p><strong>被频繁更新的字段应该慎重建立索引</strong></p><p>虽然索引能带来查询上的效率，但是维护索引的成本也是不小的。 如果一个字段不被经常查询，反而被经常修改，那么就更不应该在这种字段上建立索引了。</p><p><strong>尽可能的考虑建立联合索引而不是单列索引</strong></p><p>因为索引是需要占用磁盘空间的，可以简单理解为每个索引都对应着一颗 B+树。如果一个表的字段过多，索引过多，那么当这个表的数据达到一个体量后，索引占用的空间也是很多的，且修改索引时，耗费的时间也是较多的。如果是联合索引，多个字段在一个索引上，那么将会节约很大磁盘空间，且修改数据的操作效率也会提升。</p><p><strong>注意避免冗余索引</strong></p><p>冗余索引指的是索引的功能相同，能够命中索引(a, b)就肯定能命中索引(a) ，那么索引(a)就是冗余索引。如（name,city ）和（name ）这两个索引就是冗余索引，能够命中前者的查询肯定是能够命中后者的 在大多数情况下，都应该尽量扩展已有的索引而不是创建新索引。</p><p><strong>考虑在字符串类型的字段上使用前缀索引代替普通索引</strong></p><p>前缀索引仅限于字符串类型，较普通索引会占用更小的空间，所以可以考虑使用前缀索引带替普通索引。</p><p><strong>避免索引失效</strong></p><ul><li>创建了组合索引，但查询条件未准守最左匹配原则;</li><li>在索引列上进行计算、函数、类型转换等操作;</li><li>以 % 开头的 LIKE 查询比如 LIKE ‘%abc’;;</li><li>查询条件中使用 OR，且 OR 的前后条件中有一个列没有索引，涉及的索引都不会被使用到;</li><li>IN 的取值范围较大时会导致索引失效，走全表扫描(NOT IN 和 IN 的失效场景相同);</li><li>发生<a href="https://javaguide.cn/database/mysql/index-invalidation-caused-by-implicit-conversion.html">隐式转换</a>;</li></ul><h2 id="如果有一张表中有一百亿数据怎么处理"><a href="#如果有一张表中有一百亿数据怎么处理" class="headerlink" title="如果有一张表中有一百亿数据怎么处理"></a>如果有一张表中有一百亿数据怎么处理</h2><p>分库分表。之前刚讲过。面试的时候回答了手动hash分片，或者用Sharding-JDBC或tidb。</p><p>再把之前<a href="https://re0.top/2024/07/15/2024-07-15-replay/#%E6%9C%89%E4%BA%86%E8%A7%A3%E8%BF%87%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%90%97%EF%BC%9F%E6%97%A2%E7%84%B6%E4%BD%A0%E4%BB%AC%E7%94%A8tidb-%E9%82%A3%E8%8A%82%E7%82%B9%E6%89%A9%E5%AE%B9%E4%BA%86%E8%A7%A3%E8%BF%87%E5%90%97%EF%BC%9F">文章</a>抄过来。</p><blockquote><p>分表算法一般有直接取模，hash取模，一致性hash等方案，前两种方法存在一个问题就是当后期需要扩容的时候，那么由于基数改变，必然涉及到数据的重新迁移。所以一般来说是使用一致性Hash方式。一致性哈希可以按照常用的hash算法来将对应的key哈希到一个具有2^32次方个节点的空间中，形成成一个顺时针首尾相接的闭合的环形。所以当添加一个新的数据库节点时，只有增加服务器的位置和逆时针方向第一个数据库节点之间的键会受影响。虽然数据会收到部分影响，但是会稍微好点。当然前期就应该规划好数据量级，提前做好分库分表。</p><p>全局id的生成一般有UUID，雪花算法，当然也有tidb使用的预先分配id方案，例如节点1插入数据id范围为1-3000，节点2为3001-6000以此类推。</p><p>市面上主流的分库分表中间件有ShardingSphere，TDDL，Mycat。<a href="https://shardingsphere.apache.org/document/4.1.0/cn/manual/sharding-jdbc/">ShardingSphere</a>用的人可能会多一些。ShardingSphere包括Sharding-JDBC和Sharding-Proxy，JDBC是项目里使用的，Proxy则代理数据库连接，JDBC使用较为简单，只需在项目里引用，并添加多个数据源即可实现分库分表。Proxy 版则可以屏蔽应用层面配置多个数据源，能更好的管理数据库。</p></blockquote><h2 id="缓存和数据库如何保证一致性"><a href="#缓存和数据库如何保证一致性" class="headerlink" title="缓存和数据库如何保证一致性"></a>缓存和数据库如何保证一致性</h2><p>这个我回答的还是不错的（自认为），哈哈哈哈。</p><p>首先强调了一下一致性是最终一致性，强一致性要如何保证。然后把Cache Aside Pattern说了一下。把之前复盘的抄过来。</p><blockquote><p>缓存不一致业界一般采用的是Cache Aside Pattern, 即旁路缓存方案。这种方案包括读与写两种实践，对于读请求，先读缓存再读DB，如果cache命中，返回数据，未命中则访问DB,并将数据写回缓存。对于写请求，先操作数据库修改，再删除缓存。</p><p>为什么要删除缓存？原因是因为如果是写缓存的话，与正常的缓存miss流程相冲突，无法保证时序性。</p><p>为什么先操作数据库后删除缓存？其实不管是谁先谁后，都有可能会出现并发问题，但是写数据库的操作会比读数据库的速度慢，因此当A线程读了老数据并写入cache，B线程更改了数据库数据，并删除缓存，假设先删除缓存，那么有可能是删了个寂寞，老数据依旧被A写入缓存。当然这就是一个概率问题。</p><p>数据库和缓存是很难做到强一致性的，只能退而求其次追求最终一致性。那么就可以使用双写方案，即常说的延时双删，但是具体延迟多久这个得根据业务确定，取决于读业务所需的时间。</p></blockquote><h2 id="算法题：给定一个包含m-n的元素矩阵-按照顺时针螺旋顺序输出"><a href="#算法题：给定一个包含m-n的元素矩阵-按照顺时针螺旋顺序输出" class="headerlink" title="算法题：给定一个包含m*n的元素矩阵 按照顺时针螺旋顺序输出"></a>算法题：给定一个包含m*n的元素矩阵 按照顺时针螺旋顺序输出</h2><p>GPT让我自愧不如。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> rows = matrix.length;</span><br><span class="line">    <span class="keyword">int</span> cols = matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = cols - <span class="number">1</span>, top = <span class="number">0</span>, bottom = rows - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right &amp;&amp; top &lt;= bottom) &#123;</span><br><span class="line">        <span class="comment">// Traverse from left to right</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> col = left; col &lt;= right; col++) &#123;</span><br><span class="line">            result.add(matrix[top][col]);</span><br><span class="line">        &#125;</span><br><span class="line">        top++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Traverse from top to bottom</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> row = top; row &lt;= bottom; row++) &#123;</span><br><span class="line">            result.add(matrix[row][right]);</span><br><span class="line">        &#125;</span><br><span class="line">        right--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (top &lt;= bottom) &#123;</span><br><span class="line">            <span class="comment">// Traverse from right to left</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> col = right; col &gt;= left; col--) &#123;</span><br><span class="line">                result.add(matrix[bottom][col]);</span><br><span class="line">            &#125;</span><br><span class="line">            bottom--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="comment">// Traverse from bottom to top</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> row = bottom; row &gt;= top; row--) &#123;</span><br><span class="line">                result.add(matrix[row][left]);</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;pdd二面，面试官说他们是单休，可怕。&lt;/p&gt;
&lt;h1 id=&quot;复盘&quot;&gt;&lt;a href=&quot;#复盘&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="随想" scheme="https://re0.top/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="面经" scheme="https://re0.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>【架构之路6】k8s-LoadBalancer搭建</title>
    <link href="https://re0.top/2024/07/19/devops6/"/>
    <id>https://re0.top/2024/07/19/devops6/</id>
    <published>2024-07-19T13:30:00.000Z</published>
    <updated>2024-07-22T08:15:12.765Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>k8s默认不提供LoadBalancer实现，一般是云厂商的k8s集群会提供这样的功能，让我们的服务暴露到某个外部ip地址上。个人自建集群的话可以使用<a href="https://metallb.universe.tf/">MetalLB</a>来实现外部ip地址的分配。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>根据<a href="https://metallb.universe.tf/installation/">文档</a>来安装还是挺简单的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.14.7/config/manifests/metallb-native.yaml</span><br></pre></td></tr></table></figure><p>一行就搞定了。这里会在每个节点上启动speaker，再单独起一个controller。</p><blockquote><ul><li>The <code>metallb-system/controller</code> deployment. This is the cluster-wide controller that handles IP address assignments.</li><li>The <code>metallb-system/speaker</code> daemonset. This is the component that speaks the protocol(s) of your choice to make the services reachable.</li></ul></blockquote><p>简单来说controller是分配地址，而speaker是让外部访问能到达指定容器的。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>接着配置L2模式，这种模式配置起来是比较简单的，它的原理是响应ARP请求，将节点的MAC地址返回给客户端，由此实现响应。</p><blockquote><p>Layer 2 mode is the simplest to configure: in many cases, you don’t need any protocol-specific configuration, only IP addresses.</p><p>Layer 2 mode does not require the IPs to be bound to the network interfaces of your worker nodes. It works by responding to ARP requests on your local network directly, to give the machine’s MAC address to clients.</p></blockquote><p>先配置ip池</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">metallb.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IPAddressPool</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">first-pool</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">metallb-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">addresses:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.28</span><span class="number">.210</span><span class="number">-192.168</span><span class="number">.28</span><span class="number">.220</span></span><br></pre></td></tr></table></figure><p>然后配置L2Advertisement，如果没有配置spec.ipAddressPools的话，那么这个L2Advertisement则绑定所有IPAddressPool。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">metallb.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">L2Advertisement</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">example</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">metallb-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ipAddressPools:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">first-pool</span></span><br></pre></td></tr></table></figure><p>至于BGP模式，使用上会相对复杂，不理解网络的人可能会有点懵。死去的计算机网络在攻击我，让我想起了网工的那段学习。BGP是一个路由协议，用于发现邻近路由，通过手动维护IP路由表或前缀表，相连AS之间相互通信，从而实现路由网络。</p><p>在使用metallb之前，由于我们使用k3s搭建集群，k3s默认提供了LoadBalancer实现，<a href="https://docs.k3s.io/zh/networking/networking-services#service-load-balancer">参见</a>。但是这种实现它是创建了新的pod，需要额外的资源。说实话，为啥中文文档没翻译全？我看的也是云里雾里的。</p><blockquote><p>The ServiceLB controller watches Kubernetes <a href="https://kubernetes.io/docs/concepts/services-networking/service/">Services</a> with the <code>spec.type</code> field set to <code>LoadBalancer</code>.</p><p>For each LoadBalancer Service, a <a href="https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/">DaemonSet</a> is created in the <code>kube-system</code> namespace. This DaemonSet in turn creates Pods with a <code>svc-</code> prefix, on each node. These Pods use iptables to forward traffic from the Pod’s NodePort, to the Service’s ClusterIP address and port.</p><p>If the ServiceLB Pod runs on a node that has an external IP configured, the node’s external IP is populated into the Service’s <code>status.loadBalancer.ingress</code> address list. Otherwise, the node’s internal IP is used.</p></blockquote><p>看了下网络上的其他解析，其实ServiceLB他的就是在pod所在节点增加iptables规则，将指定端口的流量转发给service的clusterIP，它只能把节点ip当作对外ip。这和我们预期：提供一个非节点ip自动绑定该地址不符。</p><p>所以说了这么多，我们就是要默认禁用掉ServiceLB。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/multi-user.target.wants/k3s.service</span><br><span class="line">在最下方找到启动命令增加--disable=servicelb</span><br><span class="line"></span><br><span class="line">ExecStart=/usr/local/bin/k3s \</span><br><span class="line">    server \</span><br><span class="line">        &#x27;--docker&#x27; \</span><br><span class="line">--disable=servicelb</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart k3s</span><br></pre></td></tr></table></figure><p>重启下k3s后，可以发现svclb-*容器就不见了。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>老朋友nginx</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br></pre></td></tr></table></figure><p>查看service分配的地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@worker1 metalLB]# kubectl get svc</span><br><span class="line">NAME         TYPE           CLUSTER-IP      EXTERNAL-IP      PORT(S)        AGE</span><br><span class="line">kubernetes   ClusterIP      10.43.0.1       &lt;none&gt;           443/TCP        10d</span><br><span class="line">nginx        LoadBalancer   10.43.186.187   192.168.28.211   80:31805/TCP   45s</span><br></pre></td></tr></table></figure><p>这个EXTERNAL-IP就是metallb为我们分配的地址。访问也是正常的。</p><p>至此，我们便实现了本地集群分配ip地址的功能。</p><p>但是问题出现了，当重复尝试定义<code>metadata.annotations.metallb.universe.tf/loadBalancerIPs: 192.168.28.211</code>时，同一个ip地址没法分配给多个服务，即使两个svc是不同的端口。</p><p>这时候我们定义svc就需要指定相应的annotations.</p><blockquote><p>By default, Services do not share IP addresses. If you have a need to colocate services on a single IP, you can enable selective IP sharing by adding the <code>metallb.universe.tf/allow-shared-ip</code> annotation to services.</p></blockquote><p>改造下刚才的yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">metallb.universe.tf/allow-shared-ip:</span> <span class="number">192.168</span><span class="number">.28</span><span class="number">.211</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">loadBalancerIP:</span> <span class="number">192.168</span><span class="number">.28</span><span class="number">.211</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br></pre></td></tr></table></figure><p>这个yaml中，我们指定了svc的loadBalancerIP，并且将这个ip设置为可共享的。</p><p>另一个svc也是一样</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-2</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">metallb.universe.tf/allow-shared-ip:</span> <span class="number">192.168</span><span class="number">.28</span><span class="number">.211</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">loadBalancerIP:</span> <span class="number">192.168</span><span class="number">.28</span><span class="number">.211</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br></pre></td></tr></table></figure><p>再次查看svc可以发现两个svc分配的ip都是192.168.28.211。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到这里我们整个metalLB的接入就完成了，这个也是上一家公司采用的方案。整体搭建下来感觉还是比较简单的，注意点就是地址池定义需要在节点子网里，否则外部根本没法访问，这其中涉及到网络相关的知识。例如我虚拟机子网是192.168.28.0/24，那么地址池必须在这个范围里面，否则路由规则都没有。除非我在本地添加路由</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">route</span> <span class="string">add</span> <span class="number">192.168</span><span class="number">.27</span><span class="number">.0</span> <span class="string">mask</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span> <span class="number">192.168</span><span class="number">.28</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p>那么我就可以访问到非虚拟机子网的地址。原理就是路由到网关然后192.168.28.1网关做了ARP，metalLB响应了ARP请求。那么我们就能访问到了。</p><p>所以网络规划前期就要做好，如果节点子网是/16的话，那么再分配/24网络的话会更加方便，因为上层帮你做了路由，应该也能采用BGP模式，不过我就不尝试了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;k8s默认不提供LoadBalancer实现，一般是云厂商的k8s集群会提供这样的功能，让我们的服务暴露到某个外部ip地址上。个人自建集群的
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="架构" scheme="https://re0.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="运维" scheme="https://re0.top/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="从0.5开始的运维架构之路" scheme="https://re0.top/tags/%E4%BB%8E0-5%E5%BC%80%E5%A7%8B%E7%9A%84%E8%BF%90%E7%BB%B4%E6%9E%B6%E6%9E%84%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>2024面试复盘5</title>
    <link href="https://re0.top/2024/07/17/2024-07-17-replay/"/>
    <id>https://re0.top/2024/07/17/2024-07-17-replay/</id>
    <published>2024-07-17T07:00:00.000Z</published>
    <updated>2024-07-25T05:27:37.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当我想好好复盘一下的时候总是通知我面试。怪不得说找工作是一件很辛苦的事情，既要找机会，又要面试，又要复盘，又要改简历，中途还得穿插学习，有点顶不住，忙里偷闲复盘一下。</p><h1 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h1><p>两个面试放在一起讲了。一个都在问项目另一个八股文比较多。</p><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p>深挖项目，无言。</p><ol><li>任务分片怎么做？</li><li>优化点？</li></ol><h2 id="java和python多线程什么差别？"><a href="#java和python多线程什么差别？" class="headerlink" title="java和python多线程什么差别？"></a>java和python多线程什么差别？</h2><p>原回答：python一般使用threading.Thread直接创建线程，java里一般采用线程池管理线程。python的多线程无法利用到多核优势。</p><p>网上看别人的回答：1.python不是真正的多线程。(GIL的问题)2.Java中，每个线程都有自己的堆栈空间，线程之间的堆栈空间是独立的。Python中，所有线程共享相同的内存空间，因此需要特别小心避免数据竞争和死锁。</p><h2 id="工作最大的挑战是什么？"><a href="#工作最大的挑战是什么？" class="headerlink" title="工作最大的挑战是什么？"></a>工作最大的挑战是什么？</h2><p>项目管理和统筹。</p><h2 id="最近有看什么书"><a href="#最近有看什么书" class="headerlink" title="最近有看什么书"></a>最近有看什么书</h2><p>复盘+。当然也没看多少，时间根本不够。</p><h2 id="多线程编程时，如何确保数据安全"><a href="#多线程编程时，如何确保数据安全" class="headerlink" title="多线程编程时，如何确保数据安全"></a>多线程编程时，如何确保数据安全</h2><p>加锁是比较实用的操作。</p><h2 id="常用的锁？"><a href="#常用的锁？" class="headerlink" title="常用的锁？"></a>常用的锁？</h2><p>java里就是synchronized还有lock，其他的有分布式锁。</p><h2 id="synchronized关键字和java里的可重入锁有什么区别"><a href="#synchronized关键字和java里的可重入锁有什么区别" class="headerlink" title="synchronized关键字和java里的可重入锁有什么区别"></a>synchronized关键字和java里的可重入锁有什么区别</h2><p>这里面试官应该是想说synchronized和ReentrantLock。因为synchronized也是可重入的。</p><ol><li>两者都是可重入锁。</li><li>ReentrantLock可以支持公平和非公平。</li><li>ReentrantLock提供了一种能够中断等待锁的线程的机制，通过 <code>lock.lockInterruptibly()</code> 来实现这个机制。也就是说正在等待的线程可以选择放弃等待，改为处理其他事情。</li><li><strong>可实现选择性通知（锁可以绑定多个条件）</strong>: <code>synchronized</code>关键字与<code>wait()</code>和<code>notify()</code>/<code>notifyAll()</code>方法相结合可以实现等待/通知机制。<code>ReentrantLock</code>类当然也可以实现，但是需要借助于<code>Condition</code>接口与<code>newCondition()</code>方法。</li></ol><h2 id="synchronized关键字加在普通方法和静态方法有什么区别"><a href="#synchronized关键字加在普通方法和静态方法有什么区别" class="headerlink" title="synchronized关键字加在普通方法和静态方法有什么区别"></a>synchronized关键字加在普通方法和静态方法有什么区别</h2><ul><li><strong>修饰实例方法</strong> （锁当前对象实例）</li><li><strong>修饰静态方法</strong> （锁当前类）</li><li><strong>修饰代码块</strong> （锁指定对象/类）</li></ul><h2 id="线程池的几个常用参数"><a href="#线程池的几个常用参数" class="headerlink" title="线程池的几个常用参数"></a>线程池的几个常用参数</h2><p><code>ThreadPoolExecutor</code> 3 个最重要的参数：</p><ul><li><code>corePoolSize</code> : 任务队列未达到队列容量时，最大可以同时运行的线程数量。</li><li><code>maximumPoolSize</code> : 任务队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。</li><li><code>workQueue</code>: 新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。</li></ul><p><code>ThreadPoolExecutor</code>其他常见参数 :</p><ul><li><code>keepAliveTime</code>:线程池中的线程数量大于 <code>corePoolSize</code> 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 <code>keepAliveTime</code>才会被回收销毁。</li><li><code>unit</code> : <code>keepAliveTime</code> 参数的时间单位。</li><li><code>threadFactory</code> :executor 创建新线程的时候会用到。</li><li><code>handler</code> :拒绝策略（后面会单独详细介绍一下）。</li></ul><h2 id="常见拒绝策略策略"><a href="#常见拒绝策略策略" class="headerlink" title="常见拒绝策略策略"></a>常见拒绝策略策略</h2><p><code>ThreadPoolExecutor.AbortPolicy</code>：抛出 <code>RejectedExecutionException</code>来拒绝新任务的处理。</p><p><code>ThreadPoolExecutor.CallerRunsPolicy</code>：调用执行自己的线程运行任务，也就是直接在调用<code>execute</code>方法的线程中运行(<code>run</code>)被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。因此这种策略会降低对于新任务提交速度，影响程序的整体性能。如果你的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话，你可以选择这个策略。</p><p><code>ThreadPoolExecutor.DiscardPolicy</code>：不处理新任务，直接丢弃掉。</p><p><code>ThreadPoolExecutor.DiscardOldestPolicy</code>：此策略将丢弃最早的未处理的任务请求。</p><h2 id="多线程导致死锁的原因"><a href="#多线程导致死锁的原因" class="headerlink" title="多线程导致死锁的原因"></a>多线程导致死锁的原因</h2><ul><li><p>互斥条件：该资源任意一个时刻只由一个线程占用。</p></li><li><p>请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放。</p></li><li><p>不剥夺条件:线程已获得的资源在未使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。</p></li><li><p>循环等待条件:若干线程之间形成一种头尾相接的循环等待资源关系。</p></li></ul><h2 id="死锁的检测和避免"><a href="#死锁的检测和避免" class="headerlink" title="死锁的检测和避免"></a>死锁的检测和避免</h2><p>使用<code>jmap</code>、<code>jstack</code>等命令查看 JVM 线程栈和堆内存的情况。如果有死锁，<code>jstack</code> 的输出中通常会有 <code>Found one Java-level deadlock:</code>的字样，后面会跟着死锁相关的线程信息。另外，实际项目中还可以搭配使用<code>top</code>、<code>df</code>、<code>free</code>等命令查看操作系统的基本情况，出现死锁可能会导致 CPU、内存等资源消耗过高。</p><p><strong>如何预防死锁？</strong> 破坏死锁的产生的必要条件即可：</p><ol><li><strong>破坏请求与保持条件</strong>：一次性申请所有的资源。</li><li><strong>破坏不剥夺条件</strong>：占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源。</li><li><strong>破坏循环等待条件</strong>：靠按序申请资源来预防。按某一顺序申请资源，释放资源则反序释放。破坏循环等待条件。</li></ol><p>避免死锁就是在资源分配时，借助于算法（比如银行家算法）对资源分配进行计算评估，使其进入安全状态。</p><h2 id="有一个任务需要等待几个子任务执行完成，需要怎么实现"><a href="#有一个任务需要等待几个子任务执行完成，需要怎么实现" class="headerlink" title="有一个任务需要等待几个子任务执行完成，需要怎么实现"></a>有一个任务需要等待几个子任务执行完成，需要怎么实现</h2><p>Semaphore，CountDownLatch， CyclicBarrier。</p><p>假设有四个子任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(-<span class="number">4</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 处理逻辑</span></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        semaphore.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">semaphore.acquire();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 处理逻辑</span></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">countDownLatch.await();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> CyclicBarrier cb = <span class="keyword">new</span> CyclicBarrier(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 处理逻辑</span></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        cb.await();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">cb.await();</span><br></pre></td></tr></table></figure><h2 id="sql查询慢怎么排查？加了索引还是比较慢怎么排查"><a href="#sql查询慢怎么排查？加了索引还是比较慢怎么排查" class="headerlink" title="sql查询慢怎么排查？加了索引还是比较慢怎么排查"></a>sql查询慢怎么排查？加了索引还是比较慢怎么排查</h2><p>使用explain检查sql。</p><p>优化手段：</p><ol><li>避免使用select * ，原因是会消耗更多CPU，增加带宽，无法使用mysql优化器覆盖索引的优化。</li><li>分页优化。使用子查询或内连接，使用子查询的id作为主查询的条件。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `score`, `name` <span class="keyword">FROM</span> `cus_order`</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">&gt;=</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> `cus_order` LIMIT <span class="number">1000000</span>, <span class="number">1</span>)</span><br><span class="line">LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>尽量避免多表做 join</strong></li><li><strong>建议不要使用外键与级联</strong></li><li><strong>选择合适的字段类型</strong>。某些字符串可以转换成数字类型存储比如可以将 IP 地址转换成整型数据；对于非负型的数据 (如自增 ID,整型 IP，年龄) 来说,要优先使用无符号整型来存储；小数值类型（比如年龄、状态表示如 0/1）优先使用 TINYINT 类型；对于日期类型来说， 一定不要用字符串存储日期。可以考虑 DATETIME、TIMESTAMP 和 数值型时间戳；金额字段用 decimal，避免精度丢失；尽量使用自增 id 作为主键；不建议使用 NULL 作为列默认值；</li></ol><h2 id="索引失效的场景"><a href="#索引失效的场景" class="headerlink" title="索引失效的场景"></a>索引失效的场景</h2><ul><li>SELECT * 不会直接导致索引失效（如果不走索引大概率是因为 where 查询范围过大导致的），但它可能会带来一些其他的性能问题比如造成网络传输和数据处理的浪费、无法使用索引覆盖;</li><li>创建了组合索引，但查询条件未准守最左匹配原则;</li><li>在索引列上进行计算、函数、类型转换等操作;</li><li>以 % 开头的 LIKE 查询比如 LIKE ‘%abc’;;</li><li>查询条件中使用 OR，且 OR 的前后条件中有一个列没有索引，涉及的索引都不会被使用到;</li><li>IN 的取值范围较大时会导致索引失效，走全表扫描(NOT IN 和 IN 的失效场景相同);<br>发生<a href="https://javaguide.cn/database/mysql/index-invalidation-caused-by-implicit-conversion.html">隐式转换</a>;</li></ul><h2 id="未满足最左匹配为什么会索引失效"><a href="#未满足最左匹配为什么会索引失效" class="headerlink" title="未满足最左匹配为什么会索引失效"></a>未满足最左匹配为什么会索引失效</h2><p>在 InnoDB 中联合索引只有先确定了前一个（左侧的值）后，才能确定下一个值。</p><h2 id="innoDb索引结构？b-树有什么优点？"><a href="#innoDb索引结构？b-树有什么优点？" class="headerlink" title="innoDb索引结构？b+树有什么优点？"></a>innoDb索引结构？b+树有什么优点？</h2><p>innodb使用B+树。</p><ol><li>由于B+树在内部节点上不包含数据信息，因此在<strong>内存页中能够存放更多的key</strong>。 数据存放的更加紧密，具有更好的空间局部性。因此访问叶子节点上关联的数据也具有更好的缓存命中率。</li><li>B+树的叶子结点都是相链的，因此对整棵树的便利只需要一次线性遍历叶子结点即可。而且由于数据顺序排列并且相连，所以便于<strong>区间查找和搜索</strong>。而B树则需要进行每一层的递归遍历。相邻的元素可能在内存中不相邻，所以缓存命中性没有B+树好。</li></ol><h2 id="代码里如何管理事务的？事务没生效的场景？"><a href="#代码里如何管理事务的？事务没生效的场景？" class="headerlink" title="代码里如何管理事务的？事务没生效的场景？"></a>代码里如何管理事务的？事务没生效的场景？</h2><p>声明式事务，@Transactional。当然也可以用代码手动开启一个事务，称作编程式事务。</p><p>失效场景：</p><ol><li>没有被spring代理。如将注解标注在接口方法上，被final、static关键字修饰的类或方法，类方法内部调用</li><li>框架不支持。非public修饰的方法，spring底层直接限制事务管理；多线程，一个事务是建立在一个数据库连接上的；数据库本身不支持事务，比如myisam</li><li>错误使用@Transactional。错误的传播机制；rollbackFor设置错误，默认情况下事务仅回滚运行时异常和Error；内部异常被catch</li></ol><h2 id="分布式事务有用过吗？"><a href="#分布式事务有用过吗？" class="headerlink" title="分布式事务有用过吗？"></a>分布式事务有用过吗？</h2><p><strong>CAP 理论和 BASE 理论</strong>。<strong>CAP</strong> 也就是 <strong>Consistency（一致性）</strong>、<strong>Availability（可用性）</strong>、<strong>Partition Tolerance（分区容错性）</strong> 这三个单词首字母组合。</p><p>CAP 定理（CAP theorem）指出对于一个分布式系统来说，当设计读写操作时，只能能同时满足以下三点中的两个：</p><ul><li><strong>一致性（Consistence）</strong> : 所有节点访问同一份最新的数据副本</li><li><strong>可用性（Availability）</strong>: 非故障的节点在合理的时间内返回合理的响应（不是错误或者超时的响应）。</li><li><strong>分区容错性（Partition tolerance）</strong> : 分布式系统出现网络分区的时候，仍然能够对外提供服务。</li></ul><p>CAP 理论中分区容错性 P 是一定要满足的，在此基础上，只能满足可用性 A 或者一致性 C。</p><p><strong>为啥无同时保证 CA 呢？</strong></p><p>举个例子：若系统出现“分区”，系统中的某个节点在进行写操作。为了保证 C， 必须要禁止其他节点的读写操作，这就和 A 发生冲突了。如果为了保证 A，其他节点的读写操作正常的话，那就和 C 发生冲突了。</p><p><strong>选择的关键在于当前的业务场景，没有定论，比如对于需要确保强一致性的场景如银行一般会选择保证 CP 。</strong></p><p><strong>BASE</strong> 是 <strong>Basically Available（基本可用）</strong> 、<strong>Soft-state（软状态）</strong> 和 <strong>Eventually Consistent（最终一致性）</strong> 三个短语的缩写。BASE 理论是对 CAP 中一致性 C 和可用性 A 权衡的结果，其来源于对大规模互联网系统分布式实践的总结，是基于 CAP 定理逐步演化而来的，它大大降低了我们对系统的要求。</p><p><strong>BASE 理论本质上是对 CAP 的延伸和补充，更具体地说，是对 CAP 中 AP 方案的一个补充。</strong></p><p>分布式一致性的 3 种级别：</p><ol><li><strong>强一致性</strong> ：系统写入了什么，读出来的就是什么。</li><li><strong>弱一致性</strong> ：不一定可以读取到最新写入的值，也不保证多少时间之后读取到的数据是最新的，只是会尽量保证某个时刻达到数据一致的状态。</li><li><strong>最终一致性</strong> ：弱一致性的升级版。，系统会保证在一定时间内达到数据一致的状态，</li></ol><p><strong>业界比较推崇是最终一致性级别，但是某些对数据一致要求十分严格的场景比如银行转账还是要保证强一致性。</strong></p><p>分布式事务的解决方案有很多，比如：2PC、3PC、TCC、本地消息表、MQ 事务（Kafka 和 RocketMQ 都提供了事务相关功能） 、Saga 等等。</p><p>2PC 将事务的提交过程分为 2 个阶段：准备阶段 和 提交阶段 。</p><p>准备阶段的核心是“询问”事务参与者执行本地数据库事务操作是否成功。</p><ol><li>事务协调者/管理者（后文简称 TM） 向所有涉及到的 事务参与者（后文简称 RM） 发送消息询问：“你是否可以执行事务操作呢？”，并等待其答复。</li><li>RM 接收到消息之后，开始执行本地数据库事务预操作比如写 redo log/undo log 日志，此时并不会提交事务 。</li><li>RM 如果执行本地数据库事务操作成功，那就回复“Yes”表示我已就绪，否则就回复“No”表示我未就绪。</li></ol><p>提交阶段的核心是“询问”事务参与者提交本地事务是否成功。</p><p>当所有事务参与者都是“就绪”状态的话：</p><ol><li>TM 向所有参与者发送消息：“你们可以提交事务啦！”（Commit 消息）</li><li>RM 接收到 Commit 消息 后执行 提交本地数据库事务 操作，执行完成之后 释放整个事务期间所占用的资源。</li><li>RM 回复：“事务已经提交” （ACK 消息）。</li><li>TM 收到所有 事务参与者 的 ACK 消息 之后，整个分布式事务过程正式结束。</li></ol><p>当任一事务参与者是“未就绪”状态的话：</p><ol><li>TM 向所有参与者发送消息：“你们可以执行回滚操作了！”（Rollback 消息）。</li><li>RM 接收到 Rollback 消息 后执行 本地数据库事务回滚 执行完成之后 释放整个事务期间所占用的资源。</li><li>RM 回复：“事务已经回滚” （ACK 消息）。</li><li>TM 收到所有 RM 的 ACK 消息 之后，中断事务。</li></ol><p>2PC 的优点：</p><ul><li>实现起来非常简单，各大主流数据库比如 MySQL、Oracle 都有自己实现。</li><li>针对的是数据强一致性。不过，仍然可能存在数据不一致的情况。</li></ul><p>2PC 存在的问题：</p><ul><li>同步阻塞 ：事务参与者会在正式提交事务之前会一直占用相关的资源。比如用户小明转账给小红，那其他事务也要操作用户小明或小红的话，就会阻塞。</li><li>数据不一致 ：由于网络问题或者TM宕机都有可能会造成数据不一致的情况。比如在第2阶段（提交阶段），部分网络出现问题导致部分参与者收不到 Commit/Rollback 消息的话，就会导致数据不一致。</li><li>单点问题 ： TM在其中也是一个很重要的角色，如果TM在准备(Prepare)阶段完成之后挂掉的话，事务参与者就会一直卡在提交(Commit)阶段。</li></ul><p>3PC 是人们在 2PC 的基础上做了一些优化得到的。3PC 把 2PC 中的 准备阶段(Prepare) 做了进一步细化，分为 2 个阶段：</p><ul><li>准备阶段(CanCommit)</li><li>预提交阶段(PreCommit)</li></ul><p>准备阶段 RM 不会执行事务操作，TM 只是向 RM 发送 准备请求 ，顺便询问一些信息比如事务参与者能否执行本地数据库事务操作。RM 回复“Yes”、“No”或者直接超时未回复。</p><p>如果准备阶段所有的 RM 回复 “Yes”的话，TM 就会向所有的 RM 发送 PreCommit 消息（预提交请求） ，RM 收到消息之后会执行本地数据库事务预操作比如写 redo log/undo log 日志。</p><p>如果准备阶段有任一 RM 回复“NO” 或者直接超时未回复的话，TM 就会给所有 RM 发送 Abort 消息（中断请求） ，RM 收到消息后直接中断事务。这样其实对 RM 来说损失并不大，因为本质上 RM 到现在还并没有实际做什么事情。</p><p>如果 RM 成功的执行了事务预操作，就返回 “YES”。否则，返回“No”（最后的反悔机会）。</p><p>预提交阶段 TM 与 RM 都引入了超时机制，如果 参与者 没有收到 TM 的 PreCommit 消息，或者 TM 没有收到参与者返回的预执行结果状态，那么在超过等待时间后，事务就会中断，这就避免了事务的阻塞。</p><p>3PC 还同时在事务管理者和事务参与者中引入了 超时机制 ，如果在一定时间内没有收到事务参与者的消息就默认失败，进而避免事务参与者一直阻塞占用资源。2PC 中只有事务管理者才拥有超时机制，当事务参与者长时间无法与事务协调者通讯的情况下（比如协调者挂掉了），就会导致无法释放资源阻塞的问题。</p><p>不过，3PC 并没有完美解决 2PC 的阻塞问题，引入了一些新问题比如性能糟糕，而且，依然存在数据不一致性问题。因此，3PC 的实际应用并不是很广泛，多数应用会选择通过复制状态机解决 2PC 的阻塞问题。</p><p><strong>TCC（补偿事务）</strong></p><ol><li>Try（尝试）阶段 : 尝试执行。完成业务检查，并预留好必需的业务资源。</li><li>Confirm（确认）阶段 ：确认执行。当所有事务参与者的 Try 阶段执行成功就会执行 Confirm ，Confirm 阶段会处理 Try 阶段预留的业务资源。否则，就会执行 Cancel 。</li><li>Cancel（取消）阶段 ：取消执行，释放 Try 阶段预留的业务资源。</li></ol><p>TCC 模式不需要依赖于底层数据资源的事务支持，但是需要我们手动实现更多的代码，属于 侵入业务代码 的一种分布式解决方案。</p><ul><li>2PC/3PC 依靠数据库或者存储资源层面的事务，TCC 主要通过修改业务代码来实现。</li><li>2PC/3PC 属于业务代码无侵入的，TCC 对业务代码有侵入。</li><li>2PC/3PC 追求的是强一致性，在两阶段提交的整个过程中，一直会持有数据库的锁。TCC 追求的是最终一致性，不会一直持有各个业务资源的锁。</li></ul><p><strong>MQ 事务</strong></p><p>RocketMQ 、 Kafka、Pulsar 、QMQ 都提供了事务相关的功能。事务允许事件流应用将消费，处理，生产消息整个过程定义为一个原子操作。</p><ol><li>MQ 发送方（比如物流服务）在消息队列上开启一个事务，然后发送一个“半消息”给 MQ Server/Broker。事务提交之前，半消息对于 MQ 订阅方/消费者（比如第三方通知服务）不可见</li><li>“半消息”发送成功的话，MQ 发送方就开始执行本地事务。</li><li>MQ 发送方的本地事务执行成功的话，“半消息”变成正常消息，可以正常被消费。MQ 发送方的本地事务执行失败的话，会直接回滚。</li></ol><p>MQ 的事务消息使用的是两阶段提交（2PC）</p><h2 id="好的Java代码应该具备什么？"><a href="#好的Java代码应该具备什么？" class="headerlink" title="好的Java代码应该具备什么？"></a>好的Java代码应该具备什么？</h2><p>开放题，最关键的应该是代码可读。</p><h2 id="面向对象编程的五个基本原则"><a href="#面向对象编程的五个基本原则" class="headerlink" title="面向对象编程的五个基本原则"></a>面向对象编程的五个基本原则</h2><p><strong>单一功能、开闭原则、里氏替换、接口隔离</strong>以及<strong>依赖反转</strong></p><p>啊这，完全没印象了。</p><h2 id="常用的设计模式？"><a href="#常用的设计模式？" class="headerlink" title="常用的设计模式？"></a>常用的设计模式？</h2><p>4年前写的一系列文章。需要再好好看看。</p><h2 id="策略模式跟模板模式的区别"><a href="#策略模式跟模板模式的区别" class="headerlink" title="策略模式跟模板模式的区别"></a>策略模式跟模板模式的区别</h2><p><a href="https://re0.top/2020/08/27/strategy_pattern/">策略模式</a><br><a href="https://re0.top/2020/09/08/template_method_pattern/">模板方法模式</a></p><p><code>模板模式一般只针对一套算法</code>，注重对同一个算法的不同细节进行抽象提供不同的实现。而<code>策略模式注重多套算法多套实现</code>，在算法中间不应该有交集，因此算法和算法只间一般不会有冗余代码！</p><p>策略模式关注多种算法，模板模式关注一种算法。策略模式不同策略之间代码很少冗余。</p><h2 id="redis的场景？分布式锁的场景？为什么采用redis做分布式锁？"><a href="#redis的场景？分布式锁的场景？为什么采用redis做分布式锁？" class="headerlink" title="redis的场景？分布式锁的场景？为什么采用redis做分布式锁？"></a>redis的场景？分布式锁的场景？为什么采用redis做分布式锁？</h2><p>之前复盘过。<strong>redis具有高效性、原子性操作、过期时间设置、Lua脚本支持以及高可用性和容错性等特性，使其成为一种可靠的分布式锁解决方案</strong></p><h2 id="不使用redis做分布式锁可以用哪些替代？"><a href="#不使用redis做分布式锁可以用哪些替代？" class="headerlink" title="不使用redis做分布式锁可以用哪些替代？"></a>不使用redis做分布式锁可以用哪些替代？</h2><p>用数据库的悲观锁。之前看xxl的原理时有涉及到。</p><h2 id="用数据库如何做分布式锁？锁名称的产生逻辑？"><a href="#用数据库如何做分布式锁？锁名称的产生逻辑？" class="headerlink" title="用数据库如何做分布式锁？锁名称的产生逻辑？"></a>用数据库如何做分布式锁？锁名称的产生逻辑？</h2><p>select for update + 唯一索引。</p><p>锁名称应满足唯一性，如订单号。</p><h2 id="kafka和rabbitmq有什么区别"><a href="#kafka和rabbitmq有什么区别" class="headerlink" title="kafka和rabbitmq有什么区别"></a>kafka和rabbitmq有什么区别</h2><p>前两篇复盘过。其实差别不是很大。</p><h2 id="kafka的结构？"><a href="#kafka的结构？" class="headerlink" title="kafka的结构？"></a>kafka的结构？</h2><p><strong>Producer:</strong> 特指消息的生产者<br><strong>Consumer :</strong> 特指消息的消费者<br>**Consumer Group : **消费者组，可以并行消费Topic中partition的消息<br><strong>Broker：</strong>缓存代理，Kafa 集群中的一台或多台服务器统称为 broker。<br><strong>Topic：</strong>特指 Kafka 处理的消息源（feeds of messages）的不同分类。<br><strong>Partition：</strong>Topic 物理上的分组，一个 topic 可以分为多个 partition，每个 partition 是一个有序的队列。partition 中的每条消息都会被分配一个有序的 id（offset）<br><strong>Message：</strong>消息，是通信的基本单位，每个 producer 可以向一个 topic（主题）发布一些消息<br><strong>Producers(是个动词)：</strong>消息和数据生产者，向 Kafka 的一个 topic 发布消息的过程叫做 producers<br><strong>Consumers(是个动词)：</strong>消息和数据消费者，订阅 topics 并处理其发布的消息的过程叫做 consumers</p><p>Kafka通过Zookeeper存储集群的meta等信息。</p><p>一个Topic可以认为是一类信息，逻辑上的队列，每条消息都要指定Topic。为了使得Kafka的吞吐量可以线性提高，物理上将Topic分成一个或多个Partition。每个Partition在存储层面时append log文件，消息push进来后，会被追加到log文件的尾部，每条消息在文件中的位置成为offset(偏移量)，offset是一个long型数字，唯一的标识一条信息。因为每条消息都追加到Partition的尾部，所以属于磁盘的顺序写，效率很高。</p><h2 id="如何保证消息的可靠性"><a href="#如何保证消息的可靠性" class="headerlink" title="如何保证消息的可靠性"></a>如何保证消息的可靠性</h2><p>之前有讲过。</p><h2 id="解决过生产上什么问题？"><a href="#解决过生产上什么问题？" class="headerlink" title="解决过生产上什么问题？"></a>解决过生产上什么问题？</h2><p>答得不好。回答了一个排查cpu内存过高的一个步骤逻辑，重新整理下。</p><h2 id="watchdog的原理"><a href="#watchdog的原理" class="headerlink" title="watchdog的原理"></a>watchdog的原理</h2><p>之前复盘过。</p><h2 id="通过创建不过期的key实现锁会有什么问题"><a href="#通过创建不过期的key实现锁会有什么问题" class="headerlink" title="通过创建不过期的key实现锁会有什么问题"></a>通过创建不过期的key实现锁会有什么问题</h2><p>异常情况锁无法释放。</p><h2 id="锁续期失败后的处理逻辑"><a href="#锁续期失败后的处理逻辑" class="headerlink" title="锁续期失败后的处理逻辑"></a>锁续期失败后的处理逻辑</h2><p>watchdog中锁续期失败后不再续期。</p><h2 id="rabbitmq其他队列了解过吗"><a href="#rabbitmq其他队列了解过吗" class="headerlink" title="rabbitmq其他队列了解过吗"></a>rabbitmq其他队列了解过吗</h2><p>这里回答错了，我们用的Fanout、<em>Direct</em>、Topic指的是交换机的类型。</p><p>Classic，Quorum，Stream才是队列类型。<strong>经典队列</strong>是 RabbitMQ 提供的原始队列类型，一般我们使用的都是这个。</p><p>仲裁队列Quorum在分布式环境下对消息的可靠性保障更高。官方文档中明确表示，未来可能会使用Quorum仲裁队列来替代传统的Classic队列。Quorum队列基于Raft一致性协议实现，是一种新型的分布式消息队列。与Classic队列相比，Quorum队列以牺牲部分高级队列特性为代价，来换取更高的消息可靠性。</p><table><thead><tr><th>特性</th><th><code>Classic</code></th><th><code>Quorum</code></th></tr></thead><tbody><tr><td>非持久化队列（<code>Non-durable queues</code>）</td><td>支持</td><td>不支持</td></tr><tr><td>独占队列（<code>Exclusivity</code>）</td><td>支持</td><td>不支持</td></tr><tr><td>每条消息的持久化（<code>Per message persistence</code>）</td><td>每条消息</td><td>总是</td></tr><tr><td>会员变更（<code>Membership changes</code>）</td><td>自动</td><td>手动</td></tr><tr><td>消息<code>TTL</code>（<code>Message TTL</code>）</td><td>支持</td><td>支持（3.10版本开始）</td></tr><tr><td>队列<code>TTL</code>（<code>Queue TTL</code>）</td><td>支持</td><td>支持</td></tr><tr><td>队列长度限制（<code>Queue length limits</code>）</td><td>支持</td><td>支持</td></tr><tr><td>懒加载（<code>Lazy behaviour</code>）</td><td>支持</td><td>始终</td></tr><tr><td>消息优先级（<code>Message priority</code>）</td><td>支持</td><td>不支持</td></tr><tr><td>消费者优先级（<code>Consumer priority</code>）</td><td>支持</td><td>支持</td></tr><tr><td>死信交换（<code>Dead letter exchanges</code>）</td><td>支持</td><td>支持</td></tr><tr><td>毒消息处理（<code>Poison message handling</code>）</td><td>不支持</td><td>支持</td></tr><tr><td>全局<code>Qos</code>（<code>Global QoS Prefetch</code>）</td><td>支持</td><td>不支持</td></tr></tbody></table><p><code>Stream</code>队列是<code>RabbitMQ</code>自<code>3.9.0</code>版本开始引入的一种新的数据队列类型，也是目前官方最为推荐的队列类型。这种队列类型的消息是持久化到磁盘并且具备分布式备份的，更适合于消费者多，读消息非常频繁的场景</p><ul><li>大规模分发（<code>large fan-outs</code>）</li></ul><p>当想要向多个订阅者发送相同的消息时，以往的队列类型必须为每个消费者绑定一个专用的队列。如果消费者的数量很大，这就会导致性能低下。而<code>Stream</code>队列允许任意数量的消费者使用同一个队列的消息，从而消除绑定多个队列的需求。</p><ul><li>消息回溯（<code>Replay/Time-travelling</code>）</li></ul><p><code>RabbitMQ</code>已有的这些队列类型，在消费者处理完消息后，消息都会从队列中删除，因此，无法重新读取已经消费过的消息。而<code>Stream</code>队列允许用户在日志的任何一个连接点开始重新读取数据。</p><ul><li>高吞吐性能（<code>Throughput Performance</code>）</li></ul><p><code>Stream</code>队列的设计以性能为主要目标，对消息传递吞吐量的提升非常明显。</p><ul><li>大日志（<code>Large logs</code>）</li></ul><p><code>RabbitMQ</code>一直以来有一个让人诟病的地方，就是当队列中积累的消息过多时，性能下降会非常明显。但是<code>Stream</code>队列的设计目标就是以最小的内存开销高效地存储大量的数据。</p><h2 id="rabbitmq的灰度发布策略"><a href="#rabbitmq的灰度发布策略" class="headerlink" title="rabbitmq的灰度发布策略?"></a>rabbitmq的灰度发布策略?</h2><p>这个我猜测面试官是想问服务的发布顺序，因为他后面又问了一下。发布顺序肯定是新消费者新生产者，下线旧生产者旧消费者。</p><p>但是这个确实也引出了我的一个思考，如果说消费的逻辑有改变，那么怎么进行灰度？</p><p>首先应该老消费逻辑和新消费逻辑都要保留，提供过渡。生产者只保留新的也没问题，如果是要基于逻辑的一个灰度，那么可能业务上也需要配合，毕竟有些灰度逻辑网关没法保证始终落在新副本上。</p><h2 id="mq的流量大概有多少"><a href="#mq的流量大概有多少" class="headerlink" title="mq的流量大概有多少"></a>mq的流量大概有多少</h2><p>目前是800-1000左右。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;当我想好好复盘一下的时候总是通知我面试。怪不得说找工作是一件很辛苦的事情，既要找机会，又要面试，又要复盘，又要改简历，中途还得穿插学习，有点
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="随想" scheme="https://re0.top/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="面经" scheme="https://re0.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>【架构之路5】搭建redis集群</title>
    <link href="https://re0.top/2024/07/16/devops5/"/>
    <id>https://re0.top/2024/07/16/devops5/</id>
    <published>2024-07-16T13:30:00.000Z</published>
    <updated>2024-07-18T13:29:13.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>竟然被问到了redis集群了不了解，我除了主从其他还没搭建过，这篇就搭建下redis的主从模式，哨兵模式，Cluster模式。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="主从模式"><a href="#主从模式" class="headerlink" title="主从模式"></a>主从模式</h2><p>这个模式老简单了，读写分离嘛。看我快速写出k8s编排文件。一主一从。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-master-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis-master-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">redis-master</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redis-master</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">redis-master</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-master</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">redis:7.0</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6379</span></span><br><span class="line">          <span class="attr">args:</span> [<span class="string">&quot;--requirepass&quot;</span>, <span class="string">&quot;test&quot;</span>]</span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-master-service-nodeport</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis-master</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">6379</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-master-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis-master</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">6379</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-slave-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis-slave-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">redis-slave</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redis-slave</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">redis-slave</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-slave</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">redis:7.0</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6379</span></span><br><span class="line">          <span class="attr">args:</span> [<span class="string">&quot;--requirepass&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;--replicaof&quot;</span>, <span class="string">&quot;redis-master-service&quot;</span>, <span class="string">&quot;6379&quot;</span>, <span class="string">&quot;--masterauth&quot;</span>, <span class="string">&quot;test&quot;</span>]</span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-slave-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis-slave</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><p>这里能优化的是把配置挪到configMap中。再加节点也是一样的，可以把slave副本拉上去，也可以多加一个service。</p><h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><p>这个模式用k8s部署坑还是比较多的，参考了网上的<a href="https://juejin.cn/post/7339364757386002468">一些文章</a>。但是使用起来也是有一些问题。</p><p>坑点：</p><ol><li>sentinel集群外部连接比较困难，当然这个可以配合ktconnect来做。</li><li>sentinel的配置文件无法直接挂载configmap，因为启动sentinel是会检查配置文件是否可写。。。这个看了下执行日志发现会自动更改配置文件。</li><li>由2可知，不想改镜像的话得动态写入配置文件到卷中。</li></ol><p>参照网上的教程，我也照猫画虎搞了一下。</p><p>先是配置secret，存储redis和sentinel的密码，这里密码都是同一个。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-secret</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">stringData:</span></span><br><span class="line">  <span class="attr">REDIS_PASSWORD:</span> <span class="string">&quot;test&quot;</span></span><br></pre></td></tr></table></figure><p>redis的配置文件和初始化脚本</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-config-map</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">REDIS_NODES:</span> <span class="string">&quot;redis-0.redis,redis-1.redis,redis-2.redis&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis.conf:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    bind 0.0.0.0</span></span><br><span class="line"><span class="string">    protected-mode no</span></span><br><span class="line"><span class="string">    port 6379</span></span><br><span class="line"><span class="string">    tcp-backlog 511</span></span><br><span class="line"><span class="string">    timeout 10</span></span><br><span class="line"><span class="string">    tcp-keepalive 30</span></span><br><span class="line"><span class="string">    daemonize no</span></span><br><span class="line"><span class="string">    supervised no</span></span><br><span class="line"><span class="string">    pidfile &quot;/var/run/redis_6379.pid&quot;</span></span><br><span class="line"><span class="string">    loglevel notice</span></span><br><span class="line"><span class="string">    logfile &quot;&quot;</span></span><br><span class="line"><span class="string">    databases 16</span></span><br><span class="line"><span class="string">    always-show-logo yes</span></span><br><span class="line"><span class="string">    save &quot;&quot;</span></span><br><span class="line"><span class="string">    stop-writes-on-bgsave-error yes</span></span><br><span class="line"><span class="string">    rdbcompression yes</span></span><br><span class="line"><span class="string">    rdbchecksum yes</span></span><br><span class="line"><span class="string">    rdb-del-sync-files no</span></span><br><span class="line"><span class="string">    dir &quot;/data&quot;</span></span><br><span class="line"><span class="string">    replica-serve-stale-data yes</span></span><br><span class="line"><span class="string">    replica-read-only yes</span></span><br><span class="line"><span class="string">    repl-diskless-sync no</span></span><br><span class="line"><span class="string">    repl-diskless-sync-delay 5</span></span><br><span class="line"><span class="string">    repl-diskless-load disabled</span></span><br><span class="line"><span class="string">    appendonly no</span></span><br><span class="line"><span class="string">    repl-disable-tcp-nodelay no</span></span><br><span class="line"><span class="string">    replica-priority 100</span></span><br><span class="line"><span class="string">    acllog-max-len 128</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-init-script-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">sentinel_init.sh:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    #! /bin/bash</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="string">for</span> <span class="string">i</span> <span class="string">in</span> <span class="string">$&#123;REDIS_NODES//,/</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="string">do</span></span><br><span class="line">      <span class="string">echo</span> <span class="string">&quot;find master at $i&quot;</span></span><br><span class="line">      <span class="string">MASTER=$(redis-cli</span> <span class="string">--no-auth-warning</span> <span class="string">--raw</span> <span class="string">-h</span> <span class="string">$i</span> <span class="string">-a</span> <span class="string">$&#123;REDIS_PASSWORD&#125;</span> <span class="string">info</span> <span class="string">replication</span> <span class="string">|</span> <span class="string">awk</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> <span class="string">|</span> <span class="attr">grep master_host:</span> <span class="string">|</span> <span class="string">cut</span> <span class="string">-d</span> <span class="string">&quot;:&quot;</span> <span class="string">-f2)</span></span><br><span class="line">      <span class="string">if</span> [ <span class="string">&quot;$&#123;MASTER&#125;&quot;</span> <span class="string">==</span> <span class="string">&quot;&quot;</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;no master found&quot;</span></span><br><span class="line">          <span class="string">MASTER=</span></span><br><span class="line">      <span class="string">else</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;found $&#123;MASTER&#125;&quot;</span></span><br><span class="line">          <span class="string">break</span></span><br><span class="line">      <span class="string">fi</span></span><br><span class="line">    <span class="string">done</span></span><br><span class="line"></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel resolve-hostnames yes&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel announce-hostnames yes&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel monitor mymaster $&#123;MASTER&#125; 6379 2&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel auth-pass mymaster $&#123;REDIS_PASSWORD&#125;&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel down-after-milliseconds mymaster 5000&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel sentinel-pass $&#123;REDIS_PASSWORD&#125;&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel parallel-syncs mymaster 1&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel failover-timeout mymaster 10000&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;requirepass $&#123;REDIS_PASSWORD&#125;&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel announce-ip $&#123;HOSTNAME&#125;.sentinel&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line"></span><br><span class="line">    <span class="string">cat</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">redis_init.sh:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    #! /bin/bash</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="string">cp</span> <span class="string">/tmp/redis/redis.conf</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;requirepass $&#123;REDIS_PASSWORD&#125;&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;masterauth $&#123;REDIS_PASSWORD&#125;&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;replica-announce-ip $&#123;HOSTNAME&#125;.redis&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;replica-announce-port 6379 &quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;finding master...&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">if</span> [ <span class="string">&quot;$(timeout 5 redis-cli -h sentinel -p 26379 -a $&#123;REDIS_PASSWORD&#125; ping)&quot;</span> <span class="type">!=</span> <span class="string">&quot;PONG&quot;</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line"></span><br><span class="line">      <span class="string">echo</span> <span class="string">&quot;sentinel not found, defaulting to redis-0&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="string">if</span> [ <span class="string">$</span>&#123;<span class="string">HOSTNAME</span>&#125; <span class="string">==</span> <span class="string">&quot;redis-0&quot;</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;this is redis-0, not updating config...&quot;</span></span><br><span class="line">      <span class="string">else</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;updating redis.conf...&quot;</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;repl-ping-replica-period 3&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;slave-read-only no&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;slaveof redis-0.redis 6379&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">      <span class="string">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="string">else</span></span><br><span class="line"></span><br><span class="line">      <span class="string">echo</span> <span class="string">&quot;sentinel found, finding master&quot;</span></span><br><span class="line">      <span class="string">MASTER=&quot;$(redis-cli</span> <span class="string">-h</span> <span class="string">sentinel</span> <span class="string">-p</span> <span class="number">26379</span> <span class="string">-a</span> <span class="string">$&#123;REDIS_PASSWORD&#125;</span> <span class="string">sentinel</span> <span class="string">get-master-addr-by-name</span> <span class="string">mymaster</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">-E</span> <span class="string">&#x27;(^redis-*)|([0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;)&#x27;</span><span class="string">)&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="string">if</span> [ <span class="string">&quot;$&#123;HOSTNAME&#125;.redis&quot;</span> <span class="string">==</span> <span class="string">$</span>&#123;<span class="string">MASTER</span>&#125; ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;this is master, not updating config...&quot;</span></span><br><span class="line">      <span class="string">else</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;master found : $&#123;MASTER&#125;, updating redis.conf&quot;</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;slave-read-only no&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;slaveof $&#123;MASTER&#125; 6379&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;repl-ping-replica-period 3&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">      <span class="string">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="string">fi</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>这里稍微解释一下这个初始化脚本。首先讲讲redis_init.sh吧，首先我们会挂载 redis-config-map到/tmp/redis目录，把配置文件拷贝到/etc/redis/redis.conf作为我们真正的配置文件。然后就开始判断当前是否有sentinel且当前节点是否为主节点了。<code>redis-cli -h sentinel -p 26379 -a $&#123;REDIS_PASSWORD&#125; ping</code>是检查sentinel是否可用。而下面的MASTER则是判断当前节点是否是主节点。如果不是主节点，那么就添加slaveof到主节点，这里有个问题，就是slave-read-only应不应该是no。这里我尝试了一下，非master节点如果可写的话，其实同步不到主节点去。</p><p>然后说说sentinel_init.sh。先遍历所有redis节点，然后找出master节点，然后把配置文件写到/etc/redis/sentinel.conf中供后续使用。</p><p>然后是redis节点的部署。采用statefulSet部署。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">initContainers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">redis:7.0</span></span><br><span class="line">        <span class="attr">env:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">REDIS_PASSWORD</span></span><br><span class="line">            <span class="attr">valueFrom:</span></span><br><span class="line">              <span class="attr">secretKeyRef:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">redis-secret</span></span><br><span class="line">                <span class="attr">key:</span> <span class="string">REDIS_PASSWORD</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;/scripts/redis_init.sh&quot;</span>]</span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span>  <span class="string">redis-config</span></span><br><span class="line">            <span class="attr">mountPath:</span>  <span class="string">/etc/redis/</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-scripts</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/scripts/</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">origin-config</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/tmp/redis</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">redis:7.0</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">args:</span> [<span class="string">&quot;/etc/redis/redis.conf&quot;</span>]</span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6379</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span>  <span class="string">redis-config</span></span><br><span class="line">              <span class="attr">mountPath:</span>  <span class="string">/etc/redis/</span></span><br><span class="line">             <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span>  <span class="string">data</span></span><br><span class="line">          <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-config</span></span><br><span class="line">          <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-scripts</span></span><br><span class="line">          <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">redis-init-script-config</span></span><br><span class="line">            <span class="attr">defaultMode:</span> <span class="number">0777</span></span><br><span class="line">            <span class="attr">items:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">redis_init.sh</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">redis_init.sh</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">origin-config</span></span><br><span class="line">          <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">redis-config-map</span></span><br><span class="line">            <span class="attr">items:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">redis.conf</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">redis.conf</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="attr">podAntiAffinity:</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">labelSelector:</span></span><br><span class="line">                <span class="attr">matchExpressions:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">app</span></span><br><span class="line">                    <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                    <span class="attr">values:</span></span><br><span class="line">                      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">              <span class="attr">topologyKey:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-0-node-port</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">statefulset.kubernetes.io/pod-name:</span> <span class="string">redis-0</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">6379</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-1-node-port</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">statefulset.kubernetes.io/pod-name:</span> <span class="string">redis-1</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">6379</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-2-node-port</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">statefulset.kubernetes.io/pod-name:</span> <span class="string">redis-2</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">6379</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>解读一下。首先在初始化容器中，我们挂载了三个目录<code>redis-config init-scripts origin-config </code>。其中redis-config是一个临时卷，前面我们说过，redis和sentinel启动时要求配置文件可写，所以这里用的临时卷，init-scripts是初始化脚本，origin-config是redis的基础配置文件。init容器的作用就是将origin-config中的配置文件拷贝到redis-config中，并根据init-scripts中的redis_init.sh脚本生成配置文件到redis-config中，提供给真正容器使用。而真正容器中需要挂载的就是redis-config和data目录，data是redis的数据目录，生产环境中应配合pv和pvc实现持久化，这里采用临时卷过渡下。</p><p>随后定义几个service，没啥好说的，这里是把三个节点的redis分别用nodePort暴露出来了，每个节点都能连接。</p><p>然后是sentinel服务。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sentinel</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">sentinel</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">sentinel</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">sentinel</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">initContainers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">redis:7.0</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">REDIS_NODES</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">configMapKeyRef:</span></span><br><span class="line">                  <span class="attr">name:</span> <span class="string">redis-config-map</span></span><br><span class="line">                  <span class="attr">key:</span> <span class="string">REDIS_NODES</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">REDIS_PASSWORD</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">secretKeyRef:</span></span><br><span class="line">                  <span class="attr">name:</span> <span class="string">redis-secret</span></span><br><span class="line">                  <span class="attr">key:</span> <span class="string">REDIS_PASSWORD</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;/scripts/sentinel_init.sh&quot;</span>]</span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span>  <span class="string">redis-config</span></span><br><span class="line">              <span class="attr">mountPath:</span>  <span class="string">/etc/redis/</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-script</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/scripts/</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">image:</span>  <span class="string">redis:7.0</span></span><br><span class="line">          <span class="attr">name:</span>  <span class="string">sentinel</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;redis-sentinel&quot;</span>]</span><br><span class="line">          <span class="attr">args:</span> [<span class="string">&quot;/etc/redis/sentinel.conf&quot;</span>]</span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span>  <span class="string">sentinel</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">26379</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span>  <span class="string">redis-config</span></span><br><span class="line">              <span class="attr">mountPath:</span>  <span class="string">/etc/redis/</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span>  <span class="string">init-script</span></span><br><span class="line">          <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">redis-init-script-config</span></span><br><span class="line">            <span class="attr">defaultMode:</span> <span class="number">0777</span></span><br><span class="line">            <span class="attr">items:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">sentinel_init.sh</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">sentinel_init.sh</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-config</span></span><br><span class="line">          <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">          <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="attr">podAntiAffinity:</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">labelSelector:</span></span><br><span class="line">              <span class="attr">matchExpressions:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">app</span></span><br><span class="line">                <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                <span class="attr">values:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">sentinel</span></span><br><span class="line">            <span class="attr">topologyKey:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sentinel</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">sentinel</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">26379</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sentinel-node-port</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">sentinel</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">26379</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">26379</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>逻辑和redis差不多，这里便不再赘述。唯一有问题的地方是，连接到sentinel后，可以知道主节点的host，这里应该是redis-0.redis，但是由于我们不再集群内，所以dns域名解析失败，外部连接的话可能得配置ktconnect。这里我测试了下，当把主节点的pod删除后，sentinel会自动选举出新节点，当然这里也有一个问题，<strong>在主节点下线后的极短时间内，sentinel依旧会认为主节点是当前下线的节点，导致下线节点重新被拉起时，是以主节点配置启动的，但是当主容器还未启动时，sentinel更改了master，那么此时重新拉起的容器配置文件会被sentinel增加以下内容，导致节点变为只读。这与原先作者的本意不同。</strong>这里可以改进把每个节点配置文件增加<code>slave-read-only no</code>，即无论是否是主节点都增加这个。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Generated by CONFIG REWRITE</span><br><span class="line">replicaof redis-1.redis 6379</span><br><span class="line">latency-tracking-info-percentiles 50 99 99.9</span><br></pre></td></tr></table></figure><p>其次是既有主节点又有其他节点，那么通过sentinel获取时从节点时，也可进行数据添加，极大概率增加了数据的不可靠性。</p><p>因此最终我改造了一下，把redis配置文件稍微改了下，从节点就应该不允许写。其实就是将<code>echo &quot;slave-read-only no&quot; &gt;&gt; /etc/redis/redis.conf</code>删除。此时只有主节点才能写，这才符合主从规范。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-init-script-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">sentinel_init.sh:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    #! /bin/bash</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="string">for</span> <span class="string">i</span> <span class="string">in</span> <span class="string">$&#123;REDIS_NODES//,/</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="string">do</span></span><br><span class="line">      <span class="string">echo</span> <span class="string">&quot;find master at $i&quot;</span></span><br><span class="line">      <span class="string">MASTER=$(redis-cli</span> <span class="string">--no-auth-warning</span> <span class="string">--raw</span> <span class="string">-h</span> <span class="string">$i</span> <span class="string">-a</span> <span class="string">$&#123;REDIS_PASSWORD&#125;</span> <span class="string">info</span> <span class="string">replication</span> <span class="string">|</span> <span class="string">awk</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> <span class="string">|</span> <span class="attr">grep master_host:</span> <span class="string">|</span> <span class="string">cut</span> <span class="string">-d</span> <span class="string">&quot;:&quot;</span> <span class="string">-f2)</span></span><br><span class="line">      <span class="string">if</span> [ <span class="string">&quot;$&#123;MASTER&#125;&quot;</span> <span class="string">==</span> <span class="string">&quot;&quot;</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;no master found&quot;</span></span><br><span class="line">          <span class="string">MASTER=</span></span><br><span class="line">      <span class="string">else</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;found $&#123;MASTER&#125;&quot;</span></span><br><span class="line">          <span class="string">break</span></span><br><span class="line">      <span class="string">fi</span></span><br><span class="line">    <span class="string">done</span></span><br><span class="line"></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel resolve-hostnames yes&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel announce-hostnames yes&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel monitor mymaster $&#123;MASTER&#125; 6379 2&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel auth-pass mymaster $&#123;REDIS_PASSWORD&#125;&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel down-after-milliseconds mymaster 5000&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel sentinel-pass $&#123;REDIS_PASSWORD&#125;&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel parallel-syncs mymaster 1&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel failover-timeout mymaster 10000&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;requirepass $&#123;REDIS_PASSWORD&#125;&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;sentinel announce-ip $&#123;HOSTNAME&#125;.sentinel&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line"></span><br><span class="line">    <span class="string">cat</span> <span class="string">/etc/redis/sentinel.conf</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">redis_init.sh:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    #! /bin/bash</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="string">cp</span> <span class="string">/tmp/redis/redis.conf</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;requirepass $&#123;REDIS_PASSWORD&#125;&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;masterauth $&#123;REDIS_PASSWORD&#125;&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;replica-announce-ip $&#123;HOSTNAME&#125;.redis&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;replica-announce-port 6379 &quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;finding master...&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">if</span> [ <span class="string">&quot;$(timeout 5 redis-cli -h sentinel -p 26379 -a $&#123;REDIS_PASSWORD&#125; ping)&quot;</span> <span class="type">!=</span> <span class="string">&quot;PONG&quot;</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line"></span><br><span class="line">      <span class="string">echo</span> <span class="string">&quot;sentinel not found, defaulting to redis-0&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="string">if</span> [ <span class="string">$</span>&#123;<span class="string">HOSTNAME</span>&#125; <span class="string">==</span> <span class="string">&quot;redis-0&quot;</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;this is redis-0, not updating config...&quot;</span></span><br><span class="line">      <span class="string">else</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;updating redis.conf...&quot;</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;repl-ping-replica-period 3&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;slaveof redis-0.redis 6379&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">      <span class="string">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="string">else</span></span><br><span class="line"></span><br><span class="line">      <span class="string">echo</span> <span class="string">&quot;sentinel found, finding master&quot;</span></span><br><span class="line">      <span class="string">MASTER=&quot;$(redis-cli</span> <span class="string">-h</span> <span class="string">sentinel</span> <span class="string">-p</span> <span class="number">26379</span> <span class="string">-a</span> <span class="string">$&#123;REDIS_PASSWORD&#125;</span> <span class="string">sentinel</span> <span class="string">get-master-addr-by-name</span> <span class="string">mymaster</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">-E</span> <span class="string">&#x27;(^redis-*)|([0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;)&#x27;</span><span class="string">)&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="string">if</span> [ <span class="string">&quot;$&#123;HOSTNAME&#125;.redis&quot;</span> <span class="string">==</span> <span class="string">$</span>&#123;<span class="string">MASTER</span>&#125; ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;this is master, not updating config...&quot;</span></span><br><span class="line">      <span class="string">else</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;master found : $&#123;MASTER&#125;, updating redis.conf&quot;</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;slaveof $&#123;MASTER&#125; 6379&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;repl-ping-replica-period 3&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">      <span class="string">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="string">fi</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>因此最后使用方法就是先通过sentinel获取主节点或者从节点的地址，然后主节点写，从节点读。</p><p>总得来说，哨兵模式搭建在k8s中会比较复杂，因为涉及到有状态服务的定义，所以得配合init容器和bash脚本去控制容器启动逻辑。</p><h2 id="Cluster模式"><a href="#Cluster模式" class="headerlink" title="Cluster模式"></a>Cluster模式</h2><p>这个模式全自动好像比较困难，需要用到redis-trib工具。由于cluster集群必须在所有节点启动后才能进行初始化，而如果将初始化逻辑类似哨兵模式一样写入init.sh中，则是一件非常复杂而且低效的行为。</p><p>先配置config</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-config-map</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis.conf:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    bind 0.0.0.0</span></span><br><span class="line"><span class="string">    protected-mode no</span></span><br><span class="line"><span class="string">    port 6379</span></span><br><span class="line"><span class="string">    cluster-enabled yes</span></span><br><span class="line"><span class="string">    cluster-config-file /data/redis.conf</span></span><br><span class="line"><span class="string">    cluster-node-timeout 5000</span></span><br><span class="line"><span class="string">    dir &quot;/data&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>然后是redis节点创建出来，并创建无头服务。（<strong>无头service不分配clusterIP, 一般用于pod实例之间相互通信，不再像普通service那样负载均衡。</strong>）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">6</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">redis:7.0</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;/conf/redis.conf&quot;</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">6379</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">&quot;TCP&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cluster</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">16379</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">&quot;TCP&quot;</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-conf</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/conf/</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-data</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-conf</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">redis-config-map</span></span><br><span class="line">          <span class="attr">items:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">redis.conf</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">redis.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-data</span></span><br><span class="line">        <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p><strong>注意这里我们采用的是临时卷，生产环境data务必换成持久化卷。</strong> </p><p><strong>并且没有换成持久化卷是有问题的，后面会讲到，可以参照后面新的yaml。</strong></p><p>注意这里没有配置节点亲和性，原因是因为我们创建的是3主3从，没有过多的节点让我们去均匀部署。</p><p>无头服务的statefulSet会分配dns，为<code>&lt;pod name&gt;.&lt;service name&gt;.&lt;namespace&gt;.svc.cluster.local</code> 尝试dns这些服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kubectl run --rm -i --tty busybox --image=busybox:1.28 /bin/sh</span><br><span class="line">nslookup redis-0.redis</span><br><span class="line"></span><br><span class="line">Server:    10.43.0.10</span><br><span class="line">Address 1: 10.43.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Name:      redis-0.redis</span><br><span class="line">Address 1: 10.42.1.60 redis-0.redis.default.svc.cluster.local</span><br></pre></td></tr></table></figure><p>使用一个额外的容器来初始化我们的redis集群。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">kubectl run -it ubuntu --image=ubuntu:20.04 --restart=Never /bin/bash</span><br><span class="line">kubectl <span class="built_in">exec</span> -it ubuntu /bin/bash</span><br><span class="line"></span><br><span class="line">cat &gt; /etc/apt/sources.list &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install -y vim wget python3 python3-pip redis-tools dnsutils</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pip install redis-trib</span><br><span class="line"></span><br><span class="line">创建只有Master节点的集群</span><br><span class="line">redis-trib.py create \</span><br><span class="line">  `dig +short redis-0.redis.default.svc.cluster.local`:6379 \</span><br><span class="line">  `dig +short redis-1.redis.default.svc.cluster.local`:6379 \</span><br><span class="line">  `dig +short redis-2.redis.default.svc.cluster.local`:6379</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">为每个Master添加Slave</span><br><span class="line">redis-trib.py replicate \</span><br><span class="line">  --master-addr `dig +short redis-0.redis.default.svc.cluster.local`:6379 \</span><br><span class="line">  --slave-addr `dig +short redis-3.redis.default.svc.cluster.local`:6379</span><br><span class="line">  </span><br><span class="line">redis-trib.py replicate \</span><br><span class="line">  --master-addr `dig +short redis-1.redis.default.svc.cluster.local`:6379 \</span><br><span class="line">  --slave-addr `dig +short redis-4.redis.default.svc.cluster.local`:6379</span><br><span class="line">  </span><br><span class="line">redis-trib.py replicate \</span><br><span class="line">  --master-addr `dig +short redis-2.redis.default.svc.cluster.local`:6379 \</span><br><span class="line">  --slave-addr `dig +short redis-5.redis.default.svc.cluster.local`:6379</span><br></pre></td></tr></table></figure><p>到这里我们的集群就初始化成功了。</p><p>我们可以进入其中一个redis节点看看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">exec</span> -it redis-0 /bin/bash</span><br><span class="line"></span><br><span class="line">root@redis-0:/data<span class="comment"># redis-cli -c</span></span><br><span class="line">127.0.0.1:6379&gt; cluster nodes</span><br><span class="line">c0309e16b8d0727a4ad2cbe939ec59caac46e37d 10.42.0.93:6379@16379 slave 06809780e7800808a217eafb35f8cee395f51820 0 1721305716101 2 connected</span><br><span class="line">8a63ab6b6e6b1db63855afdf604646e7f0145348 10.42.1.60:6379@16379 myself,master - 0 1721305715000 1 connected 10923-16383</span><br><span class="line">956ebaec5cd6ac4b0970f823808bee6c076dcbe8 10.42.2.60:6379@16379 master - 0 1721305714591 4 connected 0-5461</span><br><span class="line">06809780e7800808a217eafb35f8cee395f51820 10.42.0.92:6379@16379 master - 0 1721305714592 2 connected 5462-10922</span><br><span class="line">f8effa58385f8941a193dfadbf2e90d018ca1c19 10.42.1.59:6379@16379 slave 956ebaec5cd6ac4b0970f823808bee6c076dcbe8 0 1721305715094 4 connected</span><br><span class="line">2937328a1fb97f0c21d203d24039e3f4f4e49da3 10.42.2.61:6379@16379 slave 8a63ab6b6e6b1db63855afdf604646e7f0145348 0 1721305716504 1 connected</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; cluster info</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:6</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:4</span><br><span class="line">cluster_my_epoch:1</span><br><span class="line">cluster_stats_messages_ping_sent:555</span><br><span class="line">cluster_stats_messages_pong_sent:549</span><br><span class="line">cluster_stats_messages_meet_sent:2</span><br><span class="line">cluster_stats_messages_sent:1106</span><br><span class="line">cluster_stats_messages_ping_received:549</span><br><span class="line">cluster_stats_messages_pong_received:557</span><br><span class="line">cluster_stats_messages_received:1106</span><br><span class="line">total_cluster_links_buffer_limit_exceeded:0</span><br></pre></td></tr></table></figure><p>创建一个nodePort服务供外部访问看看</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-access-service</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-port</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span></span><br></pre></td></tr></table></figure><p>注意这里像<code>another redis desktop manager</code>这样的软件不能勾选cluster，因为它识别的所有节点都是内部ip。直接正常连接就行。</p><p>这里我们直接删除redis-0，观察redis-3日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1:S 18 Jul 2024 12:38:37.534 * Marking node 8a63ab6b6e6b1db63855afdf604646e7f0145348 as failing (quorum reached).</span><br><span class="line">1:S 18 Jul 2024 12:38:37.534 # Cluster state changed: fail</span><br><span class="line">1:S 18 Jul 2024 12:38:37.563 # Start of election delayed for 919 milliseconds (rank #0, offset 1171).</span><br><span class="line">1:S 18 Jul 2024 12:38:38.569 # Starting a failover election for epoch 5.</span><br><span class="line">1:S 18 Jul 2024 12:38:38.576 # Failover election won: I&#x27;m the new master.</span><br><span class="line">1:S 18 Jul 2024 12:38:38.576 # configEpoch set to 5 after successful failover</span><br><span class="line">1:M 18 Jul 2024 12:38:38.576 * Discarding previously cached master state.</span><br><span class="line">1:M 18 Jul 2024 12:38:38.576 # Setting secondary replication ID to 793c7bf0d23ad2480d10ebddeef4de92500b7f41, valid up to offset: 1172. New replication ID is d4170f01b37dbd48ab2898ff8cd2404a7025a2b7</span><br><span class="line">1:M 18 Jul 2024 12:38:38.577 # Cluster state changed: ok</span><br></pre></td></tr></table></figure><p>可以看到此时redis-3晋升为master，进入控制台后也可以使用role命令查看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@redis-3:/data# redis-cli</span><br><span class="line">127.0.0.1:6379&gt; role</span><br><span class="line">1) &quot;master&quot;</span><br><span class="line">2) (integer) 1171</span><br><span class="line">3) (empty array)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p>但此时新的问题来了，redis-0重新部署后加不到集群中了。我们在redis-3中执行<code>cluster nodes</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@redis-3:/data# redis-cli</span><br><span class="line">127.0.0.1:6379&gt; cluster nodes</span><br><span class="line">956ebaec5cd6ac4b0970f823808bee6c076dcbe8 10.42.2.60:6379@16379 master - 0 1721306662601 4 connected 0-5461</span><br><span class="line">c0309e16b8d0727a4ad2cbe939ec59caac46e37d 10.42.0.93:6379@16379 slave 06809780e7800808a217eafb35f8cee395f51820 0 1721306663005 2 connected</span><br><span class="line">f8effa58385f8941a193dfadbf2e90d018ca1c19 10.42.1.59:6379@16379 slave 956ebaec5cd6ac4b0970f823808bee6c076dcbe8 0 1721306662000 4 connected</span><br><span class="line">2937328a1fb97f0c21d203d24039e3f4f4e49da3 10.42.2.61:6379@16379 myself,master - 0 1721306661000 5 connected 10923-16383</span><br><span class="line">8a63ab6b6e6b1db63855afdf604646e7f0145348 10.42.1.60:6379@16379 master,fail - 1721306312230 1721306309711 1 connected</span><br><span class="line">06809780e7800808a217eafb35f8cee395f51820 10.42.0.92:6379@16379 master - 0 1721306662000 2 connected 5462-10922</span><br></pre></td></tr></table></figure><p>发现有一个节点fail了，而在redis-0中执行则发现只有自己一个节点。</p><p>再尝试下停掉其他master节点，也是如此。难道网上教程又不靠谱了？经过我的思考，大概知道是为什么了，原因出现在存储上，原文中每个节点的/data/redis.conf都是共用的，作者使用了一个nfs的卷再结合ReadWriteMany将存储共用。而我这里采用的是临时卷，所以节点重启后读取不到原先的/data/redis.conf就会自己创建导致加入不了集群。</p><p>那咋办呢，结合前面的ceph-rbd创建PVC吧。走起。这里其实不一定要共用存储，每个节点创建一个单独的存储也是ok的。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">6</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">redis:7.0</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;/conf/redis.conf&quot;</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">6379</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">&quot;TCP&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cluster</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">16379</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">&quot;TCP&quot;</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-conf</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/conf/</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-data</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-conf</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">redis-config-map</span></span><br><span class="line">          <span class="attr">items:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">redis.conf</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">redis.conf</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redis-data</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">accessModes:</span> [ <span class="string">&quot;ReadWriteOnce&quot;</span> ]</span><br><span class="line">      <span class="attr">storageClassName:</span> <span class="string">&quot;csi-rbd-sc&quot;</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>再重新重建集群。这里不再赘述。</p><p>删除redis-0，查看集群是否能自恢复。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@redis-0:/data<span class="comment"># redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; cluster nodes</span><br><span class="line">4cf82b83963d3a5178d4d73db2080934e9d5f0a1 10.42.1.65:6379@16379 slave 33207c0188005e553000a456fb2d41f9d341eb05 0 1721308687541 3 connected</span><br><span class="line">1c978c4a36bb5f954411b2a965e2258915b4dfdc 10.42.0.95:6379@16379 slave 31e0da6c88f0d4954123b6d7df2de37967938696 0 1721308686531 2 connected</span><br><span class="line">3181437aa3fd71108a6c1616de15fa8e42d6add7 10.42.1.64:6379@16379 myself,slave cf9eb6aa26822f32decf9f3047c7cb606f677a1a 0 1721308685000 4 connected</span><br><span class="line">31e0da6c88f0d4954123b6d7df2de37967938696 10.42.0.94:6379@16379 master - 0 1721308686000 2 connected 0-5461</span><br><span class="line">33207c0188005e553000a456fb2d41f9d341eb05 10.42.2.66:6379@16379 master - 0 1721308686000 3 connected 10923-16383</span><br><span class="line">cf9eb6aa26822f32decf9f3047c7cb606f677a1a 10.42.2.67:6379@16379 master - 0 1721308686000 4 connected 5462-10922</span><br><span class="line">127.0.0.1:6379&gt; role</span><br><span class="line">1) <span class="string">&quot;slave&quot;</span></span><br><span class="line">2) <span class="string">&quot;10.42.2.67&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 6379</span><br><span class="line">4) <span class="string">&quot;connected&quot;</span></span><br><span class="line">5) (<span class="built_in">integer</span>) 224</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>欸，发现redis-0成功变为了slave。</p><p>至此，cluster集群的搭建就完成了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这篇文章整体下来，写了好几天，原本以为哨兵模式也可以简单搭建，没想到也是有点复杂的。中途还有面试和复盘要做，断断续续的。不过好在也算是了解了一些redis高可用集群的搭建。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;竟然被问到了redis集群了不了解，我除了主从其他还没搭建过，这篇就搭建下redis的主从模式，哨兵模式，Cluster模式。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="架构" scheme="https://re0.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="运维" scheme="https://re0.top/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="从0.5开始的运维架构之路" scheme="https://re0.top/tags/%E4%BB%8E0-5%E5%BC%80%E5%A7%8B%E7%9A%84%E8%BF%90%E7%BB%B4%E6%9E%B6%E6%9E%84%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>2024面试复盘4</title>
    <link href="https://re0.top/2024/07/16/2024-07-16-replay/"/>
    <id>https://re0.top/2024/07/16/2024-07-16-replay/</id>
    <published>2024-07-16T07:00:00.000Z</published>
    <updated>2024-07-25T05:27:31.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>无言。</p><p>继续复盘。</p><h1 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h1><h2 id="消息队列选型？kafka和rabbitmq对比？"><a href="#消息队列选型？kafka和rabbitmq对比？" class="headerlink" title="消息队列选型？kafka和rabbitmq对比？"></a>消息队列选型？kafka和rabbitmq对比？</h2><table><thead><tr><th></th><th>RabbitMq</th><th>RocketMq</th><th>Kafka</th></tr></thead><tbody><tr><td>开发语言</td><td>erlang</td><td>Java</td><td>Java</td></tr><tr><td>单机吞吐</td><td>万级</td><td>万级</td><td>十万级</td></tr><tr><td>延时</td><td>微秒</td><td>毫秒</td><td>毫秒</td></tr><tr><td>消息重复</td><td>可控制</td><td></td><td>可能会有重复</td></tr><tr><td>持久化</td><td>内存，文件</td><td>磁盘</td><td></td></tr><tr><td>事务</td><td>不支持</td><td>支持</td><td></td></tr><tr><td>优点</td><td>性能较好，支持amqp</td><td>阿里开源，性能非常好，在阿里内部大规模应用。支持多种模式，集群消费，广播消费等。</td><td>高吞吐量，低延时，稳定性高，消息有序</td></tr><tr><td>缺点</td><td>erlang语言开发，不利于扩展</td><td>阿里开源的东西，说不定什么时候社区会停止维护。</td><td>社区更新较慢，不支持延迟，重试等。</td></tr></tbody></table><p>如果需要日志采集追求高吞吐量，那么采用kafka；Rabbitmq使用简单，但是不利于二次开发。Rocketmq背靠阿里，成也如此败也如此，阿里的开源贡献很大，但是很多项目稳定后社区经常陷入停滞，不过阿里内部既然在使用，那么说明它的性能和可靠性有保证。</p><h2 id="xxljob原理"><a href="#xxljob原理" class="headerlink" title="xxljob原理"></a>xxljob原理</h2><p>xxl-job是一个分布式的定时任务调度平台。主要分为admin和executor</p><p><strong>xxl-job其实也是在quartz的基础上实现的，但是修改了任务调度的模式，并且任务调度采用注册和RPC调用方式来实现</strong>。2.1.0版本前核心调度模块都是基于<code>quartz</code>框架，2.1.0版本开始自研调度组件，移除<code>quartz</code>依赖 ，使用时间轮调度。</p><p><code>xxl_job_info</code>表是<strong>记录定时任务</strong>的db表，里面有个<code>trigger_next_time（Long）</code>字段，表示下一次触发的时间点任务时间被修改 / 每一次任务触发后，可以根据<code>cronb</code>表达式计算下一次触发时间戳：<code>Date nextValidTime = new CronExpression(jobInfo.getJobCron()).getNextValidTimeAfter(new Date()))</code></p><p>定时执行任务逻辑: </p><ol><li>定时任务<code>scheduleThread</code>：不断从<code>db</code>把<code>5秒</code>内要执行的任务读出，<strong>立即触发 / 放到时间轮等待触发</strong>，并更新<code>trigger_next_time</code>.</li><li>获取当前时间<code>now</code></li><li>轮询<code>db</code>，找出<code>trigger_next_time</code>在距<code>now 5秒</code>内的任务，对到达now时间后的任务（超出now 5秒外）直接跳过不执行（调度过期，如果有调度过期策略则触发执行）或者重置<code>trigger_next_time</code>；对到达<code>now</code>时间后的任务（超出<code>now</code> 5秒内），开线程执行触发逻辑，若任务下一次触发时间是在5秒内，则放到时间轮内(Map&lt;Integer, List&gt;秒数(1-60) =&gt; 任务id列表），重置<code>trigger_next_time</code>；对未到达<code>now</code>时间的任务，直接放到时间轮内并重置<code>trigger_next_time</code>。</li><li>定时任务<code>ringThread</code>：时间轮实现到点触发任务。时间轮数据结构：<code>Map&lt;Integer, List&lt;Integer&gt;&gt; key</code>是秒数<code>(1-60)</code> ，<code>value</code>是任务<code>id</code>列表。</li><li>获取当前时间秒数</li><li>从时间轮内移出当前秒数前2个秒数（避免处理耗时太长，跨过刻度，向前校验一个刻度）的任务列表id，一一触发任务；</li></ol><p>如何避免集群中的多个服务器同时调度任务？</p><p>当xxl-job应用本身集群部署（实现高可用HA）时，<strong>通过mysql悲观锁实现分布式锁（for update语句）</strong></p><ul><li><code>setAutoCommit(false)</code>关闭隐式自动提交事务，启动事务</li><li><code>select lock for update</code>（显式排他锁，其他事务无法进入&amp;无法实现<code>for update</code>）</li><li>读<code>db</code>任务信息 -&gt; 拉任务到内存时间轮 -&gt; 更新<code>db</code>任务信息</li><li><code>commit</code>提交事务，同时会释放<code>for update</code>的排他锁（悲观锁）</li></ul><h2 id="es优势"><a href="#es优势" class="headerlink" title="es优势"></a>es优势</h2><p>前一篇应该说过了，用作全文搜索，相较于mysql会快很多。es是document格式的存储，mysql是行格式的，所以es并不需要显式定义字段。mysql由于其索引实现（innodb为例）导致在数据量大到一定级别后会出现性能衰减；而es只要内存足够就没太大问题。插入速度上如果正确的配置mysql其性能并不低，当然相对于正常状态es而言还是差了一个到多个量级（es&gt;mongo&gt;mysql）。查询速度这个主要看索引和数量，在需要复杂关联查询的时候建议优先考虑mysql。资源开销上，当数据量上去了后如果为了维持性能的话，es的占用内存是十分夸张的。</p><h2 id="去掉redis广播怎么通知各服务"><a href="#去掉redis广播怎么通知各服务" class="headerlink" title="去掉redis广播怎么通知各服务"></a>去掉redis广播怎么通知各服务</h2><p>从广播推模式改为存在数据库中，各个服务扫表实现。</p><h2 id="编程题：两个线程交替打印AB。三个线程交替打印ABC。"><a href="#编程题：两个线程交替打印AB。三个线程交替打印ABC。" class="headerlink" title="编程题：两个线程交替打印AB。三个线程交替打印ABC。"></a>编程题：两个线程交替打印AB。三个线程交替打印ABC。</h2><p>被CSDN坑了一把。</p><h3 id="相互唤醒"><a href="#相互唤醒" class="headerlink" title="相互唤醒"></a>相互唤醒</h3><p>这种写法有的问题是最后会卡住，其实改造下wait的条件就行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Print print = <span class="keyword">new</span> Print(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(print::printA).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(print::printB).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Print</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> countA;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> countB;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Print</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.count = count;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (!flag &amp;&amp; countA++ &lt; count) &#123;</span><br><span class="line">                <span class="keyword">this</span>.notify();</span><br><span class="line">                System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.wait();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (flag &amp;&amp; countB++ &lt; count) &#123;</span><br><span class="line">                <span class="keyword">this</span>.notify();</span><br><span class="line">                System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.wait();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lock版，本质上也是synchronized和wait-notify"><a href="#lock版，本质上也是synchronized和wait-notify" class="headerlink" title="lock版，本质上也是synchronized和wait/notify"></a>lock版，本质上也是synchronized和wait/notify</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            lock.notify();</span><br><span class="line">            System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.wait();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            lock.notify();</span><br><span class="line">            System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.wait();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><h3 id="lock版-三线程"><a href="#lock版-三线程" class="headerlink" title="lock版 三线程"></a>lock版 三线程</h3><p>在网上看到这种写法，不建议，易读性十分不好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintABCWithLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            Object lockA = <span class="keyword">new</span> Object();</span><br><span class="line">            Object lockB = <span class="keyword">new</span> Object();</span><br><span class="line">            Object lockC = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">            Thread a = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (lockC) &#123;</span><br><span class="line">                        <span class="keyword">synchronized</span> (lockA) &#123;</span><br><span class="line"></span><br><span class="line">                            System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">                            lockA.notifyAll();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            lockC.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            Thread b = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (lockA) &#123;</span><br><span class="line">                        <span class="keyword">synchronized</span> (lockB) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"></span><br><span class="line">                            lockB.notifyAll();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            lockA.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            Thread c = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (lockB) &#123;</span><br><span class="line">                        <span class="keyword">synchronized</span> (lockC) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">                            lockC.notifyAll();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            lockB.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            a.start();</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            b.start();</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            c.start();</span><br><span class="line">            a.join();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="真正的锁版。"><a href="#真正的锁版。" class="headerlink" title="真正的锁版。"></a>真正的锁版。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintWithLock</span> </span>&#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> state = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Condition A = lock.newCondition();</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Condition B = lock.newCondition();</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Condition C = lock.newCondition();</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">           <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                   <span class="comment">// 获取锁</span></span><br><span class="line">                   lock.lock();</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       <span class="comment">// 判断是否轮到自己执行</span></span><br><span class="line">                       <span class="keyword">while</span> (state % <span class="number">3</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                           A.await();</span><br><span class="line">                       &#125;</span><br><span class="line">                       System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">                       state++;</span><br><span class="line">                       B.signal();</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                       <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                       lock.unlock();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;).start();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                   <span class="comment">// 获取锁</span></span><br><span class="line">                   lock.lock();</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       <span class="comment">// 判断是否轮到自己执行</span></span><br><span class="line">                       <span class="keyword">while</span> (state % <span class="number">3</span> != <span class="number">1</span>) &#123;</span><br><span class="line">                           B.await();</span><br><span class="line">                       &#125;</span><br><span class="line">                       System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">                       state++;</span><br><span class="line">                       C.signal();</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                       <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                       lock.unlock();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;).start();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                   <span class="comment">// 获取锁</span></span><br><span class="line">                   lock.lock();</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       <span class="comment">// 判断是否轮到自己执行</span></span><br><span class="line">                       <span class="keyword">while</span> (state % <span class="number">3</span> != <span class="number">2</span>) &#123;</span><br><span class="line">                           C.await();</span><br><span class="line">                       &#125;</span><br><span class="line">                       System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">                       state++;</span><br><span class="line">                       A.signal();</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                       <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                       lock.unlock();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;).start();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="去掉不需要的condition"><a href="#去掉不需要的condition" class="headerlink" title="去掉不需要的condition"></a>去掉不需要的condition</h3><p>和atomicInteger差不多。内部都在循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintWithLock</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> state = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>;) &#123;</span><br><span class="line">                    <span class="comment">// 获取锁</span></span><br><span class="line">                    lock.lock();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 判断是否轮到自己执行</span></span><br><span class="line">                        <span class="keyword">while</span> (state % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">                            state++;</span><br><span class="line">                            i++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        lock.unlock();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>;) &#123;</span><br><span class="line">                    <span class="comment">// 获取锁</span></span><br><span class="line">                    lock.lock();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 判断是否轮到自己执行</span></span><br><span class="line">                        <span class="keyword">while</span> (state % <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">                            state++;</span><br><span class="line">                            i++;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        lock.unlock();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>;) &#123;</span><br><span class="line">                    <span class="comment">// 获取锁</span></span><br><span class="line">                    lock.lock();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 判断是否轮到自己执行</span></span><br><span class="line">                        <span class="keyword">while</span> (state % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">                            state++;</span><br><span class="line">                            i++;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        lock.unlock();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="AtomicInteger版本"><a href="#AtomicInteger版本" class="headerlink" title="AtomicInteger版本"></a>AtomicInteger版本</h3><p>比较费cpu，因为在循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintWithCas</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicInteger state = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (state.get() % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">                        state.compareAndSet(state.get(), state.get() + <span class="number">1</span>);</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (state.get() % <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">                        state.compareAndSet(state.get(), state.get() + <span class="number">1</span>);</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (state.get() % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">                        state.compareAndSet(state.get(), state.get() + <span class="number">1</span>);</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintWithSemaphore</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Semaphore A = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Semaphore B = <span class="keyword">new</span> Semaphore(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Semaphore C = <span class="keyword">new</span> Semaphore(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                        A.acquire();</span><br><span class="line">                        System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">                        B.release();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                        B.acquire();</span><br><span class="line">                        System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">                        C.release();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                        C.acquire();</span><br><span class="line">                        System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">                        A.release();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;无言。&lt;/p&gt;
&lt;p&gt;继续复盘。&lt;/p&gt;
&lt;h1 id=&quot;复盘&quot;&gt;&lt;a href=&quot;#复盘&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="随想" scheme="https://re0.top/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="面经" scheme="https://re0.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>2024面试复盘3</title>
    <link href="https://re0.top/2024/07/15/2024-07-15-replay/"/>
    <id>https://re0.top/2024/07/15/2024-07-15-replay/</id>
    <published>2024-07-15T12:00:00.000Z</published>
    <updated>2024-07-25T05:27:27.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>拼多多和b站两场面试，大概率凉凉。  </p><p>“你这业务都是偏向工具类啊”。这句话一说出我也只能呵呵一笑了，确实是这样，面试越多越发现内部业务是真的垃圾啊。</p><p>真的该考虑转行了。</p><p>但是该复盘还是得复盘。</p><h1 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h1><h2 id="pdd"><a href="#pdd" class="headerlink" title="pdd"></a>pdd</h2><h3 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h3><p>实现一颗树的序列化与反序列化，要求序列化后的字符串长度最小。树的定义如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> value;</span><br><span class="line">List&lt;Node&gt; children;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Node root = <span class="keyword">new</span> Node(<span class="number">1</span>);</span><br><span class="line">        Node node2 = <span class="keyword">new</span> Node(<span class="number">2</span>);</span><br><span class="line">        Node node3 = <span class="keyword">new</span> Node(<span class="number">3</span>);</span><br><span class="line">        root.children.add(node2);</span><br><span class="line">        root.children.add(node3);</span><br><span class="line">        Node node4 = <span class="keyword">new</span> Node(<span class="number">4</span>);</span><br><span class="line">        Node node5 = <span class="keyword">new</span> Node(<span class="number">5</span>);</span><br><span class="line">        Node node6 = <span class="keyword">new</span> Node(<span class="number">6</span>);</span><br><span class="line">        Node node7 = <span class="keyword">new</span> Node(<span class="number">7</span>);</span><br><span class="line">        node2.children.add(node4);</span><br><span class="line">        node2.children.add(node5);</span><br><span class="line">        node2.children.add(node6);</span><br><span class="line">        node3.children.add(node7);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这道题目我只写出了序列化，虽然是错的，就拿代码的示例，我那时想的是<code>1-[2-[4,5,6], 3-[7]]</code>，给gpt解答之后发现完全可以省略-变成1[2[4,5,6],3[7]]，但其实逻辑大差不大。先写序列化的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span> (root.children != <span class="keyword">null</span> &amp;&amp; root.children.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; root.children.size(); i++) &#123;</span><br><span class="line">                Node child = root.children.get(i);</span><br><span class="line">                String childStr = format(child);</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(childStr)) &#123;</span><br><span class="line">                    sb.append(childStr);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i != root.children.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                    sb.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sb.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> String.valueOf(root.value);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> root.value + <span class="string">&quot;[&quot;</span> + sb + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>反序列化是gpt写的，我学习一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">deserialize</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span> || data.isEmpty()) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> deserializeHelper(data, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">deserializeHelper</span><span class="params">(String data, <span class="keyword">int</span>[] index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index[<span class="number">0</span>] &gt;= data.length()) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取节点值</span></span><br><span class="line">    <span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index[<span class="number">0</span>] &lt; data.length() &amp;&amp; Character.isDigit(data.charAt(index[<span class="number">0</span>]))) &#123;</span><br><span class="line">        value = value * <span class="number">10</span> + (data.charAt(index[<span class="number">0</span>]) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        index[<span class="number">0</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node node = <span class="keyword">new</span> Node(value);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查是否有子节点</span></span><br><span class="line">    <span class="keyword">if</span> (index[<span class="number">0</span>] &lt; data.length() &amp;&amp; data.charAt(index[<span class="number">0</span>]) == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">        index[<span class="number">0</span>]++;  <span class="comment">// 跳过 &#x27;[&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> (index[<span class="number">0</span>] &lt; data.length() &amp;&amp; data.charAt(index[<span class="number">0</span>]) != <span class="string">&#x27;]&#x27;</span>) &#123;</span><br><span class="line">            node.children.add(deserializeHelper(data, index));</span><br><span class="line">            <span class="keyword">if</span> (index[<span class="number">0</span>] &lt; data.length() &amp;&amp; data.charAt(index[<span class="number">0</span>]) == <span class="string">&#x27;,&#x27;</span>) &#123;</span><br><span class="line">                index[<span class="number">0</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        index[<span class="number">0</span>]++;  <span class="comment">// 跳过 &#x27;]&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一说一，现在AI比人强太多了。</p><h3 id="redis的使用场景？缓存不一致怎么解决？缓存的时间是？分布式锁的场景？"><a href="#redis的使用场景？缓存不一致怎么解决？缓存的时间是？分布式锁的场景？" class="headerlink" title="redis的使用场景？缓存不一致怎么解决？缓存的时间是？分布式锁的场景？"></a>redis的使用场景？缓存不一致怎么解决？缓存的时间是？分布式锁的场景？</h3><p>内部redis的使用场景一般是缓存和分布式锁。当然业界也有很多其他用法，比如和spring session对接，存储登录信息。还有排行榜功能（zset），pv统计等等。</p><p>缓存不一致业界一般采用的是Cache Aside Pattern, 即旁路缓存方案。这种方案包括读与写两种实践，对于读请求，先读缓存再读DB，如果cache命中，返回数据，未命中则访问DB,并将数据写回缓存。对于写请求，先操作数据库修改，再删除缓存。</p><p>为什么要删除缓存？原因是因为如果是写缓存的话，与正常的缓存miss流程相冲突，无法保证时序性。</p><p>为什么先操作数据库后删除缓存？其实不管是谁先谁后，都有可能会出现并发问题，但是写数据库的操作会比读数据库的速度慢，因此当A线程读了老数据并写入cache，B线程更改了数据库数据，并删除缓存，假设先删除缓存，那么有可能是删了个寂寞，老数据依旧被A写入缓存。当然这就是一个概率问题。</p><p>数据库和缓存是很难做到强一致性的，只能退而求其次追求最终一致性。那么就可以使用双写方案，即常说的延时双删，但是具体延迟多久这个得根据业务确定，取决于读业务所需的时间。</p><p>至于缓存的超时时间，一般是由业务决定，像我一般往redis存储的数据经常是一些配置数据，这些配置数据一般不怎么会改变，我一般是存12或24小时。</p><p>分布式锁的场景一般用于资源的抢占，实现业务的幂等。</p><h3 id="消息队列场景？除了解耦还有其他作用吗？其他优点？"><a href="#消息队列场景？除了解耦还有其他作用吗？其他优点？" class="headerlink" title="消息队列场景？除了解耦还有其他作用吗？其他优点？"></a>消息队列场景？除了解耦还有其他作用吗？其他优点？</h3><p>消息队列一般用于异步处理，应用解耦，流量削峰，日志处理，消息通讯，延时任务，广播等。优点就是解耦、异步、削峰，缺点就是可用性降低，中间件越多，系统越可能出现单点故障；增加系统的复杂性，既然引入了消息队列，那么重复消费需要避免吧？消息丢失需要处理吧？顺序性需要保证吗？这都是一个个问题。</p><h3 id="mysql和mongodb的场景？数据量有多少？"><a href="#mysql和mongodb的场景？数据量有多少？" class="headerlink" title="mysql和mongodb的场景？数据量有多少？"></a>mysql和mongodb的场景？数据量有多少？</h3><p>MongoDB适合用于大数据量、高并发的场景，特别是在需要灵活的数据模型和快速的读写操作时非常适用。</p><p>MySQL适合用于传统的关系型数据库场景，特别是在需要强一致性和复杂的事务处理时非常适用。支持SQL。</p><p>MongoDB的优点包括：灵活的数据模型、高性能的读写操作、可扩展性强、适合大数据量场景；缺点包括：不支持事务处理、对内存和磁盘的要求较高。<br>MySQL的优点包括：强一致性、支持复杂的事务处理、成熟的生态系统、广泛的应用领域；缺点包括：不适合非结构化数据、可扩展性较弱、性能在大数据量场景下有限，需要考虑分库分表，当然mongoDB也需要考虑分片。</p><p>数据量十亿以下吧。</p><h3 id="es的使用场景？"><a href="#es的使用场景？" class="headerlink" title="es的使用场景？"></a>es的使用场景？</h3><p>内部es都用做日志存储与检索，包括应用日志，其他需要上报的文本数据。</p><p>业内es一般用来做搜索，例如电商产品搜索，视频搜索等等，也用作日志分析，如用户行为分析，运营审计日志等。</p><p>后面es集群搭建的时候，再复习下。</p><h3 id="项目：编排流程是做什么的？流程的依赖是怎么处理的？"><a href="#项目：编排流程是做什么的？流程的依赖是怎么处理的？" class="headerlink" title="项目：编排流程是做什么的？流程的依赖是怎么处理的？"></a>项目：编排流程是做什么的？流程的依赖是怎么处理的？</h3><p>这个就不聊了，项目挺垃圾。</p><h3 id="有大流量大批量执行有吗？"><a href="#有大流量大批量执行有吗？" class="headerlink" title="有大流量大批量执行有吗？"></a>有大流量大批量执行有吗？</h3><p>项目相关。没有。确实都没经历过。内部系统哪来的大流量大批量。</p><h3 id="有了解过分库分表吗？既然你们用tidb-那节点扩容了解过吗？"><a href="#有了解过分库分表吗？既然你们用tidb-那节点扩容了解过吗？" class="headerlink" title="有了解过分库分表吗？既然你们用tidb 那节点扩容了解过吗？"></a>有了解过分库分表吗？既然你们用tidb 那节点扩容了解过吗？</h3><p>之后架构之路会搭建TiDB集群，敬请期待。</p><p>这里讲讲分库分表。</p><p>分库一般是按照应用或者租户来分库，用于解决单体库并发量高的问题。而分表一般来说数据量到达一定量级需要考虑。</p><p>分库分表分为水平拆分和垂直拆分。水平拆分是将单表拆成多个数据表，例如order表拆为order1，order2等，根据不同的用户id分到不同的表中。垂直拆分则是拆字段，将不同的字段按照业务或性能拆分成不同的表。</p><p>分表算法一般有直接取模，hash取模，一致性hash等方案，前两种方法存在一个问题就是当后期需要扩容的时候，那么由于基数改变，必然涉及到数据的重新迁移。所以一般来说是使用一致性Hash方式。一致性哈希可以按照常用的hash算法来将对应的key哈希到一个具有2^32次方个节点的空间中，形成成一个顺时针首尾相接的闭合的环形。所以当添加一个新的数据库节点时，只有增加服务器的位置和逆时针方向第一个数据库节点之间的键会受影响。虽然数据会收到部分影响，但是会稍微好点。当然前期就应该规划好数据量级，提前做好分库分表。</p><p>全局id的生成一般有UUID，雪花算法，当然也有tidb使用的预先分配id方案，例如节点1插入数据id范围为1-3000，节点2为3001-6000以此类推。</p><p>市面上主流的分库分表中间件有ShardingSphere，TDDL，Mycat。<a href="https://shardingsphere.apache.org/document/4.1.0/cn/manual/sharding-jdbc/">ShardingSphere</a>用的人可能会多一些。ShardingSphere包括Sharding-JDBC和Sharding-Proxy，JDBC是项目里使用的，Proxy则代理数据库连接，JDBC使用较为简单，只需在项目里引用，并添加多个数据源即可实现分库分表。Proxy 版则可以屏蔽应用层面配置多个数据源，能更好的管理数据库。</p><h3 id="有考虑过容灾吗？"><a href="#有考虑过容灾吗？" class="headerlink" title="有考虑过容灾吗？"></a>有考虑过容灾吗？</h3><p>”同城双活”，“两地三中心”？想到的是这个，但是内部顶多是跨集群跨网络部署应用。这里说说我的思考。</p><p>其实以内部的基础设施建设能力的话，已经足够做容灾方案了。各个园区都有服务器集群，其实只要把服务都部署一套就可以了，然后做网关的负载均衡，但是有个点就是如果是网关故障的话，以目前内部的能力是无法做的无感切换的。一是不支持智能DNS，所以网关即便部署多套，依旧会出现瞬时不可用的场景。</p><p>所以我理解的容灾方案，不仅是服务跨集群部署，网关也要部署多套，然后必须支持智能DNS。这样才能实现初步的容灾。</p><p><strong>当然无外乎就是成本的问题。</strong></p><h2 id="b站"><a href="#b站" class="headerlink" title="b站"></a>b站</h2><p>刚开始讲项目就不说了。还被问了有没有做过业务系统。</p><blockquote><p>你觉得最有挑战的项目是什么，承担的角色是什么？有没有遇到什么有意思的问题。</p></blockquote><p>面试官还提醒我要把空白时间补齐，后面把项目加进去。</p><h3 id="mysql事务四大特性，底层是如何保证这四大特性？"><a href="#mysql事务四大特性，底层是如何保证这四大特性？" class="headerlink" title="mysql事务四大特性，底层是如何保证这四大特性？"></a>mysql事务四大特性，底层是如何保证这四大特性？</h3><p>没答上来。。复习下。</p><ul><li>Atomic，原子性，事务的所有SQL操作作为原子工作单元执行，要么全部执行，要么全部不执行；</li><li>Consistent，一致性，事务完成后，所有数据的状态都是一致的，即A账户只要减去了100，B账户则必定加上了100；</li><li>Isolation，隔离性，如果有多个事务并发执行，每个事务作出的修改必须与其他事务隔离；</li><li>Duration，持久性，即事务完成后，对数据库数据的修改被持久化存储。</li></ul><p>mysql数据库事务的原子性是通过<code>undo log</code>实现的。</p><p>事务的所有修改操作(增、删、改)的相反操作都会写入<code>undo log</code>,比如事务执行了一条insert语句，那么undo log就会记录一条相应的delete语句。所以<code>undo log</code>是一个逻辑文件，记录的是相应的SQL语句一旦由于故障，导致事务无法成功提交，系统则会执行<code>undo log</code>中相应的撤销操作，达到事务回滚的目的。</p><p>mysql数据库事务的持久性是通过<code>redo log</code>实现的</p><p>事务的所有修改操作(增、删、改)，数据库都会生成一条<code>redo</code>日志记录到<code>redo log</code>.区别于<code>undo log</code>记录SQL语句、<code>redo log</code>记录的是事务对数据库的哪个数据页做了什么修改，属于物理日志。</p><p>隔离性是通过（读写锁+MVCC）来实现的。即常见的事务隔离级别（读未提交，不可重复读，可重复读，串行化）。不同隔离级别下，隔离性采用锁+MVCC的方式实现。</p><p><strong>表锁：读锁（不会阻塞其他线程的读操作，阻塞写操作）；写锁（读写操作都阻塞）</strong></p><p><strong>行锁：需要的时候加上，并不是马上释放，等事务提交才释放，两阶段锁协议</strong></p><p><strong>间隙锁-gap lock</strong>：锁定区间范围，防止幻读，左开右开，只在可重复读隔离级别下生效—|—为了阻止多个事务将记录插入到同一范围内，而这会导致幻读问题的产生</p><p><strong>记录锁-record Lock</strong>：锁定行记录，索的索引，索引失效，为表锁</p><p><strong>临键锁-next-key Lock</strong>：record lock+gap lock 左开右闭<strong>（解决幻读</strong>）</p><p><strong>MVCC：实现多版本并发控制，</strong>实现原理：使用版本链+Read View</p><p>读已提交和可重复读实现原理就是MVCC Read View不同的生成时机。可重复读只在事务开始时生成一个Read View，之后都用的这个；读已提交每次执行前都会生成Read View。</p><p>最后通过原子性、持久性、隔离性最终实现数据一致性。</p><h3 id="mysql的锁？为什么读多写少使用乐观锁？死锁什么时候会出现？"><a href="#mysql的锁？为什么读多写少使用乐观锁？死锁什么时候会出现？" class="headerlink" title="mysql的锁？为什么读多写少使用乐观锁？死锁什么时候会出现？"></a>mysql的锁？为什么读多写少使用乐观锁？死锁什么时候会出现？</h3><p>mysql锁按照模式可以分类为：乐观锁与悲观锁。按粒度分可以分为全局锁、表级锁、页级锁、行级锁。按属性可以分为：共享锁、排它锁。按状态分为：意向共享锁、意向排它锁。按算法分为：间隙锁、临键锁、记录锁。</p><h4 id="全局锁、表级锁、页级锁、行级锁"><a href="#全局锁、表级锁、页级锁、行级锁" class="headerlink" title="全局锁、表级锁、页级锁、行级锁"></a>全局锁、表级锁、页级锁、行级锁</h4><ul><li><p>全局锁就是对整个数据库实例加锁。常用在全库逻辑备份（mysqldump）。</p></li><li><p>当前操作的整张表加锁，最常使用的 MyISAM 与 InnoDB 都支持表级锁定。MySQL 里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock，MDL)。</p><p>表锁实现：<code>lock tables … read/write</code>。</p><p><strong>MDL作用是防止DDL和DML并发的冲突</strong> <strong>，保证读写的正确性</strong>MDL 不需要显式使用，在访问一个表的时候会被自动加上。MDL 的作用是，保证读写的正确性。当对一个表做增删改查操作的时候，加 MDL读锁；当要对表做结构变更操作的时候，加 MDL 写锁.</p><p>MDL比较复杂，后面我把网上找的资料补上。</p></li><li><p>页级锁是 MySQL 中锁定粒度介于行级锁和表级锁中间的一种锁。表级锁速度快，但冲突多，行级冲突少，但速度慢。因此，采取了折衷的页级锁，一次锁定相邻的一组记录。BDB 引擎支持页级锁。</p></li><li><p>行级锁是粒度最低的锁，发生锁冲突的概率也最低、并发度最高。但是加锁慢、开销大，容易发生死锁现象。</p><p>MySQL中只有InnoDB支持行级锁，行级锁分为共享锁和排他锁。在MySQL中，行级锁并不是直接锁记录，而是锁索引。索引分为主键索引和非主键索引两种，如果一条sql语句操作了主键索引，MySQL就会锁定这条主键索引；如果一条语句操作了非主键索引，MySQL会先锁定该非主键索引，再锁定相关的主键索引。在UPDATE、DELETE操作时，MySQL不仅锁定WHERE条件扫描过的所有索引记录，而且会锁定相邻的键值，即所谓的next-key locking。</p></li></ul><h4 id="乐观锁与悲观锁"><a href="#乐观锁与悲观锁" class="headerlink" title="乐观锁与悲观锁"></a>乐观锁与悲观锁</h4><p>乐观锁是相对悲观锁而言的，乐观锁假设数据一般情况下不会造成冲突。适用于读多写少，因为如果出现大量的写操作，写冲突的可能性就会增大，业务层需要不断重试，会大大降低系统性能。一般使用数据版本（Version）或时间戳记录机制实现，在数据库表中增加一个数字类型的“version”字段来实现。当读取数据时，将version字段的值一同读出，数据每更新一次，对此version值加一。</p><p>悲观锁，每次去拿数据的时候都认为别人会修改，对数据被外界修改持保守态度。适用于并发量不大、写入操作比较频繁、数据一致性比较高的场景。在MySQL中使用悲观锁，必须关闭MySQL的自动提交，set autocommit=0。共享锁和排它锁是悲观锁的不同的实现，它俩都属于悲观锁的范畴。</p><h4 id="共享锁和排他锁"><a href="#共享锁和排他锁" class="headerlink" title="共享锁和排他锁"></a>共享锁和排他锁</h4><h4 id="死锁的出现"><a href="#死锁的出现" class="headerlink" title="死锁的出现"></a>死锁的出现</h4><p>比如表级锁死锁，这个好理解。</p><p>行级锁死锁可能的原因是因为锁的膨胀，比如事务中执行了一条没有索引条件的查询，进行了全表扫描，膨胀为表级锁。</p><p>mysql的innoDb采用了一种叫作等待图(wait-for graph)的方法来自动检测死锁，如果发现死锁，就会自动回滚一个事务。</p><h3 id="redis使用场景？redisson的原理？线程递归使用锁？"><a href="#redis使用场景？redisson的原理？线程递归使用锁？" class="headerlink" title="redis使用场景？redisson的原理？线程递归使用锁？"></a>redis使用场景？redisson的原理？线程递归使用锁？</h3><p>使用场景同pdd。</p><h4 id="redission原理"><a href="#redission原理" class="headerlink" title="redission原理"></a>redission原理</h4><p>通过lua脚本来实现加锁的操作</p><ol><li>判断lock键是否存在，不存在直接调用hset存储当前线程信息并且设置过期时间,返回nil，告诉客户端直接获取到锁。</li><li>判断lock键是否存在，存在则将重入次数加1，并重新设置过期时间，返回nil，告诉客户端直接获取到锁。</li><li>被其它线程已经锁定，返回锁有效期的剩余时间，告诉客户端需要等待。</li></ol><p>加锁的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;T&gt; <span class="function">RFuture&lt;T&gt; <span class="title">tryLockInnerAsync</span><span class="params">(<span class="keyword">long</span> waitTime, <span class="keyword">long</span> leaseTime, TimeUnit unit, <span class="keyword">long</span> threadId, RedisStrictCommand&lt;T&gt; command)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> evalWriteAsync(getRawName(), LongCodec.INSTANCE, command,</span><br><span class="line">                          <span class="string">&quot;if (redis.call(&#x27;exists&#x27;, KEYS[1]) == 0) then &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return redis.call(&#x27;pttl&#x27;, KEYS[1]);&quot;</span>,</span><br><span class="line">                          Collections.singletonList(getRawName()), unit.toMillis(leaseTime), getLockName(threadId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>释放锁的流程: </p><ol><li>如果lock键不存在，通过<code>publish</code>指令发送一个消息表示锁已经可用。</li><li>如果锁不是被当前线程锁定，则返回nil</li><li>由于支持可重入，在解锁时将重入次数需要减1</li><li>如果计算后的重入次数&gt;0，则重新设置过期时间</li><li>如果计算后的重入次数&lt;=0，则发消息说锁已经可用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> RFuture&lt;Boolean&gt; <span class="title">unlockInnerAsync</span><span class="params">(<span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> evalWriteAsync(getRawName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,</span><br><span class="line">                          <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[3]) == 0) then &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return nil;&quot;</span> +</span><br><span class="line">                          <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;local counter = redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[3], -1); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;if (counter &gt; 0) then &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[2]); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return 0; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;else &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;redis.call(&#x27;del&#x27;, KEYS[1]); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;redis.call(&#x27;publish&#x27;, KEYS[2], ARGV[1]); &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return 1; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                          <span class="string">&quot;return nil;&quot;</span>,</span><br><span class="line">                          Arrays.asList(getRawName(), getChannelName()), LockPubSub.UNLOCK_MESSAGE, internalLockLeaseTime, getLockName(threadId));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>watchlog实现机制可以参考之前的复盘。</p><h3 id="redis集群模式了解过吗？怎么保证高可用？"><a href="#redis集群模式了解过吗？怎么保证高可用？" class="headerlink" title="redis集群模式了解过吗？怎么保证高可用？"></a>redis集群模式了解过吗？怎么保证高可用？</h3><p>下一期架构之路会搭建redis集群模式，这个我早上醒来就在想啥时候搭建一个，没想到下午面试就遇到了。</p><p>redis共有三种集群模式，主从复制模式（Master-Slave）、哨兵模式（Sentinel）和Cluster模式。</p><p>主从复制是Redis的一种基本集群模式，它通过将一个Redis节点（主节点）的数据复制到一个或多个其他Redis节点（从节点）来实现数据的冗余和备份。</p><p>主节点负责处理客户端的写操作，同时从节点会实时同步主节点的数据。客户端可以从从节点读取数据，实现读写分离，提高系统性能。</p><p>主从复制模式适合数据备份、读写分离和在线升级等场景，但在主节点故障时需要手动切换，不能自动实现故障转移。如果对高可用性要求较高，可以考虑使用哨兵模式或Cluster模式。</p><p>哨兵模式（Sentinel）是在主从复制基础上加入了哨兵节点，实现了自动故障转移。哨兵节点是一种特殊的Redis节点，它会监控主节点和从节点的运行状态。当主节点发生故障时，哨兵节点会自动从从节点中选举出一个新的主节点，并通知其他从节点和客户端，实现故障转移。</p><p>哨兵模式在主从复制模式的基础上实现了自动故障转移，提高了系统的高可用性。然而，它仍然无法实现数据分片。如果需要实现数据分片和负载均衡，可以考虑使用Cluster模式。</p><p>Cluster集群通过分片（sharding）模式来对数据进行管理，并具备分片间数据复制、故障转移和流量调度的能力。</p><p>Redis集群的做法是 将数据划分为 16384（2的14次方）个哈希槽（slots），如果你有多个实例节点，那么每个实例节点将管理其中一部分的槽位，槽位的信息会存储在各自所归属的节点中。</p><p>Cluster模式适用于以下场景：</p><ol><li>大规模数据存储：通过数据分片，突破单节点内存限制。</li><li>高性能要求场景：通过负载均衡，提高系统性能。</li><li>高可用性要求场景：通过自动故障转移，确保服务的持续可用。</li></ol><p>Cluster模式在提供高可用性的同时，实现了数据分片和负载均衡，适用于大规模数据存储和高性能要求的场景。然而，它的配置和管理相对复杂，且某些复杂的多键操作可能受到限制。</p><h3 id="spring事务的传播机制有哪几种，什么情况下事务会失效？"><a href="#spring事务的传播机制有哪几种，什么情况下事务会失效？" class="headerlink" title="spring事务的传播机制有哪几种，什么情况下事务会失效？"></a>spring事务的传播机制有哪几种，什么情况下事务会失效？</h3><ol><li>Propagation.REQUIRED：默认的事务传播级别，它表示如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li><li>Propagation.SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li><li>Propagation.MANDATORY：（mandatory：强制性）如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</li><li>Propagation.REQUIRES_NEW：表示创建一个新的事务，如果当前存在事务，则把当前事务挂起。也就是说不管外部方法是否开启事务，Propagation.REQUIRES_NEW 修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。</li><li>Propagation.NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li><li>Propagation.NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。</li><li>Propagation.NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于 PROPAGATION_REQUIRED。</li></ol><h4 id="事务失效的场景"><a href="#事务失效的场景" class="headerlink" title="事务失效的场景"></a>事务失效的场景</h4><ol><li><p>抛出检查异常，如果<code>@Transactional</code> 没有特别指定，Spring 只会在遇到运行时异常RuntimeException或者error时进行回滚。需要配置rollbackFor`属性。</p></li><li><p>业务方法本身捕获了异常。这个没啥好说的，当内部嵌套特别多的时候非常容易犯这种错误。</p></li><li><p>同一类中的方法调用。这个也容易犯错，加入A是<code>@Transactional</code>注解的方法，同类的B方法没有注解，但是内部调用了A方法，导致事务失效。很简单，原因就是方法没有被动态代理。</p></li><li><p>方法使用 final 或 static关键字。如果<code>Spring</code>使用了<code>Cglib</code>代理实现，而你的业务方法恰好使用了<code>final</code>或者<code>static</code>关键字，那么事务也会失败。更具体地说，它应该抛出异常，因为<code>Cglib</code>使用字节码增强技术生成被代理类的子类并重写被代理类的方法来实现代理。如果被代理的方法的方法使用<code>final</code>或<code>static</code>关键字，则子类不能重写被代理的方法。如果<code>Spring</code>使用<code>JDK</code>动态代理实现，<code>JDK</code>动态代理是基于接口实现的，那么<code>final</code>和<code>static</code>修饰的方法也就无法被代理。</p></li><li><p>方法不是public。<code>Spring</code>的事务管理源码<code>AbstractFallbackTransactionAttributeSource</code>中有判断<code>computeTransactionAttribute()。</code>如果目标方法不是公共的，则<code>TransactionAttribute</code>返回<code>null</code>。</p></li><li><p>错误使用传播机制。假设两个方法都使用REQUIRES_NEW，如果当前方法中没有事务，就会创建一个新的事务。如果一个事务已经存在，则当前事务将被挂起，并创建一个新事务。那么当A调用B完成后，B事务已经提交，A就算回滚了也影响不了B。</p></li><li><p>没有被Spring管理。这种情况一般来说不会发生。</p></li><li><p>多线程。我们说的同一个事务，其实是指同一个数据库连接，只有拥有同一个数据库连接才能同时提交和回滚。如果在不同的线程，拿到的数据库连接肯定是不一样的，所以是不同的事务。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>基础问题很多没答上来，得好好复习。面试官人挺好，感觉就是聊聊天。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;拼多多和b站两场面试，大概率凉凉。  &lt;/p&gt;
&lt;p&gt;“你这业务都是偏向工具类啊”。这句话一说出我也只能呵呵一笑了，确实是这样，面试越多越发
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="随想" scheme="https://re0.top/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="面经" scheme="https://re0.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>【架构之路4】k8s对接ceph-rbd</title>
    <link href="https://re0.top/2024/07/12/devops4/"/>
    <id>https://re0.top/2024/07/12/devops4/</id>
    <published>2024-07-12T13:30:00.000Z</published>
    <updated>2024-07-12T12:06:35.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上篇讲了cephfs对接k8s集群，体验不是很好，这篇接着体验ceph-rbd。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="安装rbd驱动"><a href="#安装rbd驱动" class="headerlink" title="安装rbd驱动"></a>安装rbd驱动</h2><p>很简单，接着使用helm安装即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl create namespace &quot;ceph-csi-rbd&quot;</span><br><span class="line">helm install --namespace &quot;ceph-csi-rbd&quot; &quot;ceph-csi-rbd&quot; ceph-csi/ceph-csi-rbd</span><br></pre></td></tr></table></figure><h2 id="ceph-pool-secret创建"><a href="#ceph-pool-secret创建" class="headerlink" title="ceph pool secret创建"></a>ceph pool secret创建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool create k8s_rbd 128 128</span><br><span class="line">// 记得初始化</span><br><span class="line">rbd pool init k8s_rbd</span><br></pre></td></tr></table></figure><p>创建名为k8s的用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ceph auth get-or-create client.k8s mon &#x27;profile rbd&#x27; osd &#x27;profile rbd pool=k8s_rbd&#x27;</span><br><span class="line">// AQAx4JBm6BItDBAAQue62g4QOmdDD27/PFZmQQ==</span><br></pre></td></tr></table></figure><h2 id="修改k8s集群的rbd驱动配置文件"><a href="#修改k8s集群的rbd驱动配置文件" class="headerlink" title="修改k8s集群的rbd驱动配置文件"></a>修改k8s集群的rbd驱动配置文件</h2><p>老样子，安装rbd驱动后，ceph-csi-rbd命名空间下会有ceph-csi-config的configMap，修改它。</p><p>这里我直接通过kubepi网页直接修改了，很方便，修改它的config.json，把下面的东西粘贴进去。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;clusterID&quot;</span>: <span class="string">&quot;ed91a6b4-3df6-11ef-9d94-000c29a7737d&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;monitors&quot;</span>: [</span><br><span class="line">          <span class="string">&quot;192.168.28.138:6789&quot;</span>,</span><br><span class="line">          <span class="string">&quot;192.168.28.139:6789&quot;</span>,</span><br><span class="line">          <span class="string">&quot;192.168.28.140:6789&quot;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>增加secret.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">csi-rbd-secret</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ceph-csi-rbd</span></span><br><span class="line"><span class="attr">stringData:</span></span><br><span class="line">  <span class="attr">userID:</span> <span class="string">k8s</span></span><br><span class="line">  <span class="attr">userKey:</span> <span class="string">AQAx4JBm6BItDBAAQue62g4QOmdDD27/PFZmQQ==</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">   <span class="attr">name:</span> <span class="string">csi-rbd-sc</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">rbd.csi.ceph.com</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">   <span class="attr">clusterID:</span> <span class="string">ed91a6b4-3df6-11ef-9d94-000c29a7737d</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">pool:</span> <span class="string">k8s_rbd</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">imageFeatures:</span> <span class="string">&quot;layering&quot;</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">csi.storage.k8s.io/provisioner-secret-name:</span> <span class="string">csi-rbd-secret</span></span><br><span class="line">   <span class="attr">csi.storage.k8s.io/provisioner-secret-namespace:</span> <span class="string">ceph-csi-rbd</span></span><br><span class="line">   <span class="attr">csi.storage.k8s.io/controller-expand-secret-name:</span> <span class="string">csi-rbd-secret</span></span><br><span class="line">   <span class="attr">csi.storage.k8s.io/controller-expand-secret-namespace:</span> <span class="string">ceph-csi-rbd</span></span><br><span class="line">   <span class="attr">csi.storage.k8s.io/node-stage-secret-name:</span> <span class="string">csi-rbd-secret</span></span><br><span class="line">   <span class="attr">csi.storage.k8s.io/node-stage-secret-namespace:</span> <span class="string">ceph-csi-rbd</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">csi.storage.k8s.io/fstype:</span> <span class="string">ext4</span></span><br><span class="line"><span class="attr">reclaimPolicy:</span> <span class="string">Delete</span></span><br><span class="line"><span class="attr">allowVolumeExpansion:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If filesystem is xfs, nouuid will be automatically added to mountOptions</span></span><br><span class="line"><span class="attr">mountOptions:</span>   </span><br><span class="line">  <span class="bullet">-</span> <span class="string">discard</span></span><br></pre></td></tr></table></figure><h2 id="创建pvc绑定容器"><a href="#创建pvc绑定容器" class="headerlink" title="创建pvc绑定容器"></a>创建pvc绑定容器</h2><p>先创建pvc，<code>vim ceph-rbd-pvc.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">csi-rbd-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">csi-rbd-sc</span></span><br></pre></td></tr></table></figure><p><code>kubectl get pvc</code>可以看到是Bound的状态。</p><p>绑定个容器试试，老熟人nginx</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mypvc</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mypvc</span></span><br><span class="line">        <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">          <span class="attr">claimName:</span> <span class="string">csi-rbd-pvc</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">false</span></span><br><span class="line"> <span class="string">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span> <span class="comment"># service类型</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>试了下也是正常绑定了。</p><h2 id="是否解决了cephfs的问题"><a href="#是否解决了cephfs的问题" class="headerlink" title="是否解决了cephfs的问题"></a>是否解决了cephfs的问题</h2><p>先看看重新绑定好使不。</p><p>老套路，进容器往/usr/share/nginx/html/index.html写点东西。然后nginx删掉重新部署看看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Multi-Attach error for volume &quot;pvc-eb833c50-0acf-4b36-8b4e-b9e262f42406&quot; Volume is already used by pod(s) nginx-deployment-697596746b-z9zwp</span><br></pre></td></tr></table></figure><p>报了个错，但是问题不大，因为不支持ReadWriteMany，所以绑定有问题，稍等片刻等前一个容器停止后，重新访问容器发现文件都还在。</p><p>然后是自动释放.先把nginx停掉.然后删除pvc.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f /ceph-pvc.yaml</span><br></pre></td></tr></table></figure><p>可以看到pv也自动删除了，非常好。</p><p>扩容缩容也没啥问题。完美。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>rbd使用上相比fs果然好使，不知道是不是因为我把所有无关的pool都删除的原因，现在创建，绑定删除都没有任何问题。</p><p>至此ceph与k8s的对接就告一段落了。</p><p>后续应该是按照这个思路接着写我的部署系统了。但是有一点没想好就是volume应该在一个命名空间下去管理，还是说分散到各个应用中呢？PV属于集群级别，PVC有命名空间，那么volume数据存放到应用的命名空间就行了，只要把回收策略从Delete改为Retain应该就好了，删除时不影响数据即可。嗯就这么搞。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;上篇讲了cephfs对接k8s集群，体验不是很好，这篇接着体验ceph-rbd。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot;
      
    
    </summary>
    
    
      <category term="编程" scheme="https://re0.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="架构" scheme="https://re0.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="运维" scheme="https://re0.top/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="从0.5开始的运维架构之路" scheme="https://re0.top/tags/%E4%BB%8E0-5%E5%BC%80%E5%A7%8B%E7%9A%84%E8%BF%90%E7%BB%B4%E6%9E%B6%E6%9E%84%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
</feed>
